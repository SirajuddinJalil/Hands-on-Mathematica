(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframAlphaNB 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[   1119189,      20718]
NotebookOptionsPosition[   1104705,      20489]
NotebookOutlinePosition[   1105253,      20508]
CellTagsIndexPosition[   1105210,      20505]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Hands-on Start", "Title", "NLI",
 CellChangeTimes->{{3.84269599985115*^9, 
  3.8426960046127234`*^9}},ExpressionUUID->"7dd2333f-d3cd-49f1-b9b9-\
80ab84bbb1a3"],

Cell[CellGroupData[{

Cell["\<\
Basic Calculations
\
\>", "Section", "NLI",
 CellChangeTimes->{{3.8426960234744987`*^9, 3.842696028078875*^9}, 
   3.8427040193551273`*^9},ExpressionUUID->"34aa87d5-4596-4f55-a967-\
a6b913b753de"],

Cell["https://www.youtube.com/watch?v=CK3egKjjqEc&t=350s", "Text", "NLI",
 CellChangeTimes->{
  3.8427040441190968`*^9},ExpressionUUID->"e851b375-35ed-43d0-b9bd-\
9efbe045cd43"],

Cell[CellGroupData[{

Cell["Arithmetic", "Subsection", "NLI",
 CellChangeTimes->{{3.842696070126604*^9, 
  3.8426960746461763`*^9}},ExpressionUUID->"38142254-97f9-4cfe-a32a-\
a72c89340e47"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query[
    "boxes" -> RowBox[{"18", "/", "72"}], "json" -> 
     "[{\"t\":0,\"v\":\"18\\/72\"}]"], "assumptions" -> {}, "parse" -> 
   Defer[18/72], "inputpredictions" -> {}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[2]:=",ExpressionUUID->"743f9f52-a09c-4708-83e3-76264149d19c"],

Cell[BoxData[
 RowBox[{"18", "/", "72"}]], "DeployedWLInput",
 CellChangeTimes->{3.8426960879623933`*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"38c6f73a-1b1d-43ad-8163-2ed6fd940e72"],

Cell[BoxData[
 FormBox[
  FractionBox["1", "4"], TraditionalForm]], "Output",
 CellChangeTimes->{3.8426960879823694`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"fb5d4bf2-ac79-45c3-ad1e-6785908442fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"16", "/", "72"}], " ", "to", " ", "3", " ", "digits"}], 
     "json" -> "[{\"t\":0,\"v\":\"16\\/72 to 3 digits\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     N[16/72, 3]], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[3]:=",ExpressionUUID->"9faa5c69-6e28-4606-bd45-ddf7508ef4d0"],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"16", "/", "72"}], ",", " ", "3"}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"N", 2}}}},
 CellChangeTimes->{3.842696116130006*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"dd4af654-4d1b-4674-961d-1d2522662d05"],

Cell[BoxData[
 FormBox["0.2222222222222222222`3.", TraditionalForm]], "Output",
 CellChangeTimes->{3.842696116155439*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"a132bbdf-7268-4372-90f9-5f0685b9d4e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query[
    "boxes" -> RowBox[{"5", "^", "3"}], "json" -> 
     "[{\"t\":0,\"v\":\"5^3\"}]"], "assumptions" -> {}, "parse" -> Defer[5^3],
    "inputpredictions" -> {}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[1]:=",ExpressionUUID->"17adbdd5-400d-4190-8472-6865612dc465"],

Cell[BoxData[
 RowBox[{"5", "^", "3"}]], "DeployedWLInput",
 CellChangeTimes->{3.8426958918122797`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"a9db4aaa-2438-4b69-b1f1-225c288180f4"],

Cell[BoxData[
 FormBox["125", TraditionalForm]], "Output",
 CellChangeTimes->{3.842695898728185*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"81000b03-4575-44c3-b6af-a5c0fcfa9f9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query[
    "boxes" -> RowBox[{"Pi", " ", "to", " ", "100", " ", "digits"}], "json" -> 
     "[{\"t\":0,\"v\":\"Pi to 100 digits\"}]"], "assumptions" -> {}, "parse" -> 
   Defer[
     N[Pi, 100]], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[4]:=",ExpressionUUID->"9076aaac-72bb-4355-a31b-2b3fbe189a74"],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Pi", ",", " ", "100"}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"N", 2}}}},
 CellChangeTimes->{3.8426962281597185`*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"925d80b2-22b7-4111-bb08-e8dfbc372002"],

Cell[BoxData[
 FormBox["3.\
141592653589793238462643383279502884197169399375105820974944592307816406286208\
9986280348253421170679821480865191976`100.", TraditionalForm]], "Output",
 CellChangeTimes->{3.8426962282194395`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"679b6eb4-ca43-450d-90d8-7e759f716fd3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Variables and Defining Functions", "Subsection", "NLI",
 CellChangeTimes->{{3.842696253022822*^9, 
  3.842696259730301*^9}},ExpressionUUID->"965a75ba-6532-48bc-b77d-\
c5fc14c294f5"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"set", " ", "b"}], "=", "5"}], "json" -> 
     "[{\"t\":0,\"v\":\"set b=5\"}]"], "assumptions" -> {}, "parse" -> 
   Defer[$CellContext`b = 5], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[2]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[9]:=",ExpressionUUID->"48434f76-6168-421e-a142-1d9b2f3b06eb"],

Cell[BoxData[
 RowBox[{"b", " ", "=", " ", "5"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Set", 1}}}},
 CellChangeTimes->{3.8426963382739096`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"93226e40-a263-4aae-b86b-8ac8a186881d"],

Cell[BoxData[
 FormBox["5", TraditionalForm]], "Output",
 CellChangeTimes->{3.8426963383804016`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"17a47caf-cd31-4090-81a9-00ff6140044a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"b", "^", "2"}], "+", 
        RowBox[{"5", "b"}]}], "json" -> "[{\"t\":0,\"v\":\"b^2+5b\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[$CellContext`b^2 + 5 $CellContext`b],
    "inputpredictions" -> {}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, "allassumptions" -> {
     XMLElement["assumptions", {"count" -> "1"}, {
       XMLElement[
       "assumption", {
        "type" -> "Clash", "word" -> "b", "template" -> 
         "Assuming \"b\" is referring to math${separator}Use as ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
         "{\"C\", \"b\"} -> {\"SessionVariable\", \"dflt\"}"}, {
         XMLElement[
         "value", {
          "name" -> "SessionVariable", "desc" -> " referring to math", 
           "input" -> "{\"C\", \"b\"} -> {\"SessionVariable\"}"}, {}], 
         XMLElement[
         "value", {
          "name" -> "Unit", "desc" -> "a unit", "input" -> 
           "{\"C\", \"b\"} -> {\"Unit\"}"}, {}]}]}]}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[3]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {80., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[10]:=",ExpressionUUID->"761d87e2-6e61-4a58-b272-7f77bac0c2f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"b", "^", "2"}], " ", "+", " ", 
  RowBox[{"5", "*", "b"}]}]], "DeployedWLInput",
 CellChangeTimes->{3.842696341165987*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"bf1dedbf-1926-4999-aa16-4b165a1058bf"],

Cell[BoxData[
 FormBox["50", TraditionalForm]], "Output",
 CellChangeTimes->{3.842696341284684*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"d564548c-4b66-4628-aac3-5bd58393632a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query[
    "boxes" -> RowBox[{"unset", " ", "b"}], "json" -> 
     "[{\"t\":0,\"v\":\"unset b\"}]"], "assumptions" -> {}, "parse" -> Defer[
     Unset[$CellContext`b]], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[7]:=",ExpressionUUID->"485b3b17-a7f5-4d80-8786-6d267f4e3e43"],

Cell[BoxData[
 RowBox[{
  RowBox[{"b", " ", "=."}], " "}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Unset", 1}}}},
 CellChangeTimes->{3.8426962992176247`*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"c15078a8-2e3b-45c8-92fa-ec4116fe75d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"set", " ", 
          RowBox[{"f", "(", "x", ")"}]}], "=", 
        RowBox[{
          RowBox[{"x", "^", "2"}], "+", 
          RowBox[{"2", "x"}], "+", "2"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"set f(x)=x^2+2x+2\"}]"], "assumptions" -> {}, "parse" -> 
   Defer[$CellContext`f[
       Pattern[$CellContext`x, 
        Blank[]]] := $CellContext`x^2 + 2 $CellContext`x + 2], 
   "inputpredictions" -> {}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[11]:=",ExpressionUUID->"7da64eee-d3f3-478d-8081-b47e118f6ddb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"x", "^", "2"}], " ", "+", " ", 
   RowBox[{"2", "*", "x"}], " ", "+", " ", "2"}]}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{
  "UsageTags" -> {{"SetDelayed", 2}, {"Pattern", 1}, {"Blank", 0}}}},
 CellChangeTimes->{3.842696364903659*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"76838a16-460d-484f-9674-207c24023c38"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query[
    "boxes" -> RowBox[{"f", "(", "5", ")"}], "json" -> 
     "[{\"t\":0,\"v\":\"f(5)\"}]"], "assumptions" -> {}, "parse" -> Defer[
     $CellContext`f[5]], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[12]:=",ExpressionUUID->"01dc7cf6-746f-4927-8762-a346365fe287"],

Cell[BoxData[
 RowBox[{"f", "[", "5", "]"}]], "DeployedWLInput",
 CellChangeTimes->{3.842696380136178*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"3470ef6c-de25-4bd7-9f8f-492045d84ce9"],

Cell[BoxData[
 FormBox["37", TraditionalForm]], "Output",
 CellChangeTimes->{3.8426963801870384`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"be86c8c0-030a-4292-91ea-67e9b6b88346"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"f", "'"}], 
        RowBox[{"(", "x", ")"}]}], "json" -> "[{\"t\":0,\"v\":\"f'(x)\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     Derivative[1][$CellContext`f][$CellContext`x]], 
   "inputpredictions" -> {{"InputMathOperation$PlotFunctionWithDerivative", 
      Predictions`Prediction[
      0.99, "plotting", "plot function and derivative", HoldComplete[
        Plot[{
         2 + 2 $CellContext`x + $CellContext`x^2, 2 + 
          2 $CellContext`x}, {$CellContext`x, -8.`3., 8.`3.}, 
         PlotLegends -> {"f", "f'"}]]& ], Predictions`InInput}, {
     "InputMathOperation$OtherDerivatives", 
      Predictions`Prediction[0.98, "derivatives", 
       Row[{
         Pane[
          Style[
           HoldForm[2], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], 
         Pane[
          Style[
           HoldForm["nd"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " derivative"}], HoldComplete[
        Derivative[2][$CellContext`f][$CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.96, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[
         $CellContext`f[$CellContext`x], $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.95, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[
         $CellContext`f[$CellContext`x]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[
           $CellContext`f[$CellContext`x], {$CellContext`x}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
           $CellContext`f[$CellContext`x], {$CellContext`x}, \
{$CellContext`y}]]& }}], Predictions`InInput}, {
     "InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
           $CellContext`f[$CellContext`x], $CellContext`x]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
           $CellContext`f[$CellContext`x], $CellContext`x]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
           $CellContext`f[$CellContext`x], $CellContext`x]]& }}], 
      Predictions`InInput}, {"InputMathOperation$InflectionPoints", 
      Predictions`Prediction[
      0.5, "analysis", "inflection points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["InflectionPoints"][$CellContext`x, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[
           $CellContext`f[$CellContext`x], {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[
           $CellContext`f[$CellContext`x], {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[$CellContext`y == $CellContext`f[$CellContext`x], \
$CellContext`x]]& ], Predictions`InInput}, {"InputMathOperation$PlotFunction", 
      Predictions`Prediction[0.5, "plotting", "plot function", HoldComplete[
        Plot[$CellContext`x, {$CellContext`x, -10.`3., 10.`3.}]]& ], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.5, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[$CellContext`x == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][$CellContext`x, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           $CellContext`f[$CellContext`x], $CellContext`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           $CellContext`f[$CellContext`x], $CellContext`x -> 
           DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           $CellContext`f[$CellContext`x], $CellContext`x -> 
           DirectedInfinity[1]]]& }}], Predictions`InInput}, {
     "InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[
         $CellContext`f[$CellContext`x], {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[13]:=",ExpressionUUID->"092dcbb3-1986-4f34-9f80-1c3ac56654a2"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["f", "\[Prime]",
   MultilineFunction->None], "[", "x", "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Derivative", 1}}}},
 CellChangeTimes->{3.8426963933645725`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"702e3c27-8810-4870-9a74-fd44972488e0"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"2", " ", "x"}], "+", "2"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.842696393403533*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"1c474227-e1ec-459a-9171-abbf1f2c32bd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{
          RowBox[{"f", "'"}], 
          RowBox[{"(", "x", ")"}], " ", "where", " ", "x"}], "=", "10"}], 
     "json" -> "[{\"t\":0,\"v\":\"f'(x) where x=10\"}]"], "assumptions" -> {},
    "parse" -> Defer[
     ReplaceAll[
      Derivative[1][$CellContext`f][$CellContext`x], {$CellContext`x -> 10}]],
    "inputpredictions" -> {}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1224., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[14]:=",ExpressionUUID->"27855772-ad05-4776-be20-4c65ee56df8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["f", "\[Prime]",
    MultilineFunction->None], "[", "x", "]"}], " ", "/.", " ", 
  RowBox[{"{", 
   RowBox[{"x", " ", "->", " ", "10"}], "}"}]}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"ReplaceAll", 1}, {"Derivative", 1}}}},
 CellChangeTimes->{3.842696412172739*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"56bcfa97-fdd9-4795-b69e-1c4c3b6b11c0"],

Cell[BoxData[
 FormBox["22", TraditionalForm]], "Output",
 CellChangeTimes->{3.8426964122124147`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"d9414f25-9887-4d5f-a9e5-7ffdf5c044a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"set", " ", 
          RowBox[{"g", "(", 
            RowBox[{"x", ",", "y"}], ")"}]}], "=", 
        RowBox[{"x", "^", "y"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"set g(x,y)=x^y\"}]"], "assumptions" -> {}, "parse" -> 
   Defer[$CellContext`g[
       Pattern[$CellContext`x, 
        Blank[]], 
       Pattern[$CellContext`y, 
        Blank[]]] := $CellContext`x^$CellContext`y], "inputpredictions" -> {},
    "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{544., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[15]:=",ExpressionUUID->"fb74639c-de40-4ddd-bf9d-8ab3e2a29c1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", 
   RowBox[{"x_", ",", " ", "y_"}], "]"}], " ", ":=", " ", 
  RowBox[{"x", "^", "y"}]}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{
  "UsageTags" -> {{"SetDelayed", 2}, {"Pattern", 1}, {"Blank", 0}}}},
 CellChangeTimes->{3.8426964634230185`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"9a28d622-9289-4acf-89df-be0783e124ec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{"g", "(", 
        RowBox[{"10", ",", "10"}], ")"}], "json" -> 
     "[{\"t\":0,\"v\":\"g(10,10)\"}]"], "assumptions" -> {}, "parse" -> Defer[
     $CellContext`g[10, 10]], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {
     XMLElement["assumptions", {"count" -> "1"}, {
       XMLElement[
       "assumption", {
        "type" -> "Clash", "word" -> "g", "template" -> 
         "Assuming \"g\" is referring to math${separator}Use as ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
         "{\"C\", \"g\"} -> {\"SessionFunction\", \"dflt\"}"}, {
         XMLElement[
         "value", {
          "name" -> "SessionFunction", "desc" -> " referring to math", 
           "input" -> "{\"C\", \"g\"} -> {\"SessionFunction\"}"}, {}], 
         XMLElement[
         "value", {
          "name" -> "Unit", "desc" -> "a unit", "input" -> 
           "{\"C\", \"g\"} -> {\"Unit\"}"}, {}]}]}]}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{544., {80., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[16]:=",ExpressionUUID->"a18367f3-7e99-4ba4-ab6e-41f301646e75"],

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"10", ",", " ", "10"}], "]"}]], "DeployedWLInput",
 CellChangeTimes->{3.842696473705011*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"d821031a-f8b1-4328-b045-ad9dd55bef68"],

Cell[BoxData[
 FormBox["10000000000", TraditionalForm]], "Output",
 CellChangeTimes->{3.842696473727814*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"694400d8-8d87-4fc0-9d41-a0c1110e364b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Algebra", "Subsection", "NLI",
 CellChangeTimes->{{3.8426965270877724`*^9, 
  3.842696528179428*^9}},ExpressionUUID->"c17fa149-f911-4576-9b48-\
aaae72c8c9d4"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"graph", " ", "y"}], "=", 
        RowBox[{
          RowBox[{"2", "x"}], "-", "2"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"graph y=2x-2\"}]"], "assumptions" -> {}, "parse" -> 
   Defer[
     Plot[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]], 
   "inputpredictions" -> {{"InputMathOperation$AlternativePlot", 
      Predictions`Prediction[0.99, "plotting", "", {{"log plot", HoldComplete[
          LogPlot[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& }, {
        "log-log plot", HoldComplete[
          LogLogPlot[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& }, {
        "log-linear plot", HoldComplete[
          LogLinearPlot[
          2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.98, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[2 $CellContext`x - 2 == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$Discontinuities", 
      Predictions`Prediction[
      0.94, "analysis", "discontinuities", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["FunctionDiscontinuities"][2 $CellContext`x - 2, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.9299999999999999, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[2 $CellContext`x - 2, {$CellContext`x}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
          2 $CellContext`x - 2, {$CellContext`x}, {$CellContext`y}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[2 $CellContext`x - 2]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegrateOverPlotRange", 
      Predictions`Prediction[
      0.5, "integration", "integrate over plot range", HoldComplete[
        Integrate[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotIntercepts", 
      Predictions`Prediction[
      0.5, "analysis", "intercepts", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Intercepts"][2 $CellContext`x - 2, {
           Hold[$CellContext`x], $CellContext`y}]]]& ], 
      Predictions`InInput}, {"InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[$CellContext`y == 2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][2 $CellContext`x - 2, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        D[2 $CellContext`x - 2, $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[2 $CellContext`x - 2, $CellContext`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[1]]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[2 $CellContext`x - 2, {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{544., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[17]:=",ExpressionUUID->"2b63d455-fe47-433b-88c3-94ae4677f3d4"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "*", "x"}], " ", "-", " ", "2"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "1.5"}], ",", " ", "1.5"}], "}"}]}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Plot", 1}}}},
 CellChangeTimes->{3.842696551512124*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"51f3d2f9-611c-4993-a9c9-126e317ea661"],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{{}, {}, 
     TagBox[
      {LABColor[0.676094128119322, 0.4485405917061707, 0.7359231649869302], 
       AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1:eJwtlGs01Hkch4fQIsK/6TLKuuwol1XrIDXWV3SRJYRoqeZokm1ZVqVodVuS
UqZSit2yJVGimqJa/H4xa8fR5JLKdMSENGbG/F3G/Cxh23P2xec8r54Xz5uP
VXTC5l3aDAYj4PP+484KPj0zQ9CDcBGZmaHwvEmWLecTQafSjC4smaawcP3N
qORxgqJvbHbifKKwbdeTRuUQQRTdyUsep7B8Tu8NyXuC9p8YblUOUThxj2uE
oJ4g90esMsl7Ch9mv8UxmQQhs3iuoJ7C+QU258XGBInFpo0xmRS+1n0yIVhf
g1oShFUlOhSe3xISaMccQ4ay0lu5p8ywKChkbRNbjXgldtc/mJlhXzv2Phvr
UVSUa/bU9JwpXl0eVdy8fAQtCXd6+XGBKZ44FUM52w2jtHUC/Su5JniMFF3c
vnQITRxq86ugTLDQ+rxLbbwKRZtuZHW7zcUc3SMCB54SXT2OJExnY5zrtXLl
mjQ58issKCj0NMI7f4v4IL8mQ86bypLGAufg5lsW+lr5/UgWkpPOCDDEFnPu
fYMq+9BcvY7LOyINsIFlf/PA7R6kazL6cV+YPo4LzbhcUiJFbre9/UNDv8Dc
+u4mi/PvUMcQeZDJm42tv50O/uuYBPnmHAn9mauHS2MF7/+sfIXs38aNl8fr
4j2j96NO57eit784vrkeo4OdDutu1bNpQg0Vlk1c3ixMpbQbXiqoR9Y5qc+S
9mrjN7w4+4reShTQUDyy+ictfCDV/mzjxatIXupuG57KwLdz3L2KVvwOv3Km
36XOn0Fnfzj2mnu8Cl60Lf8gmDuFjNT+nLLgepiqcxzOdZhE0n0NLsnpTSCK
fpHUY/EPUj0JqDsgagV9G4mF0Jyg4sw/uLysV/C1R0VzAGcMsTV3qIMFElDp
2Gt8nEdR14Mvazix7+CcbaJVz3fDKCxPelLBl8KWVk/Vsi4Vunozu8b/Ug8I
H/anx7yUI53I+EHdlD4Y38hmq40+ohfc0lub0/uB53n33vekBz0yYm0jcTJw
bMw7be3fhWzzrWSz/eUQm5eyQ9r8Gk0kp0/dCVHCCt9OqjBajBQT5sYl7ioI
CvayOLK/GhXuzmw3txkCRovAR37mHPDXPM9exB4GxiLh88vBdWCccMe7njkC
iQcjmazyFqhd+7imkjUKQ+y6wUevOmAqfofbFmM1qKvSJBGrpKA1u+2Kw5Qa
dBb77i5X94Kbb1KdH0MDHZaN+g5aMpjoLJMxRzQg2yu4Hi5SwNo4ET9AowGT
+1Y+bhIFnJnsdc+Y0ICLKqd3nlwBlizzLLU2gaOxcV+1GSphQ3iW3UuKwOJt
7GL/QCXktu7aw3clELQ+r3TNayU4NVgoDVIIPF546J5D3yAcDFud651GQBo2
EGQwNgjP+sI8Uo8R0LkQPizTVUHorDPZA1mffSMX5+KlKjjkNekoyieg1BoU
WP6oAtHTN/EZ1QQsFdurmCMqMPMbZdZgAr7LxOFqbRqiJMa1aiGBxF2c8TaK
BpqsM+aJCVR3L1jFd6VhvuvDcu8uAhHtLU8NUmjgCpu3pPZ87jGFyIEsGkpD
FNP3+wkUbbo7+Xc+DR5J1oFWNIEhUZZHRjUNJ7Q8ScQogYV64507xTS08Lde
4xMCXj4xad5dNLAs928QTRKIPdq+xIqm4f//guwa79qZGRr+BSvCj4c=
        "]]},
      Annotation[#, "Charting`Private`Tag$26247#1"]& ]}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0., 0.},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
     "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{-1.5, 1.5}, {-4.999999877551021, 0.9999998775510206}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{3.842696552412592*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"ecc1392c-6210-41fc-b3d0-886b73e79c30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"graph", " ", "y"}], "=", 
        RowBox[{
          RowBox[{
            RowBox[{"2", 
              RowBox[{"x", "^", "2"}]}], "-", 
            RowBox[{"2", " ", "and", " ", "y"}]}], "=", 
          RowBox[{
            RowBox[{"2", "x"}], "-", "2"}]}]}], "json" -> 
     "[{\"t\":0,\"v\":\"graph y=2x^2-2 and y=2x-2\"}]"], "assumptions" -> {}, 
   "parse" -> Defer[
     Plot[{
      2 $CellContext`x^2 - 2, 2 $CellContext`x - 2}, {$CellContext`x, -1.3, 
       1.3}]], "inputpredictions" -> {{"InputMathOperation$AlternativePlot", 
      Predictions`Prediction[0.99, "plotting", "", {{"log plot", HoldComplete[
          
          LogPlot[{
           2 $CellContext`x^2 - 2, 2 $CellContext`x - 
            2}, {$CellContext`x, -1.3, 1.3}]]& }, {
        "log-log plot", HoldComplete[
          
          LogLogPlot[{
           2 $CellContext`x^2 - 2, 2 $CellContext`x - 
            2}, {$CellContext`x, -1.3, 1.3}]]& }, {
        "log-linear plot", HoldComplete[
          
          LogLinearPlot[{
           2 $CellContext`x^2 - 2, 2 $CellContext`x - 
            2}, {$CellContext`x, -1.3, 1.3}]]& }}], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.9299999999999999, "properties", "function domain", HoldComplete[
        FunctionDomain[{
         2 $CellContext`x^2 - 2, 2 $CellContext`x - 2}, {$CellContext`x}]]& ],
       Predictions`InInput}, {"InputMathOperation$AreaBetweenCurves", 
      Predictions`Prediction[
      0.92, "applications of calculus", "area between curves", HoldComplete[
        ResourceFunction[
        "AreaBetweenCurves"][{
         2 $CellContext`x^2 - 2, 2 $CellContext`x - 2}, {$CellContext`x, -1.3,
           1.3}]]& ], Predictions`InInput}, {
     "InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[{2 $CellContext`x^2 - 2, 2 $CellContext`x - 2}]]& ], 
      Predictions`InInput}, {"InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction[
          "FunctionParity"][{
           2 $CellContext`x^2 - 2, 2 $CellContext`x - 
            2}, $CellContext`x]]& }, {"even function?", HoldComplete[
          ResourceFunction[
          "EvenFunctionQ"][{
           2 $CellContext`x^2 - 2, 2 $CellContext`x - 
            2}, $CellContext`x]]& }, {"odd function?", HoldComplete[
          ResourceFunction[
          "OddFunctionQ"][{
           2 $CellContext`x^2 - 2, 2 $CellContext`x - 
            2}, $CellContext`x]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          
          Integrate[{
           2 $CellContext`x^2 - 2, 2 $CellContext`x - 2}, {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          
          Integrate[{
           2 $CellContext`x^2 - 2, 2 $CellContext`x - 2}, {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegrateOverPlotRange", 
      Predictions`Prediction[
      0.5, "integration", "integrate over plot range", HoldComplete[
        Integrate[{
         2 $CellContext`x^2 - 2, 2 $CellContext`x - 2}, {$CellContext`x, -1.3,
           1.3}]]& ], Predictions`InInput}, {"InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        D[{2 $CellContext`x^2 - 2, 2 $CellContext`x - 2}, $CellContext`x]]& ],
       Predictions`InInput}, {"InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[{
         2 $CellContext`x^2 - 2, 2 $CellContext`x - 2}, $CellContext`x]]& ], 
      Predictions`InInput}}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{544., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[18]:=",ExpressionUUID->"fb94a166-7111-4ec5-b5f8-996ea38b0928"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"2", "*", 
       RowBox[{"x", "^", "2"}]}], " ", "-", " ", "2"}], ",", " ", 
     RowBox[{
      RowBox[{"2", "*", "x"}], " ", "-", " ", "2"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "1.3"}], ",", " ", "1.3"}], "}"}]}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Plot", 2}}}},
 CellChangeTimes->{3.842696573034444*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"cb78a527-fb3a-460e-ba86-14ab91cae1f7"],

Cell[BoxData[
 FormBox[
  TemplateBox[{
    GraphicsBox[{{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           LABColor[
           0.676094128119322, 0.4485405917061707, 0.7359231649869302], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1: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
           "]]}, Annotation[#, "Charting`Private`Tag$27179#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           LABColor[
           0.5853360561832326, 0.26865329572568364`, -0.6345226984584871], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwtlGs01HkcxidLGpqNUfYIkZLLrjRJuUx9ayiVW8qitCm3pNro7LQ4VBpN
mqRZJ5LUGQe1aM8oZGvt/H4SRkmTkUsuM/MnbIMx5i+kWHvOvnjO8+Lz4nOe
N8/q8DP7o7QoFIrvQv7rPnamqLmZRCo3r7DoaDpOF6fkpjeRyHNgm8+LSDp2
Mj191rOBRHnXN7taRSxw7L2uBi1wubVRXxgdM/SpmWWPSZR7Wbvxx4N0nCbg
/MTLJRFLUrt+pw8d279K+OIVSaLsKObcmo10zLaMcKub1SA3PuOu4qshnuh/
Fr/WRINm4ntdsjIMsZAqdOLtnECdaR0m9VaG2DUxg298To3ymbt26/9lgEsW
jf5Oyx5HbRfPtXH3GuBHndJbdK4KhYz8402tW4Z7ZNJAmWgUjalOlJ6RfYsL
ku57zcwr0b6t0sIv8zQ82PXI3yzsI9KMdNpkOtLwVGxdy/I7wyi56thxnu9S
fBXTIownBxf2cRnXkvRxZYm9Q1TwB/Q+MDvncZkeLnvh+/PVnH4URKyr9nxF
xWuKSl480SgQvTUwvHtmCT5epZ/11EGOKt/rNPUYL8HplRftjeQ9yMpB8FLb
RRezroSG1gu6kETRHsSIWYxv/s1KsjJtR1FC/j0xVwcPJd+p++1tK3KTDcZF
VmrjYlj0KZjTgiZt8Fys5BtMSFcwa9MaUfKzSza541rYMonW4TeHkadQ8b7J
Qgubv3HPj2yvQBM1dXuity7C41uuSSSpeUj+A8tDN5aCww9yV+z1uQ3Orw8I
7zrPI59TldzRsEo4d9bOX+uXr8jihqUKRBhcerZox0lm0ZBlyzanrkZo+NVn
QwX1M9oTyahWt7bA2H2nLA/vafTuZcjoztJWyMk7QO0t/YTGLiw1jGG0AxUn
TnkPkWjxQz+9hOQu+FrS+bluhwYpy5W3Rp/0AM9Gb9PVIjUysxOZ9pjKQfwH
R+wlViFWlW+Qi0gBydmRB25wRlD+sg4TxOkHsTygOXV6GLGLbcTM7z+AcVX5
GW7JB1T1oHj76ZeDkFNeed76JIHsEsxZ4oxhOGzBm+pr7kVmaYfXr2R8BL7q
+q5b7h3I40h2Yc60EkhuaXyxuQS9LZol6qtHIaHLaliy4znqW2dHGwlRwfa1
3YfOE0WI72579F7mOFDO6uo0Sx9BfKqF4/NjajD4blptZdYAl1McItCGCbAd
OWkye/ktVBz9szvAUAO5OnW9mbxOKFDcb5IRGlhC2+I7ZyyDiQtJKVcGNcCf
lyrdN8mAtcqP4fhRAwYTcbzEABkMHJrMPa/WgGVHaSN5TQa2bR4x5hQSBPuW
FbApcihvkC8ONScBr+SYnmLLAZet9GwPJoEijDU4GKYAw71jUymhJHjaPpVN
nVZA+HBtmXUYCekFusKcZAVoW58wYkeTYHCzyLfttgJ236smjNgkWCb28fzb
FPCGH5gakEUC02O/zq49BFg62jrPZJNwsUbQNhBMQNzr2WHB7QW/s6qQE00A
Xa9w37iAhN22GaxaDgFBHLXFDSEJIbSGC0wRAQ9W10s3V5CQz13u391MwDTK
vdL3hAT5fPiqpG4C8r6AykFEQszEfE31NAHKPKPCd7UkPDzplxGk2w9M16Gg
lHoSxgfyQydX9MP1jmd61k0kbDqitL+5th/+/y9I6HD9vNGpH/4Fg5KXNw==

           "]]}, Annotation[#, "Charting`Private`Tag$27179#2"]& ]}}, {}}, {
     DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
      AxesOrigin -> {0., 0.}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, DisplayFunction -> Identity, 
      PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
      DisplayFunction -> Identity, AspectRatio -> 
      NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
      AxesLabel -> {None, None}, AxesOrigin -> {0., 0.}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> 
        None, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{-1.3, 1.3}, {-4.599999893877551, 1.3799997240816384`}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        RowBox[{
          RowBox[{"2", " ", 
            SuperscriptBox[
             TagBox["x", HoldForm], "2"]}], "-", "2"}], 
        RowBox[{
          RowBox[{"2", " ", 
            TagBox["x", HoldForm]}], "-", "2"}]}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    LABColor[
                    0.676094128119322, 0.4485405917061707, 
                    0.7359231649869302], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    LABColor[
                    0.676094128119322, 0.4485405917061707, 
                    0.7359231649869302], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    LABColor[
                    0.5853360561832326, 
                    0.26865329572568364`, -0.6345226984584871], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    LABColor[
                    0.5853360561832326, 
                    0.26865329572568364`, -0.6345226984584871], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    LABColor[
                    0.676094128119322, 0.4485405917061707, 
                    0.7359231649869302], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    LABColor[
                    0.46181613413436295`, 0.3201106870445741, 
                    0.5411913061294025], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"LABColor", "[", 
                    
                    RowBox[{
                    "0.676094128119322`", ",", "0.4485405917061707`", ",", 
                    "0.7359231649869302`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    LABColor[
                    0.676094128119322, 0.4485405917061707, 
                    0.7359231649869302]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["LABColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    LABColor[
                    0.676094128119322, 0.4485405917061707, 
                    0.7359231649869302], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                ",", 
                RowBox[{"Directive", "[", 
                  RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    LABColor[
                    0.5853360561832326, 
                    0.26865329572568364`, -0.6345226984584871], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    LABColor[
                    0.3977476471329632, 
                    0.19095679545276356`, -0.4560540788456868], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"LABColor", "[", 
                    
                    RowBox[{
                    "0.5853360561832326`", ",", "0.26865329572568364`", ",", 
                    RowBox[{"-", "0.6345226984584871`"}]}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    LABColor[
                    0.5853360561832326, 
                    0.26865329572568364`, -0.6345226984584871]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["LABColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    LABColor[
                    0.5853360561832326, 
                    0.26865329572568364`, -0.6345226984584871], Editable -> 
                    False, Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                  "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                TagBox[#, HoldForm], ",", 
                TagBox[#2, HoldForm]}], "}"}], ",", 
            RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(FormBox[
     GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}], TraditionalForm]& ),
   Editable->True,
   InterpretationFunction->(FormBox[
     RowBox[{"Legended", "(", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], ")"}], TraditionalForm]& )], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.8426965734905505`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"dcc7020a-0e4d-4be8-93f6-bfddd50065c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"solve", " ", "2", "x"}], "-", 
        RowBox[{"2", " ", "for", " ", "x"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"solve 2x-2 for x\"}]"], "assumptions" -> {}, "parse" -> 
   Defer[
     Reduce[-2 + 2 $CellContext`x == 0, $CellContext`x]], 
   "inputpredictions" -> {}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{544., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[19]:=",ExpressionUUID->"b1f19414-ec85-46b6-b44f-d338774dd9a2"],

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "2"}], " ", "+", " ", 
     RowBox[{"2", "*", "x"}]}], " ", "==", " ", "0"}], ",", " ", "x"}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"Reduce", 1}, {"Equal", 1}}}},
 CellChangeTimes->{3.8426965989230857`*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"a838cb67-716d-4aee-9070-84acc2885201"],

Cell[BoxData[
 FormBox[
  RowBox[{"x", "\[LongEqual]", "1"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.842696598968201*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"89f2e0ad-2141-4c79-882f-5c677f5f2de0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Suggestions", "Section", "NLI",
 CellChangeTimes->{{3.8426966222460194`*^9, 
  3.842696626624138*^9}},ExpressionUUID->"f9a9dd42-f6c9-4193-9a1a-\
0253e0707f2f"],

Cell[TextData[{
 "Here are some ",
 StyleBox["examples",
  FontWeight->"Bold"],
 " in calculus, ",
 StyleBox["l",
  FontColor->RGBColor[0, 1, 1]],
 StyleBox["inear algebra,",
  FontColor->RGBColor[0, 1, 0]],
 " and algebra."
}], "Text", "NLI",
 CellChangeTimes->{{3.842696646700486*^9, 3.8426966668976154`*^9}, 
   3.8426967147411046`*^9},ExpressionUUID->"141b5d82-8770-4879-a766-\
7c8cf66ade43"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{"integral", " ", "of", " ", 
        RowBox[{"cos", "(", 
          RowBox[{"2", "x"}], ")"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"integral of cos(2x)\"}]"], "assumptions" -> {}, 
   "parse" -> Defer[
     Integrate[
      Cos[2 $CellContext`x], $CellContext`x]], 
   "inputpredictions" -> {{
     "InputMathOperation$PlotFunctionWithIntegralIndefinite", 
      Predictions`Prediction[
      0.99, "plotting", "plot function and integral", HoldComplete[
        Plot[{
          Cos[2 $CellContext`x], Rational[1, 2] 
          Sin[2 $CellContext`x]}, {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
          12.5663706143591729538`2.6989700043360187}, 
         PlotLegends -> {"f", "\[Integral]f"}]]& ], Predictions`InInput}, {
     "InputMathOperation$PeriodIntegrals", 
      Predictions`Prediction[
      0.98, "integration", 
       "", {{"definite integral over a half-period", HoldComplete[
          Integrate[
           Cos[
           2 $CellContext`x], {$CellContext`x, 0, Rational[1, 2] Pi}]]& }, {
        "definite integral over one period starting at 0", HoldComplete[
          Integrate[
           Cos[2 $CellContext`x], {$CellContext`x, 0, Pi}]]& }, {
        "definite integral over one period centered at 0", HoldComplete[
          Integrate[
           Cos[
           2 $CellContext`x], {$CellContext`x, -(Rational[1, 2] Pi), 
            Rational[1, 2] Pi}]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.97, "integration", 
       "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[
           Cos[2 $CellContext`x], {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[
           Cos[2 $CellContext`x], {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.96, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        D[
         Cos[2 $CellContext`x], $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.95, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[
         Cos[2 $CellContext`x]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.94, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[
           Cos[2 $CellContext`x], {$CellContext`x}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
           Cos[2 $CellContext`x], {$CellContext`x}, {$CellContext`y}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$RMSIntegral", 
      Predictions`Prediction[
      0.5, "integration", "definite integral mean square", HoldComplete[
        Integrate[
        Pi^(-1) Cos[2 $CellContext`x]^2, {$CellContext`x, 0, Pi}]]& ], 
      Predictions`InInput}, {"InputMathOperation$TrigAlgebra", 
      Predictions`Prediction[
      0.5, "trigonometry", "", {{"expand trig functions", HoldComplete[
          Integrate[
           TrigExpand[
            Cos[2 $CellContext`x]], $CellContext`x]]& }, {
        "factor trig functions", HoldComplete[
          Integrate[
           TrigFactor[
            Cos[2 $CellContext`x]], $CellContext`x]]& }, {
        "reduce trig products and powers", HoldComplete[
          Integrate[
           TrigReduce[
            Cos[2 $CellContext`x]], $CellContext`x]]& }, {
        "convert trig functions to exponentials", HoldComplete[
          Integrate[
           TrigToExp[
            Cos[2 $CellContext`x]], $CellContext`x]]& }}], 
      Predictions`InInput}, {"InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
           Cos[2 $CellContext`x], $CellContext`x]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
           Cos[2 $CellContext`x], $CellContext`x]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
           Cos[2 $CellContext`x], $CellContext`x]]& }}], 
      Predictions`InInput}, {"InputMathOperation$FunctionPeriod", 
      Predictions`Prediction[
      0.5, "properties", "function period", HoldComplete[
        FunctionPeriod[
         Cos[2 $CellContext`x], $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$InflectionPoints", 
      Predictions`Prediction[
      0.5, "analysis", "inflection points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["InflectionPoints"][
          Cos[2 $CellContext`x], 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[$CellContext`y == Cos[2 $CellContext`x], $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$Rotate90", 
      Predictions`Prediction[
      0.5, "trigonometry", "make trig function arguments imaginary", 
       HoldComplete[
        Integrate[
         Cos[2 (Complex[0, 1] $CellContext`x)], $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotFunction", 
      Predictions`Prediction[0.5, "plotting", "plot function", HoldComplete[
        Plot[
         Cos[
         2 $CellContext`x], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
          12.5663706143591729538`2.6989700043360187}]]& ], 
      Predictions`InInput}, {"InputMathOperation$PeriodPlots", 
      Predictions`Prediction[
      0.5, "plotting", "", {{"plot one function period", HoldComplete[
          Plot[
           Cos[2 $CellContext`x], {$CellContext`x, 0, Pi}]]& }, {
        "plot two function periods", HoldComplete[
          Plot[
           Cos[2 $CellContext`x], {$CellContext`x, 0, 2 Pi}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.5, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[Cos[2 $CellContext`x] == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$ComplementTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their cofunctions", 
       HoldComplete[
        Integrate[
         Sin[2 $CellContext`x], $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$InverseTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their inverses", 
       HoldComplete[
        Integrate[
         ArcCos[2 $CellContext`x], $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$ReciprocalTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their reciprocals", 
       HoldComplete[
        Integrate[
         Sec[2 $CellContext`x], $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][
          Cos[2 $CellContext`x], 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[Rational[1, 2] Pi], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> Rational[1, 2] Pi]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[Pi], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> Pi]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> 
           DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> 
           DirectedInfinity[1]]]& }}], Predictions`InInput}, {
     "InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[
         Cos[2 $CellContext`x], {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[True], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[False]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[2]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {233., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[20]:=",ExpressionUUID->"568f0d63-aac1-4f24-920b-9c1b889bc659"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Cos", "[", 
    RowBox[{"2", "*", "x"}], "]"}], ",", " ", "x"}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"Integrate", 3}, {"Cos", 1}}}},
 CellChangeTimes->{3.842696754784136*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"6ecf54e4-1dc4-4a7e-8c9b-d7ca8556c5f1"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"sin", "(", 
     RowBox[{"2", " ", "x"}], ")"}]}], "+", 
   TemplateBox[{"1"},
    "CTraditional"]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8426967549147077`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"d63729ff-eb30-42bb-857a-d9c735568a8f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> "plot cos(2 x) from x = -12.6 to 12.6", "assumptions" -> {}, 
   "parse" -> Defer[
     Plot[
      Cos[
      2 $CellContext`x], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
       12.5663706143591729538`2.6989700043360187}]], 
   "inputpredictions" -> {{"InputMathOperation$AlternativePlot", 
      Predictions`Prediction[0.99, "plotting", "", {{"log plot", HoldComplete[
          LogPlot[
           Cos[
           2 $CellContext`x], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
            12.5663706143591729538`2.6989700043360187}]]& }, {
        "log-log plot", HoldComplete[
          LogLogPlot[
           Cos[
           2 $CellContext`x], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
            12.5663706143591729538`2.6989700043360187}]]& }, {
        "log-linear plot", HoldComplete[
          LogLinearPlot[
           Cos[
           2 $CellContext`x], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
            12.5663706143591729538`2.6989700043360187}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.98, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[Cos[2 $CellContext`x] == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$InflectionPoints", 
      Predictions`Prediction[
      0.96, "analysis", "inflection points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["InflectionPoints"][
          Cos[2 $CellContext`x], 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Discontinuities", 
      Predictions`Prediction[
      0.94, "analysis", "discontinuities", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["FunctionDiscontinuities"][
          Cos[2 $CellContext`x], 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.9299999999999999, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[
           Cos[2 $CellContext`x], {$CellContext`x}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
           Cos[2 $CellContext`x], {$CellContext`x}, {$CellContext`y}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$RMSIntegral", 
      Predictions`Prediction[
      0.5, "integration", "definite integral mean square", HoldComplete[
        Integrate[
        Pi^(-1) Cos[2 $CellContext`x]^2, {$CellContext`x, 0, Pi}]]& ], 
      Predictions`InInput}, {"InputMathOperation$PeriodIntegrals", 
      Predictions`Prediction[
      0.5, "integration", 
       "", {{"definite integral over a half-period", HoldComplete[
          Integrate[
           Cos[
           2 $CellContext`x], {$CellContext`x, 0, Rational[1, 2] Pi}]]& }, {
        "definite integral over one period starting at 0", HoldComplete[
          Integrate[
           Cos[2 $CellContext`x], {$CellContext`x, 0, Pi}]]& }, {
        "definite integral over one period centered at 0", HoldComplete[
          Integrate[
           Cos[
           2 $CellContext`x], {$CellContext`x, -(Rational[1, 2] Pi), 
            Rational[1, 2] Pi}]]& }}], Predictions`InInput}, {
     "InputMathOperation$TrigAlgebra", 
      Predictions`Prediction[
      0.5, "trigonometry", "", {{"expand trig functions", HoldComplete[
          Plot[
           TrigExpand[
            Cos[
            2 $CellContext`x]], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
            12.5663706143591729538`2.6989700043360187}]]& }, {
        "factor trig functions", HoldComplete[
          Plot[
           TrigFactor[
            Cos[
            2 $CellContext`x]], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
            12.5663706143591729538`2.6989700043360187}]]& }, {
        "reduce trig products and powers", HoldComplete[
          Plot[
           TrigReduce[
            Cos[
            2 $CellContext`x]], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
            12.5663706143591729538`2.6989700043360187}]]& }, {
        "convert trig functions to exponentials", HoldComplete[
          Plot[
           TrigToExp[
            Cos[
            2 $CellContext`x]], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
            12.5663706143591729538`2.6989700043360187}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[
         Cos[2 $CellContext`x]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
           Cos[2 $CellContext`x], $CellContext`x]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
           Cos[2 $CellContext`x], $CellContext`x]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
           Cos[2 $CellContext`x], $CellContext`x]]& }}], 
      Predictions`InInput}, {"InputMathOperation$FunctionPeriod", 
      Predictions`Prediction[
      0.5, "properties", "function period", HoldComplete[
        FunctionPeriod[
         Cos[2 $CellContext`x], $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[
           Cos[2 $CellContext`x], {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[
           Cos[2 $CellContext`x], {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegrateOverPlotRange", 
      Predictions`Prediction[
      0.5, "integration", "integrate over plot range", HoldComplete[
        Integrate[
         Cos[
         2 $CellContext`x], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
          12.5663706143591729538`2.6989700043360187}]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotIntercepts", 
      Predictions`Prediction[
      0.5, "analysis", "intercepts", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Intercepts"][
          Cos[2 $CellContext`x], {
           Hold[$CellContext`x], $CellContext`y}]]]& ], 
      Predictions`InInput}, {"InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[$CellContext`y == Cos[2 $CellContext`x], $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$Rotate90", 
      Predictions`Prediction[
      0.5, "trigonometry", "make trig function arguments imaginary", 
       HoldComplete[
        Plot[
         Cos[
         2 (Complex[
            0, 1] $CellContext`x)], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
          12.5663706143591729538`2.6989700043360187}]]& ], 
      Predictions`InInput}, {"InputMathOperation$PeriodPlots", 
      Predictions`Prediction[
      0.5, "plotting", "", {{"plot one function period", HoldComplete[
          Plot[
           Cos[2 $CellContext`x], {$CellContext`x, 0, Pi}]]& }, {
        "plot two function periods", HoldComplete[
          Plot[
           Cos[2 $CellContext`x], {$CellContext`x, 0, 2 Pi}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$ComplementTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their cofunctions", 
       HoldComplete[
        Plot[
         Sin[
         2 $CellContext`x], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
          12.5663706143591729538`2.6989700043360187}]]& ], 
      Predictions`InInput}, {"InputMathOperation$InverseTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their inverses", 
       HoldComplete[
        Plot[
         ArcCos[
         2 $CellContext`x], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
          12.5663706143591729538`2.6989700043360187}]]& ], 
      Predictions`InInput}, {"InputMathOperation$ReciprocalTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their reciprocals", 
       HoldComplete[
        Plot[
         Sec[
         2 $CellContext`x], {$CellContext`x, \
-12.5663706143591729538`2.6989700043360187, 
          12.5663706143591729538`2.6989700043360187}]]& ], 
      Predictions`InInput}, {"InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][
          Cos[2 $CellContext`x], 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        D[
         Cos[2 $CellContext`x], $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[
         Cos[2 $CellContext`x], $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[Rational[1, 2] Pi], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> Rational[1, 2] Pi]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[Pi], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> Pi]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> 
           DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 $CellContext`x], $CellContext`x -> 
           DirectedInfinity[1]]]& }}], Predictions`InInput}, {
     "InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[
         Cos[2 $CellContext`x], {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[0]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    1, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellChangeTimes->{3.8426967857524056`*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"72610bb3-f12d-4f0a-a091-f760d168df0a"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Cos", "[", 
    RowBox[{"2", "*", "x"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "12.5663706143591729538`2.6989700043360187"}], ",", " ", 
     "12.5663706143591729538`2.6989700043360187"}], "}"}]}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"Plot", 1}, {"Cos", 1}}}},
 CellChangeTimes->{3.842696785986212*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"cdce49d7-09af-4381-9601-5aa86f2cc5f1"],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{{}, {}, 
     TagBox[
      {LABColor[0.676094128119322, 0.4485405917061707, 0.7359231649869302], 
       AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1: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
X15sSyPjqNXPg2eJ/q+VTK8tS6PS93z0dzWJ/m+uK9+jSSOuLT+3eiLvYHcO
2k1PSKOI4WRDKo0G77q6JVkNSKObmrTRgQbier+YlzFukkZS0bv/7H5C3B+B
mteqK6XRwNVSFHGOBjXfOcfqFUujh1u6qR2KNBjykSy644s0mr0XfnC6igpR
qurlT4nSiBPx/qh4R4VzWTfDxaKk0f20w20viPvZtGSUny1AGi2Gz6tWzlKg
d6WsqZeXNDqyZmV/5jsFfm+49nbZTRoFZBQb1d+nQL6eXo4JO2n0fqn+c+Hf
Wdiy9Iex4pg0+sM3oT7aRYZ0m3xHD+lKI5PJEtboIDLUZDLx/q4tjZYVqp46
AzIMITVuxMtJI2nJsjM+H2eg6e7KJc9tKXQ9u8Z2i/Dwb/vcqX3FUqhCsHM5
9+wE/DO0YqqfK4VSTsliVOo47LykV3QyQwpVjzI79QaNw/7j1UGXY6TQ1JEX
r6drxiBZtkvrsacU+pzAcvm5xihk6ln3LNGVQuL3pRSi/QagjuFRvmMlkihm
Nr/SHDRDfeT3+EyeJHr52cmZ27gRHjnQOHohUxIleJr85rtSDw2UzPJtYyWR
A7vJS6+71fAi/U0LvyeSaKeyN3e9aDG8+/NVcr2eJGoPTLOhjYSCVLXWg6al
Esj948sIg5kWYK+SXe6dL4F2xvsz/ulpBepK705nZ0mg+IbD+87U/wFfZc9Z
kuIlEBabPNWW3A4KRVq92p9JIOsll8e5Rt2gjrm1xhyTQP4BVtYRF4ZAIGO2
yauDEii2b6X4jPAwMKJ/1/1TUwK5FVvMdz4fBq0bpmRxOQk0sRHfvHBxBPQu
tHAP0Esg1pmaxA9/R8HsSIuZTaU4Mno9pnGE8PDXoe8D74rFUU7sIEvwmUlw
dyDkZkUuUb9KHwxIngSL3aaPFJLF0Xn6aHun81Ng43dLzISvODqu8jbOMm4a
lDV/VxR+Ko7MY2beeVCmgXdjSNbJh+Lo7fafO5I6M4C51hSm2YmjiQ9vH/S0
zACespZRh5NEHdEwWzJLBi3F352i9cXRYjQ57+muWRD6M2SxYb84ukZXuPzR
ZRYI55uyaKiIo8ZC+kdrlFnQnaMZbCkjjtLPDgM1NQqI/s4n+kZEHD3LinuX
cYMCZDJb1Gis4oix+uq/qDbCD+nfc6TpxBEv7w37bTYqSE4L0TVZFUObK9ns
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
7vD/73P/Hy6wQgA=
        "]]},
      Annotation[#, "Charting`Private`Tag$29356#1"]& ]}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0., 0.},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {{{
        NCache[(-6) Pi, -18.84955592153876], 
        FormBox[
         RowBox[{
           RowBox[{"-", "6"}], " ", "\[Pi]"}], TraditionalForm]}, {
        NCache[(-4) Pi, -12.566370614359172`], 
        FormBox[
         RowBox[{
           RowBox[{"-", "4"}], " ", "\[Pi]"}], TraditionalForm]}, {
        NCache[(-2) Pi, -6.283185307179586], 
        FormBox[
         RowBox[{
           RowBox[{"-", "2"}], " ", "\[Pi]"}], TraditionalForm]}, {0, 
        FormBox["0", TraditionalForm]}, {
        NCache[2 Pi, 6.283185307179586], 
        FormBox[
         RowBox[{"2", " ", "\[Pi]"}], TraditionalForm]}, {
        NCache[4 Pi, 12.566370614359172`], 
        FormBox[
         RowBox[{"4", " ", "\[Pi]"}], TraditionalForm]}, {
        NCache[6 Pi, 18.84955592153876], 
        FormBox[
         RowBox[{"6", " ", "\[Pi]"}], TraditionalForm]}, {
        NCache[(-5) Pi, -15.707963267948966`], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[(-3) Pi, -9.42477796076938], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[-Pi, -3.141592653589793], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[Pi, 3.141592653589793], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[3 Pi, 9.42477796076938], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[5 Pi, 15.707963267948966`], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}}, {{
        NCache[(-6) Pi, -18.84955592153876], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm]}, {
        NCache[(-4) Pi, -12.566370614359172`], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm]}, {
        NCache[(-2) Pi, -6.283185307179586], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm]}, {0, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm]}, {
        NCache[2 Pi, 6.283185307179586], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm]}, {
        NCache[4 Pi, 12.566370614359172`], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm]}, {
        NCache[6 Pi, 18.84955592153876], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm]}, {
        NCache[(-5) Pi, -15.707963267948966`], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[(-3) Pi, -9.42477796076938], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[-Pi, -3.141592653589793], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[Pi, 3.141592653589793], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[3 Pi, 9.42477796076938], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
        NCache[5 Pi, 15.707963267948966`], 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}}}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
     "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{-12.566370614359172`, 
    12.566370614359172`}, {-0.9999901189929549, 0.9999999999994739}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{{{
       NCache[(-6) Pi, -18.84955592153876], 
       FormBox[
        RowBox[{
          RowBox[{"-", "6"}], " ", "\[Pi]"}], TraditionalForm]}, {
       NCache[(-4) Pi, -12.566370614359172`], 
       FormBox[
        RowBox[{
          RowBox[{"-", "4"}], " ", "\[Pi]"}], TraditionalForm]}, {
       NCache[(-2) Pi, -6.283185307179586], 
       FormBox[
        RowBox[{
          RowBox[{"-", "2"}], " ", "\[Pi]"}], TraditionalForm]}, {0, 
       FormBox["0", TraditionalForm]}, {
       NCache[2 Pi, 6.283185307179586], 
       FormBox[
        RowBox[{"2", " ", "\[Pi]"}], TraditionalForm]}, {
       NCache[4 Pi, 12.566370614359172`], 
       FormBox[
        RowBox[{"4", " ", "\[Pi]"}], TraditionalForm]}, {
       NCache[6 Pi, 18.84955592153876], 
       FormBox[
        RowBox[{"6", " ", "\[Pi]"}], TraditionalForm]}, {
       NCache[(-5) Pi, -15.707963267948966`], 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
       NCache[(-3) Pi, -9.42477796076938], 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
       NCache[-Pi, -3.141592653589793], 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
       NCache[Pi, 3.141592653589793], 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
       NCache[3 Pi, 9.42477796076938], 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}, {
       NCache[5 Pi, 15.707963267948966`], 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0}}}, 
     Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{3.842696786119875*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"d7133f22-f150-468b-b902-0ca191c9425e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{"derivative", " ", "of", " ", 
        RowBox[{
          RowBox[{"(", 
            RowBox[{"x", "+", "1"}], ")"}], "^", "2"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"derivative of (x+1)^2\"}]"], "assumptions" -> {}, 
   "parse" -> Defer[
     D[(Global`x + 1)^2, Global`x]], 
   "inputpredictions" -> {{"InputMathOperation$PlotFunctionWithDerivative", 
      Predictions`Prediction[
      0.99, "plotting", "plot function and derivative", HoldComplete[
        Plot[{(1 + Global`x)^2, 2 (1 + Global`x)}, {
         Global`x, -13.`3., 11.`3.}, PlotLegends -> {"f", "f'"}]]& ], 
      Predictions`InInput}, {"InputMathOperation$OtherDerivatives", 
      Predictions`Prediction[0.98, "derivatives", 
       Row[{
         Pane[
          Style[
           HoldForm[2], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], 
         Pane[
          Style[
           HoldForm["nd"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " derivative"}], HoldComplete[
        D[(Global`x + 1)^2, {Global`x, 2}]]& ], Predictions`InInput}, {
     "InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.96, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[(Global`x + 1)^2, Global`x]]& ], Predictions`InInput}, {
     "InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.95, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[(Global`x + 1)^2]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[(Global`x + 1)^2, {Global`x}]]& }, {
        "function range", HoldComplete[
          FunctionRange[(Global`x + 1)^2, {Global`x}, {Global`y}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction[
          "FunctionParity"][(Global`x + 1)^2, Global`x]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][(Global`x + 1)^2, Global`x]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][(Global`x + 1)^2, Global`x]]& }}], 
      Predictions`InInput}, {"InputMathOperation$InflectionPoints", 
      Predictions`Prediction[
      0.5, "analysis", "inflection points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["InflectionPoints"][(Global`x + 1)^2, 
          Hold[Global`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[(Global`x + 1)^2, {Global`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[(Global`x + 1)^2, {Global`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[Global`y == (Global`x + 1)^2, Global`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotFunction", 
      Predictions`Prediction[0.5, "plotting", "plot function", HoldComplete[
        Plot[(1 + Global`x)^2, {Global`x, -13.`3., 11.`3.}]]& ], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.5, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[(Global`x + 1)^2 == 0, {
           Hold[Global`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][(Global`x + 1)^2, 
          Hold[Global`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$AlternativePowers", 
      Predictions`Prediction[
      0.5, "algebra", "", {{"substitute square root for power", HoldComplete[
          D[
           Sqrt[Global`x + 1], Global`x]]& }, {
        "substitute cube root for power", HoldComplete[
          D[(Global`x + 1)^(1/3), Global`x]]& }}], Predictions`InInput}, {
     "InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[(Global`x + 1)^2, Global`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[(Global`x + 1)^2, Global`x -> DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[(Global`x + 1)^2, Global`x -> DirectedInfinity[1]]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[(Global`x + 1)^2, {Global`x, 0, 5}]]& ], Predictions`InInput}},
    "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[2]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[23]:=",ExpressionUUID->"1ba6ce53-4bd4-459b-b8f0-397d3af62a1a"],

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", " ", "+", " ", "1"}], ")"}], "^", "2"}], ",", " ", "x"}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"D", 5}}}},
 CellChangeTimes->{3.842696862826647*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"fcb39b88-dde2-473b-812d-331f459a5e76"],

Cell[BoxData[
 FormBox[
  RowBox[{"2", " ", 
   RowBox[{"(", 
    RowBox[{"x", "+", "1"}], ")"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.842696862997555*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"db6cded5-52fd-4c0c-8f38-cca4c2f50842"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> "show steps d/dx((x + 1)^2)", "assumptions" -> {}, "parse" -> 
   Defer[
     AlphaIntegration`WolframAlphaStepByStep["show steps d/dx((x + 1)^2)", 
      XMLObject["Document"][{
        XMLObject["Declaration"]["Version" -> "1.0", "Encoding" -> "UTF-8"]}, 
       XMLElement[
       "queryresult", {
        "success" -> "true", "error" -> 
         "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> 
         "preserve", "numpods" -> "1", "datatypes" -> "D", "timedout" -> "", 
         "timedoutpods" -> "", "parsetiming" -> "0.743", "parsetimedout" -> 
         "false", "recalculate" -> "", "id" -> 
         "MSP711191gi0ca95h7912f00001015835ccd26e9h9", "host" -> 
         "https://www4b.wolframalpha.com", "server" -> "42", "related" -> 
         "https://www4b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa712191gi0ca95h7912f00003e37fi5be8g6afd71465566624282479354", "version" -> 
         "2.6", "inputstring" -> "show steps d/dx((x + 1)^2)"}, {
         XMLElement[
         "pod", {"stepbystepcontenttype" -> "StepByStep", "title" -> 
           "Derivative", "scanner" -> "Derivative", "id" -> "Input", 
           "position" -> "100", "error" -> "false", "numsubpods" -> "7", 
           "primary" -> "true"}, {
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSIntro"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], "2"], ")"}]}]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"], 
                  TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement[
             "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Using \"", "\"the \"", "\"chain \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], "2"], ")"}]}], 
                    "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["u", "2"]}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    HoldForm], TraditionalForm]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"where \"", 
                    TemplateBox[{
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"x", "+", "1"}]}]}, "RowWithSeparators"], 
                    "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["u", "2"], ")"}]}], "\[LongEqual]", 
                    RowBox[{"2", " ", "u"}]}]}, "RowWithSeparators"], 
                    HoldForm], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FormBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}], TraditionalForm], 
                    ")"}]}], TraditionalForm]}, "RowDefault"]}, "RowDefault"],
                     HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
                     AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Differentiate \"", "\"the \"", "\"sum \"", "\"term \"",
                     "\"by \"", "\"term:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "1", ")"}]}], TraditionalForm], "+", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm]}], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False],
                     "\" \""}, "RowDefault"], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{"1", "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FormBox["\"zero\"", TraditionalForm], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], TraditionalForm], "+", 
                    FrameBox["0", FrameStyle -> GrayLevel[0.8], FrameMargins -> 
                    1, BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm], ")"}]}], HoldForm]},
                     "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{
                    FormBox["x", TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{"1", "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    "1", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}], HoldForm]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
                    GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["expressiontypes", {"count" -> "7"}, {"\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], 
             "\n  "}], 
           XMLElement["states", {"count" -> "2"}, {
             XMLElement[
             "statelist", {
              "count" -> "2", "value" -> "Use the power rule", "delimiters" -> 
               ""}, {
               XMLElement[
               "state", {
                "name" -> "Use the power rule", "input" -> 
                 "Input__Use the power rule"}, {}], 
               XMLElement[
               "state", {
                "name" -> "Use the limit definition of a derivative", "input" -> 
                 "Input__Use the limit definition of a derivative"}, {}]}], 
             XMLElement[
             "state", {
              "name" -> "Start over", "input" -> 
               "Input__Start over"}, {}]}]}], 
         XMLElement["mathematicaparse", {}, {"D[(x + 1)^2, x]"}]}], {}]]], 
   "inputpredictions" -> {}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    1, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[24]:=",ExpressionUUID->"db9154bf-3b35-438f-a248-c6a710ae36d6"],

Cell[BoxData[
 FormBox[
  NamespaceBox["WolframAlphaQueryResults",
   DynamicModuleBox[{Typeset`q$$ = "show steps d/dx((x + 1)^2)", 
    Typeset`opts$$ = {
    AppearanceElements -> {"Pods", "Sources"}, 
     Method -> {"WANParse" -> True}}, Typeset`elements$$ = {
    "Pods", "Sources"}, Typeset`pod1$$ = XMLElement[
    "pod", {"stepbystepcontenttype" -> "StepByStep", "title" -> "Derivative", 
      "scanner" -> "Derivative", "id" -> "Input", "position" -> "100", 
      "error" -> "false", "numsubpods" -> "7", "primary" -> "true"}, {
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSIntro"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{
                    "\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], "2"], ")"}]}]}, 
                   "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{None}}, "Rows" -> {{0.5}}}],
               "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement[
        "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   
                   TemplateBox[{
                    "\"Using \"", "\"the \"", "\"chain \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], "2"], ")"}]}], 
                    "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["u", "2"]}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    HoldForm], TraditionalForm]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"where \"", 
                    TemplateBox[{
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"x", "+", "1"}]}]}, "RowWithSeparators"], 
                    "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["u", "2"], ")"}]}], "\[LongEqual]", 
                    RowBox[{"2", " ", "u"}]}]}, "RowWithSeparators"], 
                    HoldForm], "\":\""}, "RowDefault"]}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FormBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}], TraditionalForm], 
                    ")"}]}], TraditionalForm]}, "RowDefault"]}, "RowDefault"],
                   HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   
                   TemplateBox[{
                    "\"Differentiate \"", "\"the \"", "\"sum \"", "\"term \"",
                     "\"by \"", "\"term:\""}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "1", ")"}]}], TraditionalForm], "+", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm]}], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False],
                     "\" \""}, "RowDefault"], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{"1", "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FormBox["\"zero\"", TraditionalForm], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], TraditionalForm], "+", 
                    FrameBox[
                    "0", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}], ")"}]}]}, "RowDefault"]}, 
                   "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm], ")"}]}], HoldForm]},
                     "RowDefault"]}, "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{
                    FormBox["x", TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{"1", "\":\""}, "RowDefault"]}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    "1", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}], HoldForm]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                   "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxDividers -> {
                "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
               GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["expressiontypes", {"count" -> "7"}, {"\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
      XMLElement["states", {"count" -> "2"}, {
        XMLElement[
        "statelist", {
         "count" -> "2", "value" -> "Use the power rule", "delimiters" -> 
          ""}, {
          XMLElement[
          "state", {
           "name" -> "Use the power rule", "input" -> 
            "Input__Use the power rule"}, {}], 
          XMLElement[
          "state", {
           "name" -> "Use the limit definition of a derivative", "input" -> 
            "Input__Use the limit definition of a derivative"}, {}]}], 
        XMLElement[
        "state", {
         "name" -> "Start over", "input" -> "Input__Start over"}, {}]}]}], 
    Typeset`aux1$$ = {
    True, False, {False, False, False, False, False, False, False}, True}, 
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
     XMLElement["mathematicaparse", {}, {"D[(x + 1)^2, x]"}]}, 
    Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
    Typeset`queryinfo$$ = {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "D", "timedout" -> "", "timedoutpods" -> 
     "", "parsetiming" -> "0.743", "parsetimedout" -> "false", "recalculate" -> 
     "", "id" -> "MSP711191gi0ca95h7912f00001015835ccd26e9h9", "host" -> 
     "https://www4b.wolframalpha.com", "server" -> "42", "related" -> 
     "https://www4b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa712191gi0ca95h7912f00003e37fi5be8g6afd71465566624282479354", "version" -> 
     "2.6", "inputstring" -> "show steps d/dx((x + 1)^2)"}, 
    Typeset`sessioninfo$$ = {
    "TimeZone" -> 7., 
     "Date" -> {2021, 10, 8, 22, 47, 56.376034`9.503669356827622}, "Line" -> 
     24, "SessionID" -> 24208000965538799445}, Typeset`showpods$$ = {1}, 
    Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
    Typeset`newq$$ = "show steps d/dx((x + 1)^2)"}, 
    DynamicBox[ToBoxes[
      AlphaIntegration`FormatAlphaResults[
       Dynamic[{
        1, {Typeset`pod1$$}, {Typeset`aux1$$}, Typeset`chosen$$, 
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
         Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
         Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
      TraditionalForm],
     ImageSizeCache->{551., {497., 504.}},
     TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
    DynamicModuleValues:>{},
    Initialization:>If[
      And[
       Not[Typeset`initdone$$ === True], 
       Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
      Null; WolframAlphaClient`Private`doAsyncUpdates[
        Hold[{Typeset`pod1$$}], Typeset`asyncpods$$, 
        Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
      Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
    SynchronousInitialization->False],
   BaseStyle->{Deployed -> True},
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True], TraditionalForm]], "Output",
 CellChangeTimes->{3.842696876604001*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"8f3b8810-5957-4df5-8906-3a034ec3cee4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query[
    "boxes" -> RowBox[{"steps", " ", "for", " ", "derivative", " ", "of", " ", 
        RowBox[{
          RowBox[{"(", 
            RowBox[{"x", "+", "1"}], ")"}], "^", "2"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"steps for derivative of (x+1)^2\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     AlphaIntegration`WolframAlphaStepByStep[
      Typeset`Query[
      "boxes" -> RowBox[{
         "steps", " ", "for", " ", "derivative", " ", "of", " ", 
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x", "+", "1"}], ")"}], "^", "2"}]}], "json" -> 
       "[{\"t\":0,\"v\":\"steps for derivative of (x+1)^2\"}]"], 
      XMLObject["Document"][{
        XMLObject["Declaration"]["Version" -> "1.0", "Encoding" -> "UTF-8"]}, 
       XMLElement[
       "queryresult", {
        "success" -> "true", "error" -> 
         "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> 
         "preserve", "numpods" -> "1", "datatypes" -> "D", "timedout" -> "", 
         "timedoutpods" -> "", "parsetiming" -> "0.782", "parsetimedout" -> 
         "false", "recalculate" -> "", "id" -> 
         "MSP482186i71ede5ie6i6600004i9hdaeibd0892ai", "host" -> 
         "https://www5a.wolframalpha.com", "server" -> "42", "related" -> 
         "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa483186i71ede5ie6i6600003b09b642a24c8fie3773634836471742935", "version" -> 
         "2.6", "inputstring" -> "steps for derivative of (x+1)^2"}, {
         XMLElement[
         "pod", {"stepbystepcontenttype" -> "StepByStep", "title" -> 
           "Derivative", "scanner" -> "Derivative", "id" -> "Input", 
           "position" -> "100", "error" -> "false", "numsubpods" -> "7", 
           "primary" -> "true"}, {
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSIntro"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], "2"], ")"}]}]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"], 
                  TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement[
             "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Using \"", "\"the \"", "\"chain \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], "2"], ")"}]}], 
                    "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["u", "2"]}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    HoldForm], TraditionalForm]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"where \"", 
                    TemplateBox[{
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"x", "+", "1"}]}]}, "RowWithSeparators"], 
                    "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["u", "2"], ")"}]}], "\[LongEqual]", 
                    RowBox[{"2", " ", "u"}]}]}, "RowWithSeparators"], 
                    HoldForm], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FormBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}], TraditionalForm], 
                    ")"}]}], TraditionalForm]}, "RowDefault"]}, "RowDefault"],
                     HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
                     AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Differentiate \"", "\"the \"", "\"sum \"", "\"term \"",
                     "\"by \"", "\"term:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "1", ")"}]}], TraditionalForm], "+", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm]}], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False],
                     "\" \""}, "RowDefault"], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{"1", "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FormBox["\"zero\"", TraditionalForm], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], TraditionalForm], "+", 
                    FrameBox[
                    "0", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm], ")"}]}], HoldForm]},
                     "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{
                    FormBox["x", TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{"1", "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox["1", FrameStyle -> GrayLevel[0.8], FrameMargins -> 
                    1, BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["subpod", {"title" -> ""}, {
             XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
             XMLElement["cell", {"compressed" -> False, "string" -> True}, {
               Cell[
                BoxData[
                 FormBox[
                  TagBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}], HoldForm]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
                     GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
                    GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
                Background -> None, 
                 GraphicsBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
                   DefaultAxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1, "GraphicsFrame"], 
                   DefaultFrameTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, 
                    "GraphicsFrameTicks"], DefaultTicksStyle -> 
                   Directive[
                    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
                 Graphics3DBoxOptions -> {
                  DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}},
                 NumberPoint -> ".", CellSize -> {500, Automatic}, 
                AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
                RenderingOptions -> {
                 "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
             XMLElement["dataformats", {}, {"plaintext"}]}], 
           XMLElement["expressiontypes", {"count" -> "7"}, {"\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
             XMLElement["expressiontype", {"name" -> "Default"}, {}], 
             "\n  "}], 
           XMLElement["states", {"count" -> "2"}, {
             XMLElement[
             "statelist", {
              "count" -> "2", "value" -> "Use the power rule", "delimiters" -> 
               ""}, {
               XMLElement[
               "state", {
                "name" -> "Use the power rule", "input" -> 
                 "Input__Use the power rule"}, {}], 
               XMLElement[
               "state", {
                "name" -> "Use the limit definition of a derivative", "input" -> 
                 "Input__Use the limit definition of a derivative"}, {}]}], 
             XMLElement[
             "state", {
              "name" -> "Start over", "input" -> 
               "Input__Start over"}, {}]}]}], 
         XMLElement["mathematicaparse", {}, {"D[(x + 1)^2, x]"}]}], {}]]], 
   "inputpredictions" -> {}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[25]:=",ExpressionUUID->"fb1af447-3700-445d-a5ba-0a836585de49"],

Cell[BoxData[
 FormBox[
  NamespaceBox["WolframAlphaQueryResults",
   DynamicModuleBox[{Typeset`q$$ = Typeset`Query[
    "boxes" -> RowBox[{"steps", " ", "for", " ", "derivative", " ", "of", " ", 
        RowBox[{
          RowBox[{"(", 
            RowBox[{"x", "+", "1"}], ")"}], "^", "2"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"steps for derivative of (x+1)^2\"}]"], 
    Typeset`opts$$ = {
    AppearanceElements -> {"Pods", "Sources"}, 
     Method -> {"WANParse" -> True}}, Typeset`elements$$ = {
    "Pods", "Sources"}, Typeset`pod1$$ = XMLElement[
    "pod", {"stepbystepcontenttype" -> "StepByStep", "title" -> "Derivative", 
      "scanner" -> "Derivative", "id" -> "Input", "position" -> "100", 
      "error" -> "false", "numsubpods" -> "7", "primary" -> "true"}, {
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSIntro"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{
                    "\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], "2"], ")"}]}]}, 
                   "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{None}}, "Rows" -> {{0.5}}}],
               "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement[
        "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   
                   TemplateBox[{
                    "\"Using \"", "\"the \"", "\"chain \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}], "2"], ")"}]}], 
                    "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["u", "2"]}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    HoldForm], TraditionalForm]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"where \"", 
                    TemplateBox[{
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"x", "+", "1"}]}]}, "RowWithSeparators"], 
                    "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["u", "2"], ")"}]}], "\[LongEqual]", 
                    RowBox[{"2", " ", "u"}]}]}, "RowWithSeparators"], 
                    HoldForm], "\":\""}, "RowDefault"]}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FormBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}], TraditionalForm], 
                    ")"}]}], TraditionalForm]}, "RowDefault"]}, "RowDefault"],
                   HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   
                   TemplateBox[{
                    "\"Differentiate \"", "\"the \"", "\"sum \"", "\"term \"",
                     "\"by \"", "\"term:\""}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "1", ")"}]}], TraditionalForm], "+", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm]}], FrameStyle -> 
                    GrayLevel[0.8], FrameMargins -> 1, BaselinePosition -> 
                    Baseline, ContentPadding -> False, StripOnInput -> False],
                     "\" \""}, "RowDefault"], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{"1", "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FormBox["\"zero\"", TraditionalForm], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], TraditionalForm], "+", 
                    FrameBox[
                    "0", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}], ")"}]}]}, "RowDefault"]}, 
                   "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm], ")"}]}], HoldForm]},
                     "RowDefault"]}, "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  StyleBox[
                   TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{
                    FormBox["x", TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{"1", "\":\""}, "RowDefault"]}, "RowDefault"], 
                   GrayLevel[0.3], StripOnInput -> False], {
                  LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    "1", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement["stepbystepcontenttype", {}, {"SBSStep"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "x"}], ")"}]}], HoldForm]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                   "Column", 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxDividers -> {
                "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
               GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {500, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement["dataformats", {}, {"plaintext"}]}], 
      XMLElement["expressiontypes", {"count" -> "7"}, {"\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
      XMLElement["states", {"count" -> "2"}, {
        XMLElement[
        "statelist", {
         "count" -> "2", "value" -> "Use the power rule", "delimiters" -> 
          ""}, {
          XMLElement[
          "state", {
           "name" -> "Use the power rule", "input" -> 
            "Input__Use the power rule"}, {}], 
          XMLElement[
          "state", {
           "name" -> "Use the limit definition of a derivative", "input" -> 
            "Input__Use the limit definition of a derivative"}, {}]}], 
        XMLElement[
        "state", {
         "name" -> "Start over", "input" -> "Input__Start over"}, {}]}]}], 
    Typeset`aux1$$ = {
    True, False, {False, False, False, False, False, False, False}, True}, 
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
     XMLElement["mathematicaparse", {}, {"D[(x + 1)^2, x]"}]}, 
    Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
    Typeset`queryinfo$$ = {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "D", "timedout" -> "", "timedoutpods" -> 
     "", "parsetiming" -> "0.782", "parsetimedout" -> "false", "recalculate" -> 
     "", "id" -> "MSP482186i71ede5ie6i6600004i9hdaeibd0892ai", "host" -> 
     "https://www5a.wolframalpha.com", "server" -> "42", "related" -> 
     "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa483186i71ede5ie6i6600003b09b642a24c8fie3773634836471742935", "version" -> 
     "2.6", "inputstring" -> "steps for derivative of (x+1)^2"}, 
    Typeset`sessioninfo$$ = {
    "TimeZone" -> 7., 
     "Date" -> {2021, 10, 8, 22, 49, 45.1650822`9.407377671401916}, "Line" -> 
     25, "SessionID" -> 24208000965538799445}, Typeset`showpods$$ = {1}, 
    Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
    Typeset`newq$$ = Typeset`Query[
    "boxes" -> RowBox[{"steps", " ", "for", " ", "derivative", " ", "of", " ", 
        RowBox[{
          RowBox[{"(", 
            RowBox[{"x", "+", "1"}], ")"}], "^", "2"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"steps for derivative of (x+1)^2\"}]"]}, 
    DynamicBox[ToBoxes[
      AlphaIntegration`FormatAlphaResults[
       Dynamic[{
        1, {Typeset`pod1$$}, {Typeset`aux1$$}, Typeset`chosen$$, 
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
         Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
         Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
      TraditionalForm],
     ImageSizeCache->{551., {109., 116.}},
     TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
    DynamicModuleValues:>{},
    Initialization:>If[
      And[
       Not[Typeset`initdone$$ === True], 
       Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
      Null; WolframAlphaClient`Private`doAsyncUpdates[
        Hold[{Typeset`pod1$$}], Typeset`asyncpods$$, 
        Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
      Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
    SynchronousInitialization->False],
   BaseStyle->{Deployed -> True},
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True], TraditionalForm]], "Output",
 CellChangeTimes->{3.842696985355098*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"1c45c3c0-701d-4d41-a05b-601c603ac6ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{"determinant", " ", "of", " ", 
        RowBox[{"(", 
          RowBox[{
            RowBox[{"(", 
              RowBox[{"1", ",", "2"}], ")"}], ",", 
            RowBox[{"(", 
              RowBox[{"3", ",", "4"}], ")"}]}], ")"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"determinant of ((1,2),(3,4))\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     Det[{{1, 2}, {3, 4}}]], 
   "inputpredictions" -> {{"InputMatrixOperation$ExtractMatrix", 
      Predictions`Prediction[
      0.99, "matrix operations", "extract matrix", 
       HoldComplete[{{1, 2}, {3, 4}}]& ], Predictions`InInput}, {
     "InputMatrixOperation$Transpose", 
      Predictions`Prediction[
      0.98, "structural operations", "transpose", HoldComplete[
        Transpose[{{1, 2}, {3, 4}}]]& ], Predictions`InInput}, {
     "InputMatrixOperation$Inverse", 
      Predictions`Prediction[0.97, "inversion", "", {{"inverse", HoldComplete[
          Inverse[{{1, 2}, {3, 4}}]]& }, {"pseudo inverse", HoldComplete[
          PseudoInverse[{{1, 2}, {3, 4}}]]& }}], Predictions`InInput}, {
     "InputMatrixOperation$RowReduce", 
      Predictions`Prediction[0.96, "normal forms", "row reduce", HoldComplete[
        RowReduce[{{1, 2}, {3, 4}}]]& ], Predictions`InInput}, {
     "InputMatrixOperation$Eigenvalues", 
      Predictions`Prediction[
      0.95, "matrix operations", "", {{"eigenvalues", HoldComplete[
          Eigenvalues[{{1, 2}, {3, 4}}]]& }, {"eigenvectors", HoldComplete[
          Eigenvectors[{{1, 2}, {3, 4}}]]& }, {
        "eigenvalues and eigenvectors", HoldComplete[
          Eigensystem[{{1, 2}, {3, 4}}]]& }}], Predictions`InInput}, {
     "InputMatrixOperation$Dimensions", 
      Predictions`Prediction[0.94, "matrix shape", "dimensions", HoldComplete[
        Dimensions[{{1, 2}, {3, 4}}]]& ], Predictions`InInput}, {
     "InputMatrixOperation$Rank", 
      Predictions`Prediction[
      0.9299999999999999, "matrix shape", "rank", HoldComplete[
        MatrixRank[{{1, 2}, {3, 4}}]]& ], Predictions`InInput}, {
     "InputMatrixOperation$Powers", 
      Predictions`Prediction[
      0.92, "matrix arithmetic", "", {{"matrix square", HoldComplete[
          MatrixPower[{{1, 2}, {3, 4}}, 2]]& }, {
        "matrix square root", HoldComplete[
          MatrixPower[{{1, 2}, {3, 4}}, 1/2]]& }}], Predictions`InInput}, {
     "InputMatrixOperation$Orthogonalize", 
      Predictions`Prediction[
      0.88, "normal forms", "orthogonalize", HoldComplete[
        Orthogonalize[{{1, 2}, {3, 4}}]]& ], Predictions`InInput}, {
     "InputMatrixOperation$Norm", 
      Predictions`Prediction[0.86, "norms", "", {{"norm", HoldComplete[
          Norm[{{1, 2}, {3, 4}}, 1]]& }, {"2-norm", HoldComplete[
          Norm[{{1, 2}, {3, 4}}, 2]]& }, {"\[Infinity]-norm", HoldComplete[
          Norm[{{1, 2}, {3, 4}}, Infinity]]& }}], Predictions`InInput}, {
     "InputMatrixOperation$MatrixPlot", 
      Predictions`Prediction[0.85, "plotting", "plot matrix", HoldComplete[
        MatrixPlot[{{1, 2}, {3, 4}}]]& ], Predictions`InInput}, {
     "InputMatrixOperation$NullSpace", 
      Predictions`Prediction[
      0.84, "matrix operations", "null space", HoldComplete[
        NullSpace[{{1, 2}, {3, 4}}]]& ], Predictions`InInput}, {
     "InputMatrixOperation$Decomposition", 
      Predictions`Prediction[
      0.83, "decomposition", "", {{"LU decomposition", HoldComplete[
          LUDecomposition[{{1, 2}, {3, 4}}]]& }, {
        "QR decomposition", HoldComplete[
          QRDecomposition[{{1, 2}, {3, 4}}]]& }, {
        "Jordan decomposition", HoldComplete[
          JordanDecomposition[{{1, 2}, {3, 4}}]]& }}], Predictions`InInput}, {
     "InputMatrixOperation$CharacteristicPolynomial", 
      Predictions`Prediction[
      0.8200000000000001, "matrix operations", "characteristic polynomial", 
       HoldComplete[
        CharacteristicPolynomial[{{1, 2}, {3, 4}}, \[FormalX]]]& ], 
      Predictions`InInput}}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[26]:=",ExpressionUUID->"944cbbdc-563f-41ed-b0a6-77d9744fdd62"],

Cell[BoxData[
 RowBox[{"Det", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "2"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"3", ",", " ", "4"}], "}"}]}], "}"}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Det", 1}}}},
 CellChangeTimes->{3.8426970370086675`*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"a5b11d2f-85c5-406a-9566-03c0f57a8a34"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", "2"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8426970371564803`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"18c934ae-9293-4cd3-aaab-6c96faccb2b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{"solve", " ", 
        RowBox[{"(", 
          RowBox[{
            RowBox[{
              RowBox[{
                RowBox[{"2", "x"}], "+", 
                RowBox[{"3", "y"}]}], "=", "40"}], ",", " ", 
            RowBox[{
              RowBox[{"y", "-", "x"}], "=", "5"}]}], ")"}], " ", "for", " ", 
        "x", " ", "and", " ", "y"}], "json" -> 
     "[{\"t\":0,\"v\":\"solve (2x+3y=40, y-x=5) for x and y\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     Solve[{2 Global`x + 3 Global`y == 40, Global`y - Global`x == 5}, {
      Global`x, Global`y}]], 
   "inputpredictions" -> {{"InputMathOperation$FindInstance", 
      Predictions`Prediction[0.9, "solving", "find instance", HoldComplete[
        FindInstance[{
         2 Global`x + 3 Global`y == 40, Global`y - Global`x == 5}, {
         Global`x, Global`y}]]& ], Predictions`InInput}, {
     "InputMathOperation$SolutionsWithConditions", 
      Predictions`Prediction[
      0.9, "solving", "solutions with conditions", HoldComplete[
        Reduce[{2 Global`x + 3 Global`y == 40, Global`y - Global`x == 5}, {
         Global`x, Global`y}]]& ], Predictions`InInput}, {
     "InputMathOperation$SolveOnly", 
      Predictions`Prediction[0.9, "solving", "", {{
         Row[{"solve only for ", 
           Pane[
            Style[
             HoldForm[
              HoldForm[Global`x]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          
          Solve[{2 Global`x + 3 Global`y == 40, Global`y - Global`x == 5}, 
           Global`x]]& }, {
         Row[{"solve only for ", 
           Pane[
            Style[
             HoldForm[
              HoldForm[Global`y]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          
          Solve[{2 Global`x + 3 Global`y == 40, Global`y - Global`x == 5}, 
           Global`y]]& }}], Predictions`InInput}}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[2]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{"CellSettings"->Association["HideDetails" -> False]},
 CellLabel->"In[28]:=",ExpressionUUID->"b2bd8d5c-0d24-4c19-aaec-2c9ee46727c5"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"2", "*", "x"}], " ", "+", " ", 
       RowBox[{"3", "*", "y"}]}], " ", "==", " ", "40"}], ",", " ", 
     RowBox[{
      RowBox[{"y", " ", "-", " ", "x"}], " ", "==", " ", "5"}]}], "}"}], ",", 
   " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "y"}], "}"}]}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"Solve", 1}, {"Equal", 1}}}},
 CellChangeTimes->{3.8426971684138117`*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"5ba39731-2c04-4603-8d02-1f39e2c4c413"],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "5"}], ",", 
     RowBox[{"y", "\[Rule]", "10"}]}], "}"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.842697168590164*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"3807ef09-fd31-402f-8b9a-8988d1ad61ba"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graphics", "Section", "NLI",
 CellChangeTimes->{{3.8426972367171803`*^9, 
  3.842697238261199*^9}},ExpressionUUID->"5c7257da-08a7-4e4e-80e6-\
06d22b5e59b8"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"graph", " ", "y"}], "=", 
        RowBox[{
          RowBox[{"2", "x"}], "-", "2"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"graph y=2x-2\"}]"], "assumptions" -> {}, "parse" -> 
   Defer[
     Plot[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]], 
   "inputpredictions" -> {{"InputMathOperation$AlternativePlot", 
      Predictions`Prediction[0.99, "plotting", "", {{"log plot", HoldComplete[
          LogPlot[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& }, {
        "log-log plot", HoldComplete[
          LogLogPlot[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& }, {
        "log-linear plot", HoldComplete[
          LogLinearPlot[
          2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.98, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[2 $CellContext`x - 2 == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$Discontinuities", 
      Predictions`Prediction[
      0.94, "analysis", "discontinuities", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["FunctionDiscontinuities"][2 $CellContext`x - 2, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.9299999999999999, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[2 $CellContext`x - 2, {$CellContext`x}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
          2 $CellContext`x - 2, {$CellContext`x}, {$CellContext`y}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[2 $CellContext`x - 2]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegrateOverPlotRange", 
      Predictions`Prediction[
      0.5, "integration", "integrate over plot range", HoldComplete[
        Integrate[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotIntercepts", 
      Predictions`Prediction[
      0.5, "analysis", "intercepts", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Intercepts"][2 $CellContext`x - 2, {
           Hold[$CellContext`x], $CellContext`y}]]]& ], 
      Predictions`InInput}, {"InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[$CellContext`y == 2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][2 $CellContext`x - 2, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        D[2 $CellContext`x - 2, $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[2 $CellContext`x - 2, $CellContext`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[1]]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[2 $CellContext`x - 2, {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[29]:=",ExpressionUUID->"4ba28244-a806-4df1-bdc2-e4f4a4c09694"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "*", "x"}], " ", "-", " ", "2"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "1.5"}], ",", " ", "1.5"}], "}"}]}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Plot", 1}}}},
 CellChangeTimes->{3.8426972604692125`*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"be5f0c7d-ce3f-4892-97af-8245856cd43f"],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{{}, {}, 
     TagBox[
      {LABColor[0.676094128119322, 0.4485405917061707, 0.7359231649869302], 
       AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1:eJwtlGs01Hkch4fQIsK/6TLKuuwol1XrIDXWV3SRJYRoqeZokm1ZVqVodVuS
UqZSit2yJVGimqJa/H4xa8fR5JLKdMSENGbG/F3G/Cxh23P2xec8r54Xz5uP
VXTC5l3aDAYj4PP+484KPj0zQ9CDcBGZmaHwvEmWLecTQafSjC4smaawcP3N
qORxgqJvbHbifKKwbdeTRuUQQRTdyUsep7B8Tu8NyXuC9p8YblUOUThxj2uE
oJ4g90esMsl7Ch9mv8UxmQQhs3iuoJ7C+QU258XGBInFpo0xmRS+1n0yIVhf
g1oShFUlOhSe3xISaMccQ4ay0lu5p8ywKChkbRNbjXgldtc/mJlhXzv2Phvr
UVSUa/bU9JwpXl0eVdy8fAQtCXd6+XGBKZ44FUM52w2jtHUC/Su5JniMFF3c
vnQITRxq86ugTLDQ+rxLbbwKRZtuZHW7zcUc3SMCB54SXT2OJExnY5zrtXLl
mjQ58issKCj0NMI7f4v4IL8mQ86bypLGAufg5lsW+lr5/UgWkpPOCDDEFnPu
fYMq+9BcvY7LOyINsIFlf/PA7R6kazL6cV+YPo4LzbhcUiJFbre9/UNDv8Dc
+u4mi/PvUMcQeZDJm42tv50O/uuYBPnmHAn9mauHS2MF7/+sfIXs38aNl8fr
4j2j96NO57eit784vrkeo4OdDutu1bNpQg0Vlk1c3ixMpbQbXiqoR9Y5qc+S
9mrjN7w4+4reShTQUDyy+ictfCDV/mzjxatIXupuG57KwLdz3L2KVvwOv3Km
36XOn0Fnfzj2mnu8Cl60Lf8gmDuFjNT+nLLgepiqcxzOdZhE0n0NLsnpTSCK
fpHUY/EPUj0JqDsgagV9G4mF0Jyg4sw/uLysV/C1R0VzAGcMsTV3qIMFElDp
2Gt8nEdR14Mvazix7+CcbaJVz3fDKCxPelLBl8KWVk/Vsi4Vunozu8b/Ug8I
H/anx7yUI53I+EHdlD4Y38hmq40+ohfc0lub0/uB53n33vekBz0yYm0jcTJw
bMw7be3fhWzzrWSz/eUQm5eyQ9r8Gk0kp0/dCVHCCt9OqjBajBQT5sYl7ioI
CvayOLK/GhXuzmw3txkCRovAR37mHPDXPM9exB4GxiLh88vBdWCccMe7njkC
iQcjmazyFqhd+7imkjUKQ+y6wUevOmAqfofbFmM1qKvSJBGrpKA1u+2Kw5Qa
dBb77i5X94Kbb1KdH0MDHZaN+g5aMpjoLJMxRzQg2yu4Hi5SwNo4ET9AowGT
+1Y+bhIFnJnsdc+Y0ICLKqd3nlwBlizzLLU2gaOxcV+1GSphQ3iW3UuKwOJt
7GL/QCXktu7aw3clELQ+r3TNayU4NVgoDVIIPF546J5D3yAcDFud651GQBo2
EGQwNgjP+sI8Uo8R0LkQPizTVUHorDPZA1mffSMX5+KlKjjkNekoyieg1BoU
WP6oAtHTN/EZ1QQsFdurmCMqMPMbZdZgAr7LxOFqbRqiJMa1aiGBxF2c8TaK
BpqsM+aJCVR3L1jFd6VhvuvDcu8uAhHtLU8NUmjgCpu3pPZ87jGFyIEsGkpD
FNP3+wkUbbo7+Xc+DR5J1oFWNIEhUZZHRjUNJ7Q8ScQogYV64507xTS08Lde
4xMCXj4xad5dNLAs928QTRKIPdq+xIqm4f//guwa79qZGRr+BSvCj4c=
        "]]},
      Annotation[#, "Charting`Private`Tag$35777#1"]& ]}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0., 0.},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
     "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{-1.5, 1.5}, {-4.999999877551021, 0.9999998775510206}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8426972606779895`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"df2e8c29-5dff-42db-bdf2-b26b5291f466"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"graph", " ", "y"}], "=", 
        RowBox[{
          RowBox[{"2", "x"}], "-", 
          RowBox[{"2", " ", "thick", " ", "red"}]}]}], "json" -> 
     "[{\"t\":0,\"v\":\"graph y=2x-2 thick red\"}]"], "assumptions" -> {}, 
   "parse" -> Defer[
     Plot[
     2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}, PlotStyle -> 
      Directive[Thick, Red]]], 
   "inputpredictions" -> {{"InputMathOperation$AlternativePlot", 
      Predictions`Prediction[0.99, "plotting", "", {{"log plot", HoldComplete[
          LogPlot[
          2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}, PlotStyle -> 
           Directive[Thick, Red]]]& }, {"log-log plot", HoldComplete[
          LogLogPlot[
          2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}, PlotStyle -> 
           Directive[Thick, Red]]]& }, {"log-linear plot", HoldComplete[
          LogLinearPlot[
          2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}, PlotStyle -> 
           Directive[Thick, Red]]]& }}], Predictions`InInput}, {
     "InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.98, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[2 $CellContext`x - 2 == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$Discontinuities", 
      Predictions`Prediction[
      0.94, "analysis", "discontinuities", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["FunctionDiscontinuities"][2 $CellContext`x - 2, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.9299999999999999, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[2 $CellContext`x - 2, {$CellContext`x}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
          2 $CellContext`x - 2, {$CellContext`x}, {$CellContext`y}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[2 $CellContext`x - 2]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegrateOverPlotRange", 
      Predictions`Prediction[
      0.5, "integration", "integrate over plot range", HoldComplete[
        Integrate[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotIntercepts", 
      Predictions`Prediction[
      0.5, "analysis", "intercepts", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Intercepts"][2 $CellContext`x - 2, {
           Hold[$CellContext`x], $CellContext`y}]]]& ], 
      Predictions`InInput}, {"InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[$CellContext`y == 2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][2 $CellContext`x - 2, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        D[2 $CellContext`x - 2, $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[2 $CellContext`x - 2, $CellContext`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[1]]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[2 $CellContext`x - 2, {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {
     XMLElement["assumptions", {"count" -> "1"}, {
       XMLElement[
       "assumption", {
        "type" -> "SubCategory", "word" -> "red", "template" -> 
         "Assuming red${separator}Use ${desc} instead", "count" -> "2", 
         "pulldown" -> "false", "default" -> 
         "{\"DPClash\", \"ColorE\", \"red\"} -> {{\"WolframLanguage\", \
\"Red\"}, \"dflt\"}"}, {
         XMLElement[
         "value", {
          "name" -> "{WolframLanguage, Red}", "desc" -> "red", "input" -> 
           "{\"DPClash\", \"ColorE\", \"red\"} -> {{\"WolframLanguage\", \
\"Red\"}}"}, {}], 
         XMLElement[
         "value", {
          "name" -> "{HTML, Red}", "desc" -> "HTML red", "input" -> 
           
           "{\"DPClash\", \"ColorE\", \"red\"} -> {{\"HTML\", \"Red\"}}"}, \
{}]}]}]}, "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[True], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[False]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[2]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {155., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[30]:=",ExpressionUUID->"baf9cb94-d43f-40bd-b1a1-bab7526d4074"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "*", "x"}], " ", "-", " ", "2"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "1.5"}], ",", " ", "1.5"}], "}"}], ",", " ", 
   RowBox[{"PlotStyle", " ", "->", " ", 
    RowBox[{"Directive", "[", 
     RowBox[{"Thick", ",", " ", "Red"}], "]"}]}]}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{
  "UsageTags" -> {{"Plot", 1}, {"PlotStyle", 1}, {"Directive", 1}, {
     "Thick", 1}, {"Red", 1}}}},
 CellChangeTimes->{3.8426972861118565`*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"238126f6-c011-4b33-80d0-ecf88ab8262c"],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 0], Thickness[Large], Opacity[1.], 
       LineBox[CompressedData["
1:eJwtlGs01Hkch4fQIsK/6TLKuuwol1XrIDXWV3SRJYRoqeZokm1ZVqVodVuS
UqZSit2yJVGimqJa/H4xa8fR5JLKdMSENGbG/F3G/Cxh23P2xec8r54Xz5uP
VXTC5l3aDAYj4PP+484KPj0zQ9CDcBGZmaHwvEmWLecTQafSjC4smaawcP3N
qORxgqJvbHbifKKwbdeTRuUQQRTdyUsep7B8Tu8NyXuC9p8YblUOUThxj2uE
oJ4g90esMsl7Ch9mv8UxmQQhs3iuoJ7C+QU258XGBInFpo0xmRS+1n0yIVhf
g1oShFUlOhSe3xISaMccQ4ay0lu5p8ywKChkbRNbjXgldtc/mJlhXzv2Phvr
UVSUa/bU9JwpXl0eVdy8fAQtCXd6+XGBKZ44FUM52w2jtHUC/Su5JniMFF3c
vnQITRxq86ugTLDQ+rxLbbwKRZtuZHW7zcUc3SMCB54SXT2OJExnY5zrtXLl
mjQ58issKCj0NMI7f4v4IL8mQ86bypLGAufg5lsW+lr5/UgWkpPOCDDEFnPu
fYMq+9BcvY7LOyINsIFlf/PA7R6kazL6cV+YPo4LzbhcUiJFbre9/UNDv8Dc
+u4mi/PvUMcQeZDJm42tv50O/uuYBPnmHAn9mauHS2MF7/+sfIXs38aNl8fr
4j2j96NO57eit784vrkeo4OdDutu1bNpQg0Vlk1c3ixMpbQbXiqoR9Y5qc+S
9mrjN7w4+4reShTQUDyy+ictfCDV/mzjxatIXupuG57KwLdz3L2KVvwOv3Km
36XOn0Fnfzj2mnu8Cl60Lf8gmDuFjNT+nLLgepiqcxzOdZhE0n0NLsnpTSCK
fpHUY/EPUj0JqDsgagV9G4mF0Jyg4sw/uLysV/C1R0VzAGcMsTV3qIMFElDp
2Gt8nEdR14Mvazix7+CcbaJVz3fDKCxPelLBl8KWVk/Vsi4Vunozu8b/Ug8I
H/anx7yUI53I+EHdlD4Y38hmq40+ohfc0lub0/uB53n33vekBz0yYm0jcTJw
bMw7be3fhWzzrWSz/eUQm5eyQ9r8Gk0kp0/dCVHCCt9OqjBajBQT5sYl7ioI
CvayOLK/GhXuzmw3txkCRovAR37mHPDXPM9exB4GxiLh88vBdWCccMe7njkC
iQcjmazyFqhd+7imkjUKQ+y6wUevOmAqfofbFmM1qKvSJBGrpKA1u+2Kw5Qa
dBb77i5X94Kbb1KdH0MDHZaN+g5aMpjoLJMxRzQg2yu4Hi5SwNo4ET9AowGT
+1Y+bhIFnJnsdc+Y0ICLKqd3nlwBlizzLLU2gaOxcV+1GSphQ3iW3UuKwOJt
7GL/QCXktu7aw3clELQ+r3TNayU4NVgoDVIIPF546J5D3yAcDFud651GQBo2
EGQwNgjP+sI8Uo8R0LkQPizTVUHorDPZA1mffSMX5+KlKjjkNekoyieg1BoU
WP6oAtHTN/EZ1QQsFdurmCMqMPMbZdZgAr7LxOFqbRqiJMa1aiGBxF2c8TaK
BpqsM+aJCVR3L1jFd6VhvuvDcu8uAhHtLU8NUmjgCpu3pPZ87jGFyIEsGkpD
FNP3+wkUbbo7+Xc+DR5J1oFWNIEhUZZHRjUNJ7Q8ScQogYV64507xTS08Lde
4xMCXj4xad5dNLAs928QTRKIPdq+xIqm4f//guwa79qZGRr+BSvCj4c=
        "]]},
      Annotation[#, "Charting`Private`Tag$36650#1"]& ]}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0., 0.},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
     "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{-1.5, 1.5}, {-4.999999877551021, 0.9999998775510206}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8426972863656025`*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"f57c6e8d-baa0-4e56-bbd0-f1c2ed8f4307"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"graph", " ", "y"}], "=", 
        RowBox[{
          RowBox[{"2", "x"}], "-", "2"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"graph y=2x-2\"}]"], "assumptions" -> {}, "parse" -> 
   Defer[
     Plot[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]], 
   "inputpredictions" -> {{"InputMathOperation$AlternativePlot", 
      Predictions`Prediction[0.99, "plotting", "", {{"log plot", HoldComplete[
          LogPlot[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& }, {
        "log-log plot", HoldComplete[
          LogLogPlot[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& }, {
        "log-linear plot", HoldComplete[
          LogLinearPlot[
          2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.98, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[2 $CellContext`x - 2 == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$Discontinuities", 
      Predictions`Prediction[
      0.94, "analysis", "discontinuities", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["FunctionDiscontinuities"][2 $CellContext`x - 2, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.9299999999999999, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[2 $CellContext`x - 2, {$CellContext`x}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
          2 $CellContext`x - 2, {$CellContext`x}, {$CellContext`y}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[2 $CellContext`x - 2]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegrateOverPlotRange", 
      Predictions`Prediction[
      0.5, "integration", "integrate over plot range", HoldComplete[
        Integrate[2 $CellContext`x - 2, {$CellContext`x, -1.5, 1.5}]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotIntercepts", 
      Predictions`Prediction[
      0.5, "analysis", "intercepts", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Intercepts"][2 $CellContext`x - 2, {
           Hold[$CellContext`x], $CellContext`y}]]]& ], 
      Predictions`InInput}, {"InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[$CellContext`y == 2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][2 $CellContext`x - 2, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        D[2 $CellContext`x - 2, $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[2 $CellContext`x - 2, $CellContext`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[1]]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[2 $CellContext`x - 2, {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[True], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[False]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[2]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {155., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[31]:=",ExpressionUUID->"fe9dd997-2a60-407b-bba1-e2240f5690cb"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "*", "x"}], " ", "-", " ", "2"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "1.5"}], ",", " ", "1.5"}], "}"}]}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Plot", 1}}}},
 CellChangeTimes->{3.8426973222515326`*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"97826d2f-e798-4e49-905f-a85d3ce5fcda"],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{{}, {}, 
     TagBox[
      {LABColor[0.676094128119322, 0.4485405917061707, 0.7359231649869302], 
       AbsoluteThickness[1.6], Opacity[1.], LineBox[CompressedData["
1:eJwtlGs01Hkch4fQIsK/6TLKuuwol1XrIDXWV3SRJYRoqeZokm1ZVqVodVuS
UqZSit2yJVGimqJa/H4xa8fR5JLKdMSENGbG/F3G/Cxh23P2xec8r54Xz5uP
VXTC5l3aDAYj4PP+484KPj0zQ9CDcBGZmaHwvEmWLecTQafSjC4smaawcP3N
qORxgqJvbHbifKKwbdeTRuUQQRTdyUsep7B8Tu8NyXuC9p8YblUOUThxj2uE
oJ4g90esMsl7Ch9mv8UxmQQhs3iuoJ7C+QU258XGBInFpo0xmRS+1n0yIVhf
g1oShFUlOhSe3xISaMccQ4ay0lu5p8ywKChkbRNbjXgldtc/mJlhXzv2Phvr
UVSUa/bU9JwpXl0eVdy8fAQtCXd6+XGBKZ44FUM52w2jtHUC/Su5JniMFF3c
vnQITRxq86ugTLDQ+rxLbbwKRZtuZHW7zcUc3SMCB54SXT2OJExnY5zrtXLl
mjQ58issKCj0NMI7f4v4IL8mQ86bypLGAufg5lsW+lr5/UgWkpPOCDDEFnPu
fYMq+9BcvY7LOyINsIFlf/PA7R6kazL6cV+YPo4LzbhcUiJFbre9/UNDv8Dc
+u4mi/PvUMcQeZDJm42tv50O/uuYBPnmHAn9mauHS2MF7/+sfIXs38aNl8fr
4j2j96NO57eit784vrkeo4OdDutu1bNpQg0Vlk1c3ixMpbQbXiqoR9Y5qc+S
9mrjN7w4+4reShTQUDyy+ictfCDV/mzjxatIXupuG57KwLdz3L2KVvwOv3Km
36XOn0Fnfzj2mnu8Cl60Lf8gmDuFjNT+nLLgepiqcxzOdZhE0n0NLsnpTSCK
fpHUY/EPUj0JqDsgagV9G4mF0Jyg4sw/uLysV/C1R0VzAGcMsTV3qIMFElDp
2Gt8nEdR14Mvazix7+CcbaJVz3fDKCxPelLBl8KWVk/Vsi4Vunozu8b/Ug8I
H/anx7yUI53I+EHdlD4Y38hmq40+ohfc0lub0/uB53n33vekBz0yYm0jcTJw
bMw7be3fhWzzrWSz/eUQm5eyQ9r8Gk0kp0/dCVHCCt9OqjBajBQT5sYl7ioI
CvayOLK/GhXuzmw3txkCRovAR37mHPDXPM9exB4GxiLh88vBdWCccMe7njkC
iQcjmazyFqhd+7imkjUKQ+y6wUevOmAqfofbFmM1qKvSJBGrpKA1u+2Kw5Qa
dBb77i5X94Kbb1KdH0MDHZaN+g5aMpjoLJMxRzQg2yu4Hi5SwNo4ET9AowGT
+1Y+bhIFnJnsdc+Y0ICLKqd3nlwBlizzLLU2gaOxcV+1GSphQ3iW3UuKwOJt
7GL/QCXktu7aw3clELQ+r3TNayU4NVgoDVIIPF546J5D3yAcDFud651GQBo2
EGQwNgjP+sI8Uo8R0LkQPizTVUHorDPZA1mffSMX5+KlKjjkNekoyieg1BoU
WP6oAtHTN/EZ1QQsFdurmCMqMPMbZdZgAr7LxOFqbRqiJMa1aiGBxF2c8TaK
BpqsM+aJCVR3L1jFd6VhvuvDcu8uAhHtLU8NUmjgCpu3pPZ87jGFyIEsGkpD
FNP3+wkUbbo7+Xc+DR5J1oFWNIEhUZZHRjUNJ7Q8ScQogYV64507xTS08Lde
4xMCXj4xad5dNLAs928QTRKIPdq+xIqm4f//guwa79qZGRr+BSvCj4c=
        "]]},
      Annotation[#, "Charting`Private`Tag$37541#1"]& ]}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0., 0.},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
     "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{-1.5, 1.5}, {-4.999999877551021, 0.9999998775510206}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{3.84269732254742*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"e6ffcd67-f4e9-45ba-adfe-8b119c416636"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> "limit of 2 x - 2 as x -> 0", "assumptions" -> {}, "parse" -> 
   Defer[
     Limit[2 $CellContext`x - 2, $CellContext`x -> 0]], 
   "inputpredictions" -> {{"InputMathOperation$SeriesAtLimit", 
      Predictions`Prediction[0.99, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm[$CellContext`x], LineBreakWithin -> False], 
          ImageSize -> {150}, BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[2 $CellContext`x - 2, {$CellContext`x, 0, 3}]]& ], 
      Predictions`InInput}, {"InputMathOperation$Limits", 
      Predictions`Prediction[0.98, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[2 $CellContext`x - 2, $CellContext`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[1]]]& }}], 
      Predictions`InInput}, {"InputMathOperation$ChangeDirection", 
      Predictions`Prediction[
      0.97, "limits", "", {{"limit from above", HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> 0, Direction -> 
           "FromAbove"]]& }, {"limit from below", HoldComplete[
          Limit[
          2 $CellContext`x - 2, $CellContext`x -> 0, Direction -> 
           "FromBelow"]]& }}], Predictions`InInput}, {
     "InputMathOperation$AlternativeLimits", 
      Predictions`Prediction[0.96, "limits", "", {{"min limit", HoldComplete[
          MinLimit[2 $CellContext`x - 2, $CellContext`x -> 0]]& }, {
        "max limit", HoldComplete[
          MaxLimit[2 $CellContext`x - 2, $CellContext`x -> 0]]& }}], 
      Predictions`InInput}, {"InputMathOperation$AnalogousDiscreteLimit", 
      Predictions`Prediction[0.95, "limits", "", {{
         Row[{"discrete limit at ", 
           Pane[
            Style[
             HoldForm["\[Infinity]"], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          DiscreteLimit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[1]]]& }, {
         Row[{"discrete limit at ", 
           Pane[
            Style[
             HoldForm["-\[Infinity]"], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          DiscreteLimit[
          2 $CellContext`x - 2, $CellContext`x -> DirectedInfinity[-1]]]& }}],
       Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[2 $CellContext`x - 2]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[2 $CellContext`x - 2, {$CellContext`x}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
          2 $CellContext`x - 2, {$CellContext`x}, {$CellContext`y}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
          2 $CellContext`x - 2, $CellContext`x]]& }}], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[2 $CellContext`x - 2, {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[$CellContext`y == 2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotFunction", 
      Predictions`Prediction[0.5, "plotting", "plot function", HoldComplete[
        Plot[-2 + 2 $CellContext`x, {$CellContext`x, -1.5`3., 1.5`3.}]]& ], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.5, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[2 $CellContext`x - 2 == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][2 $CellContext`x - 2, 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        D[2 $CellContext`x - 2, $CellContext`x]]& ], Predictions`InInput}, {
     "InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[2 $CellContext`x - 2, $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$DerivativeAtLimitPoint", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative at ", 
         Pane[
          Style[
           HoldForm[$CellContext`x], LineBreakWithin -> False], 
          ImageSize -> {150}, BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        ReplaceAll[
         D[2 $CellContext`x - 2, $CellContext`x], $CellContext`x -> 0]]& ], 
      Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[2 $CellContext`x - 2, {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[0]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    1, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellChangeTimes->{3.842697335763241*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"b6d1abea-9d43-4d27-9a67-6c2824d191b4"],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "*", "x"}], " ", "-", " ", "2"}], ",", " ", 
   RowBox[{"x", " ", "->", " ", "0"}]}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Limit", 1}}}},
 CellChangeTimes->{3.8426973361928177`*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"c5332394-66a2-4c37-b808-38507839c02d"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", "2"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.842697336227907*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"f711acea-5686-4e77-ac80-9b1c8d883017"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{
          RowBox[{"graph", " ", "y"}], "=", 
          RowBox[{"2", "+", 
            RowBox[{"sin", "(", 
              RowBox[{"a", "+", 
                RowBox[{"x", "^", "2"}]}], ")"}], "-", "2"}]}], ",", " ", 
        RowBox[{
         "varying", " ", "a", " ", "from", " ", "1", " ", "to", " ", "5"}]}], 
     "json" -> 
     "[{\"t\":0,\"v\":\"graph y=2+sin(a+x^2)-2, varying a from 1 to 5\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     ResourceFunction["ManipulatePlot"][
     2 + Sin[$CellContext`a + $CellContext`x^2] - 
      2, {$CellContext`x, -2.8, 2.8}, {{$CellContext`a, 3}, 1, 5}]], 
   "inputpredictions" -> {}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[33]:=",ExpressionUUID->"ef8b0c0f-3670-45e3-b85e-31402b6a343d"],

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   TagBox[
    FrameBox[
     PaneBox[GridBox[{
        {
         StyleBox[
          StyleBox[
           AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
            BoxBaselineShift->-0.25,
            BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
           
           FontColor->RGBColor[
            0.8745098039215686, 0.2784313725490196, 0.03137254901960784]],
          ShowStringCharacters->False,
          FontFamily->"Source Sans Pro Black",
          FontSize->0.65 Inherited,
          FontWeight->"Heavy",
          PrivateFontOptions->{"OperatorSubstitution"->False}], 
         StyleBox[
          RowBox[{
           StyleBox["\<\"ManipulatePlot\"\>", "ResourceFunctionLabel"], " "}],
          ShowAutoStyles->False,
          ShowStringCharacters->False,
          FontSize->0.9 Inherited,
          FontColor->GrayLevel[0.1]]}
       },
       GridBoxSpacings->{"Columns" -> {{0.25}}}],
      Alignment->Left,
      BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
      BaselinePosition->Baseline,
      FrameMargins->{{3, 0}, {0, 0}}],
     Background->RGBColor[0.968627, 0.976471, 0.984314],
     BaselinePosition->Baseline,
     DefaultBaseStyle->{},
     FrameMargins->{{0, 0}, {1, 1}},
     FrameStyle->RGBColor[0.831373, 0.847059, 0.85098],
     RoundingRadius->4],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "\"ManipulatePlot\""},
    TagBoxNote->"FunctionResourceBox"],
   ResourceFunction["ManipulatePlot"],
   Selectable->False], "[", 
  RowBox[{
   RowBox[{"2", " ", "+", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"a", " ", "+", " ", 
      RowBox[{"x", "^", "2"}]}], "]"}], " ", "-", " ", "2"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "2.8"}], ",", " ", "2.8"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", " ", "3"}], "}"}], ",", " ", "1", ",", " ", "5"}], 
    "}"}]}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"ManipulatePlot", 2}, {"Sin", 1}}}},
 CellChangeTimes->{3.842697401349084*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"dad6f486-2bfa-45ab-b21d-0944c3ddb9a5"],

Cell[BoxData[
 FormBox[
  DynamicModuleBox[{ResourceFunctionHelpers`ManipulatePlot`Private`openV$$ = 
   False, ResourceFunctionHelpers`ManipulatePlot`Private`openH$$ = False, 
   ResourceFunctionHelpers`ManipulatePlot`Private`ylo$$ = -1.575, 
   ResourceFunctionHelpers`ManipulatePlot`Private`yhi$$ = 1.0150000000000001`,
    ResourceFunctionHelpers`ManipulatePlot`Private`xlo$$ = -3.74, 
   ResourceFunctionHelpers`ManipulatePlot`Private`xhi$$ = 5.6, 
   ResourceFunctionHelpers`ManipulatePlot`Private`xprVar$$ = {-3.74, 5.6}, 
   ResourceFunctionHelpers`ManipulatePlot`Private`yprVar$$ = {-1.575, 
   1.0150000000000001`}, ResourceFunctionHelpers`ManipulatePlot`Private`t1$$, 
   ResourceFunctionHelpers`ManipulatePlot`Private`t2$$, 
   ResourceFunctionHelpers`ManipulatePlot`Private`t3$$, 
   ResourceFunctionHelpers`ManipulatePlot`Private`t4$$}, 
   TagBox[
    FormBox[
     StyleBox[
      DynamicModuleBox[{$CellContext`a$$ = 2.4699999999999998`, 
       ResourceFunctionHelpers`ManipulatePlot`Private`size$$ = Large, 
       ResourceFunctionHelpers`ManipulatePlot`Private`t1$$ = -1.575, 
       ResourceFunctionHelpers`ManipulatePlot`Private`t2$$ = 
       1.0150000000000001`, 
       ResourceFunctionHelpers`ManipulatePlot`Private`t3$$ = -3.74, 
       ResourceFunctionHelpers`ManipulatePlot`Private`t4$$ = 5.6, 
       Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
       Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
       Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
       Typeset`specs$$ = {{{
          Hold[
          ResourceFunctionHelpers`ManipulatePlot`Private`t1$$], \
-0.9999996196395629, "Vertical min"}, 
         Dynamic[Dynamic[
           Manipulator[
            Dynamic[
            ResourceFunctionHelpers`ManipulatePlot`Private`t1$$, (
             ResourceFunctionHelpers`ManipulatePlot`Private`t1$$ = (
              ResourceFunctionHelpers`ManipulatePlot`Private`ylo$$ = (
               Part[ResourceFunctionHelpers`ManipulatePlot`Private`yprVar$$, 
                 1] = #)))& ], {-2., 0.}]]& ]}, {{
          Hold[ResourceFunctionHelpers`ManipulatePlot`Private`t2$$], 
          0.9999990925884414, "Vertical max"}, 
         Dynamic[Dynamic[
           Manipulator[
            Dynamic[
            ResourceFunctionHelpers`ManipulatePlot`Private`t2$$, (
             ResourceFunctionHelpers`ManipulatePlot`Private`t2$$ = (
              ResourceFunctionHelpers`ManipulatePlot`Private`yhi$$ = (
               Part[ResourceFunctionHelpers`ManipulatePlot`Private`yprVar$$, 
                 2] = #)))& ], {0., 2.}]]& ]}, {{
          Hold[ResourceFunctionHelpers`ManipulatePlot`Private`t3$$], -2.8, 
          "Horizontal min"}, 
         Dynamic[Dynamic[
           Manipulator[
            Dynamic[
            ResourceFunctionHelpers`ManipulatePlot`Private`t3$$, (
             ResourceFunctionHelpers`ManipulatePlot`Private`t3$$ = (
              ResourceFunctionHelpers`ManipulatePlot`Private`xlo$$ = (
               Part[ResourceFunctionHelpers`ManipulatePlot`Private`xprVar$$, 
                 1] = #)))& ], {-5.6, 0.}]]& ]}, {{
          Hold[ResourceFunctionHelpers`ManipulatePlot`Private`t4$$], 2.8, 
          "Horizontal max"}, 
         Dynamic[Dynamic[
           Manipulator[
            Dynamic[
            ResourceFunctionHelpers`ManipulatePlot`Private`t4$$, (
             ResourceFunctionHelpers`ManipulatePlot`Private`t4$$ = (
              ResourceFunctionHelpers`ManipulatePlot`Private`xhi$$ = (
               Part[ResourceFunctionHelpers`ManipulatePlot`Private`xprVar$$, 
                 2] = #)))& ], {0., 5.6}]]& ]}, {{
          Hold[$CellContext`a$$], 3}, 1, 5}, {{
          Hold[ResourceFunctionHelpers`ManipulatePlot`Private`size$$], 
          Large}}}, Typeset`size$$ = {641., {178., 183.}}, Typeset`update$$ = 
       0, Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
       DynamicBox[Manipulate`ManipulateBoxes[
        1, TraditionalForm, 
         "Variables" :> {$CellContext`a$$ = 3, 
           ResourceFunctionHelpers`ManipulatePlot`Private`size$$ = Large, 
           ResourceFunctionHelpers`ManipulatePlot`Private`t1$$ = \
-0.9999996196395629, ResourceFunctionHelpers`ManipulatePlot`Private`t2$$ = 
           0.9999990925884414, 
           ResourceFunctionHelpers`ManipulatePlot`Private`t3$$ = -2.8, 
           ResourceFunctionHelpers`ManipulatePlot`Private`t4$$ = 2.8}, 
         "ControllerVariables" :> {}, 
         "OtherVariables" :> {
          Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
           Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
           Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
           Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Plot[
           Sin[$CellContext`a$$ + $CellContext`x^2], 
           
           Evaluate[{$CellContext`x, 
             ResourceFunctionHelpers`ManipulatePlot`Private`xlo$$, 
             ResourceFunctionHelpers`ManipulatePlot`Private`xhi$$}], 
           PlotRange -> 
           Evaluate[{
             ResourceFunctionHelpers`ManipulatePlot`Private`xprVar$$, 
              ResourceFunctionHelpers`ManipulatePlot`Private`yprVar$$}], 
           ImageSize -> 
           Dynamic[ResourceFunctionHelpers`ManipulatePlot`Private`size$$], 
           PlotLegends -> 
           "\!\(\*FormBox[RowBox[{\"sin\", \"(\", RowBox[{\"a\", \"+\", \
SuperscriptBox[\"x\", \"2\"]}], \")\"}], TraditionalForm]\)", 
           Evaluate[
            FilterRules[
             Flatten[{}], 
             Options[Plot]]]], 
         "Specifications" :> {{{
            ResourceFunctionHelpers`ManipulatePlot`Private`t1$$, \
-0.9999996196395629, "Vertical min"}, 
            Dynamic[Dynamic[
              Manipulator[
               Dynamic[
               ResourceFunctionHelpers`ManipulatePlot`Private`t1$$, (
                ResourceFunctionHelpers`ManipulatePlot`Private`t1$$ = (
                 ResourceFunctionHelpers`ManipulatePlot`Private`ylo$$ = (
                  Part[ResourceFunctionHelpers`ManipulatePlot`Private`yprVar$$\
, 1] = #)))& ], {-2., 0.}]]& ]}, {{
            ResourceFunctionHelpers`ManipulatePlot`Private`t2$$, 
             0.9999990925884414, "Vertical max"}, 
            Dynamic[Dynamic[
              Manipulator[
               Dynamic[
               ResourceFunctionHelpers`ManipulatePlot`Private`t2$$, (
                ResourceFunctionHelpers`ManipulatePlot`Private`t2$$ = (
                 ResourceFunctionHelpers`ManipulatePlot`Private`yhi$$ = (
                  Part[
                   ResourceFunctionHelpers`ManipulatePlot`Private`yprVar$$, 
                    2] = #)))& ], {0., 2.}]]& ]}, {{
            ResourceFunctionHelpers`ManipulatePlot`Private`t3$$, -2.8, 
             "Horizontal min"}, 
            Dynamic[Dynamic[
              Manipulator[
               Dynamic[
               ResourceFunctionHelpers`ManipulatePlot`Private`t3$$, (
                ResourceFunctionHelpers`ManipulatePlot`Private`t3$$ = (
                 ResourceFunctionHelpers`ManipulatePlot`Private`xlo$$ = (
                  Part[ResourceFunctionHelpers`ManipulatePlot`Private`xprVar$$\
, 1] = #)))& ], {-5.6, 0.}]]& ]}, {{
            ResourceFunctionHelpers`ManipulatePlot`Private`t4$$, 2.8, 
             "Horizontal max"}, 
            Dynamic[Dynamic[
              Manipulator[
               Dynamic[
               ResourceFunctionHelpers`ManipulatePlot`Private`t4$$, (
                ResourceFunctionHelpers`ManipulatePlot`Private`t4$$ = (
                 ResourceFunctionHelpers`ManipulatePlot`Private`xhi$$ = (
                  Part[ResourceFunctionHelpers`ManipulatePlot`Private`xprVar$$\
, 2] = #)))& ], {0., 5.6}]]& ]}, 
           Delimiter, {{$CellContext`a$$, 3}, 1, 5}, {{
            ResourceFunctionHelpers`ManipulatePlot`Private`size$$, Large}, 
            ControlType -> None}}, 
         "Options" :> {ControlPlacement -> Bottom, LabelStyle -> Directive[14, 
             GrayLevel[0.1]], 
           TrackedSymbols -> {$CellContext`a$$, {-0.9999996196395629, 
             0.9999990925884414}, {-2.8, 2.8}}}, "DefaultOptions" :> {}],
        ImageSizeCache->{694., {300., 306.}},
        SingleEvaluation->True],
       Deinitialization:>None,
       DynamicModuleValues:>{},
       SynchronousInitialization->True,
       UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
       UnsavedVariables:>{Typeset`initDone$$},
       UntrackedVariables:>{Typeset`size$$}], "Manipulate",
      Deployed->True,
      StripOnInput->False],
     TraditionalForm],
    Manipulate`InterpretManipulate[1]],
   DynamicModuleValues:>{}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8426974223474674`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"48268031-879b-4f4f-89a4-f357cefe9d33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"plot", " ", 
          RowBox[{"sin", "(", "x", ")"}], " ", 
          RowBox[{"cos", "(", "y", ")"}]}], ",", " ", 
        RowBox[{
         "x", " ", "from", " ", "0", " ", "to", " ", "4", "Pi", " ", "and", 
          " ", "y", " ", "from", " ", "0", " ", "to", " ", "2", " ", "Pi"}]}],
      "json" -> 
     "[{\"t\":0,\"v\":\"plot sin(x) cos(y), x from 0 to 4Pi and y from 0 to 2 \
Pi\"}]"], "assumptions" -> {}, "parse" -> Defer[
     Plot3D[
     Sin[$CellContext`x] 
      Cos[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0, 2 
       Pi}]], "inputpredictions" -> {{
     "InputMathOperation$AlternativeSurfacePlot", 
      Predictions`Prediction[
      0.99, "plotting", "", {{"contour plot", HoldComplete[
          ContourPlot[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0,
             2 Pi}]]& }, {"density plot", HoldComplete[
          DensityPlot[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0,
             2 Pi}]]& }}], Predictions`InInput}, {
     "InputMathOperation$Gradient", 
      Predictions`Prediction[
      0.98, "multivariate calculus", "gradient", HoldComplete[
        Grad[
        Sin[$CellContext`x] 
         Cos[$CellContext`y], {$CellContext`y, $CellContext`x}]]& ], 
      Predictions`InInput}, {"InputMathOperation$Laplacian", 
      Predictions`Prediction[
      0.97, "multivariate calculus", "Laplacian", HoldComplete[
        Laplacian[
        Sin[$CellContext`x] 
         Cos[$CellContext`y], {$CellContext`y, $CellContext`x}]]& ], 
      Predictions`InInput}, {"InputMathOperation$TrigAlgebra", 
      Predictions`Prediction[
      0.5, "trigonometry", "", {{"expand trig functions", HoldComplete[
          Plot3D[
           TrigExpand[
           Sin[$CellContext`x] Cos[$CellContext`y]], {$CellContext`x, 0, 4 
            Pi}, {$CellContext`y, 0, 2 Pi}]]& }, {
        "factor trig functions", HoldComplete[
          Plot3D[
           TrigFactor[
           Sin[$CellContext`x] Cos[$CellContext`y]], {$CellContext`x, 0, 4 
            Pi}, {$CellContext`y, 0, 2 Pi}]]& }, {
        "reduce trig products and powers", HoldComplete[
          Plot3D[
           TrigReduce[
           Sin[$CellContext`x] Cos[$CellContext`y]], {$CellContext`x, 0, 4 
            Pi}, {$CellContext`y, 0, 2 Pi}]]& }, {
        "convert trig functions to exponentials", HoldComplete[
          Plot3D[
           TrigToExp[
           Sin[$CellContext`x] Cos[$CellContext`y]], {$CellContext`x, 0, 4 
            Pi}, {$CellContext`y, 0, 2 Pi}]]& }}], Predictions`InInput}, {
     "InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[Sin[$CellContext`x] Cos[$CellContext`y]]]& ], 
      Predictions`InInput}, {"InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], {$CellContext`x, $CellContext`y}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], {$CellContext`x, $CellContext`y}, \
{$CellContext`z}]]& }}], Predictions`InInput}, {
     "InputMathOperation$Plot3DIntercepts", 
      Predictions`Prediction[
      0.5, "analysis", "intercepts", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Intercepts"][
         Sin[$CellContext`x] Cos[$CellContext`y], {
           Hold[$CellContext`x, $CellContext`y], $CellContext`z}]]]& ], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.5, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[Sin[$CellContext`x] Cos[$CellContext`y] == 0, {
           Hold[$CellContext`x, $CellContext`y]}, Reals]]]& ], 
      Predictions`InInput}, {"InputMathOperation$ComplementTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their cofunctions", 
       HoldComplete[
        Plot3D[
        Cos[$CellContext`x] 
         Sin[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0, 
          2 Pi}]]& ], Predictions`InInput}, {
     "InputMathOperation$InverseTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their inverses", 
       HoldComplete[
        Plot3D[
        ArcSin[$CellContext`x] 
         ArcCos[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 
          0, 2 Pi}]]& ], Predictions`InInput}, {
     "InputMathOperation$ReciprocalTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their reciprocals", 
       HoldComplete[
        Plot3D[
        Csc[$CellContext`x] 
         Sec[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0, 
          2 Pi}]]& ], Predictions`InInput}, {"InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", "", {{
         Row[{"derivative wrt ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          D[Sin[$CellContext`x] Cos[$CellContext`y], $CellContext`x]]& }, {
         Row[{"derivative wrt ", 
           Pane[
            Style[
             HoldForm["y"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          D[Sin[$CellContext`x] Cos[$CellContext`y], $CellContext`y]]& }, {
         Row[{"derivative wrt ", 
           Pane[
            Style[
             HoldForm["x, y"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          D[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], $CellContext`x, $CellContext`y]]& }}], 
      Predictions`InInput}, {"InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", "", {{
         Row[{"indefinite integral wrt ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Integrate[
          Sin[$CellContext`x] Cos[$CellContext`y], $CellContext`x]]& }, {
         Row[{"indefinite integral wrt ", 
           Pane[
            Style[
             HoldForm["y"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Integrate[
          Sin[$CellContext`x] Cos[$CellContext`y], $CellContext`y]]& }, {
         Row[{"indefinite integral wrt ", 
           Pane[
            Style[
             HoldForm["x, y"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Integrate[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], $CellContext`y, $CellContext`x]]& }}], 
      Predictions`InInput}}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[34]:=",ExpressionUUID->"c93cfe6e-1d36-40fd-91a5-6f67b8e14551"],

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "*", 
    RowBox[{"Cos", "[", "y", "]"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "0", ",", " ", 
     RowBox[{"4", "*", "Pi"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"y", ",", " ", "0", ",", " ", 
     RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"Plot3D", 1}, {"Sin", 1}, {"Cos", 1}}}},
 CellChangeTimes->{3.8426974888573484`*^9},
 CellLabel->"In[34]:=",ExpressionUUID->"1e458642-8f86-473e-83c5-eba56043436c"],

Cell[BoxData[
 FormBox[
  Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJydnXm8TtX3+K95LjMhc4ZkFjLc5yFTkqnInCJTyJTMc2UeSmZChmSe5/uY
CYkQSqYMZZZk5nvOs9Z73WvfT6/f6/XrHy/vlvWsvfbae6+99j7n5Pjg47of
xo2IiHicLCIinvdnlQNfflcz65JI+XNGZL9d8vexj/Ycz77+agC+pvfo7jvi
/xWo8cUvl7Ktf2T874Nb1k0tdiOQr9qc5ceGJwjC+7cLNI3a8Vvg+xpNP862
PrnxZHUnbt2647fQhHwjJqy8ncr49Bcf5ZpW7Ebo2PetPzk2PJ3xQOiF6tvj
/xXKWLDSOw9zvGA8TaO0xfPMW76p4dLsxbOtz2K8vMgHfpz0ZGiOfNmNzxD9
gWsn2vdYeTuH8RxiTyBF5t9aVw7lMt5Y7A8VbPLGu8eGv2T8irQ39Nb0tVXa
1s9rfL/4J/TxqZdKPsyR3/jBsVUWeP6Mws/i15OBxLdz/RqVc6H5GV6vX5x1
/YZfND/Dyww9mH1p5qvmZ3jfYyXabI1/wvwM79nPt+eE+Rn+6psdBnp6zM/w
61feWtB3+EXzM7zx6HLJ2/+41PwMvyry5md4SdFvfoaPEnvMz/AmYr/5GV5C
2mt+hrcV/5if4TVv7PT9aX4W/10NLMv52e43d882P8PvTUrXbVqx0+Zn+Pxr
1zON6/qH+Rne6FSfEmVqHzI/ww8nPV+nXO1D5mf4sc/3NvX0mJ/h1xO3fzyl
2GnzM/xorV3fJok7z/wMvyLy5mf4cdFvfoafFXvMz/BKYr/5GT5b2mt+hqed
HPaP+Rk+o+wd35/mZ/HTnUDuV4eu+enAcPMz/NXOSU/trLTL/AxPPeDHx5t3
7DM/w5sMX7O62dp15mf4iDembXh/7TrzM/yrDv443Wd+hv9VaNrPOyrtMj/D
a239YmaKj8aYn+GXRN78DB8v+s3P8Blij/kZXk7sNz/Dk0t7zc/wN8Q/5md4
83L51nr+ND+LPx4FMty69PJhj+NneLMqCzft8fTgZ3jueqfGbfV+Fz/D07VJ
f8H3J36Gnxz+6K+WXrvwM/xWzdq3PD0B/Ayfdrbc8t2e3/AzfPWfTxal+mhM
OfwMnyLyIfwM/1v0h/Az/KbYE8LP8Dutw/YH8DP8RWlvAD/Du4h/AvgZ3ube
FwU8f0biZ2l3nOCpbT/3qOHFOX6GX4+aO2W6Ny7wM3x2pok/++MIP8N/yX/n
mD/u8DO8arsmd/xxip/hb6zpku5Lb1zjZ3jqHP76ddr8DC99blzXpHHnmZ/h
z4u8+RleXfSbn+H1xB7zM3yL2G9+hk+X9pqf4UlCYf+Yn+EHf6vY0/On+Vna
lyD4ao1h5ULevI2f4Z2WbE7S35vn8TO8wshNn/vrAn42PRevbvPXEfwMrzKp
yiF/3cHP8Cm1G17y1yn8DC+eMelDf13Dz/AHZ0b199ZB8zO8qMibn+FTRb/5
Gd5I7DE/w9OK/eZneBlpr/kZPkT8Y36G96tWoLznT/OztCNJ8MgP4b+bn+G9
+0negp/hrY5InoOf4V92kLwIP8Oz1pM8Cj/DU+WQvAs/w+NvkzwNP8MTNQnn
deZneFyRNz/DZVzcMD/DS4g95md4R7Hf/Ax/T9prfoaPE/+Yn+F5xofzOvOz
2Js8WNKJZ3hnJ57hFZ14Nj1OPMOrOvEMn+rEM7yEE8/wh048w4s58Qyf5sQz
vLETz/B0TjzDyzrxDP/MiWd4fyeexa6UwdPO/Ay/4czP8G+d+Rl+zJmf4dWc
+Rle3Zmf4Wmc+Rn+mjM/w1M58zP8TWd+htd35mf4Vmd+hs9w5md4Mmd+hh9y
5mf5/VTBQk6+Ae/s5Bvwsk6+AX/ZyTfgt5x8A5641rP5Bnypk2/Af3LyDfhi
J9+AJ6n1bL4BTzDi2XwDnrTNs/kG/FUn34APcfINeD8n35DfSRN8UuLZ/Bme
3smf4Vf6P5s/w8s4+TO8jZM/w9s7+TN8r5M/w3M5+TN8j5M/wzs4+TO8t5M/
wzM5+TP8Qv9n82d4fid/Nj84+bPoSxec5+wH4Zec/SB8mrMfhNdx9oPwvc5+
EP6jsx+En3T2g/AfnP0g/FdnP+joNz/Djzn7QXgZZz8In+TsB+Fxnf0gfLyz
H5R/lyEYx6lvwGs59Q14Mae+Ae/u1DfgXZz6BrygU9+AX3LqG/C3nfoG/KJT
34AXcuob8M+d+ga8nlPfgL/i1DfgLZz6BryqU9+Q//9C0K3Xwd16Hdyt18Hd
eh3crdfB3Xod3K3Xwd16Hdyt18Hdeh3crdfB3Xod3K3Xwd16HZx63QuXFm/I
uf5kYO+gF18+PvxCoOFf8Qf+uvpo4NLO3T/7+xn4zWlp83ce80eg7d4BY/28
EP7z5Iw7842cGNX9Upb5/voKrzn6UZouY/4I3btytKXfr/CVz2f79djqo6HS
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
OEY+A2/5WYv2fv5J/dP8L36z/rI6xoDzT/x20V/o2T9q5/d+u+gv+L4h64v4
+TnjFD5LuI1T+E7RY/0IL5BE8ljkJd6Tmjz9i/yFw7+X8dcj+hd5+pd5Evl1
4h87T4TfSy37COTRgzz9jvyTYXW+8f1GvyNPvzNOkd8q/W7jFN5J5K3f4ffF
HpNHP/LEg8VVrU7DPvf0Ew/IEw/Mt8gfFP/YeSU8t/g/gDx6kCdOkH/xYPkd
vn+IE+SJE+IBTjyQz8ATiR5bTznfj9+2a4Nd8U9YnCDvxgn1nw46PzCukWdc
s87CV4nfbL/G71Yb26BcyMv/iRPk3ThB/vCFFoP8cyvGO/KMd+IBTjyQ/8Af
S1zZPgv9D7b65yAnLE6Qd+MEP3yu8wnzAPLMA6zX8G0yjmzfZO2KKhrp+cHm
DeTdOEF+eOVlXf1zMeYH5Jkf6HfsTCHzjPU79w226/pOvyPfQ+d5+p062DBd
9+lf5JvKPGn9i/6KzjqO/Be6LtO/yH8q66DNA8if0Pmffkf+vq7X9C/yul5Y
/yL/j67j9C/yhXT+p39pbzFd3+lH5NPLemf9aPY46zXyXXX9pR+RXyX5j413
5LPpukD/In9K12v6FzvHyrpv/cs9h5yaJzNvwy85+TB63pf8xPoR+XuaD9OP
jn+sH5Ef6uTJVo918i7kq2qeTD8iX0nyOutH5IOaPzMPw0c4eTJ6dkr+af2F
fBbNk+kv5MdofkV/IX/CyZ/hbzj5M/cf9us+kfWU+urmR28XjLlPQb68s39E
/syBac1i7lOQP6D7R/xv90ycfSJ6Uudb/G/MfQryI3SfiJ/hg3U/yDqInjti
j+1TkP/I2SciP1Xaa/sU5NfqPhE/w4s4+0H47ezP7ge5/1BN6y3MV9R1K2pd
hfkNXrXruj3+PEy/wFPKftb29ejvKfUEGxfwpE4dBj1TdP/OPAb/WvbdViek
HjtW6zb0F/IznX09v9td6zP0F7yz1mGYxxx7rD5jdfXdO1/y/UP/wrVeYXUA
9DeWOpKNI/hqpz6Dnmq632d+gyeUuorV6/DDEK3n0O/ob6n1GfoX+f5aH6Z/
4X21zkb/wudJfcn6V34nY/Ch1p/pX/h4rSeTn6CnjNS1rH/h27SeRv+iZ5XW
jelHeCKtA9Nf6BmjdVf6C15W62n0F/xfqRNaf6H/jNZ16S/4Ma3Tkm+g51Px
m/UX/DOtm9Ff6Gms9Vj6y7jWVxmn8CLO+QL8Hed8gXsgU6Uea+cLyH+r5wv0
O3zPkKUnmnp60I8ezh2IB+v3l99N7o8L4gF5zheYV5H/Xc8RiAf42VGyX0Ae
PZwjECfIZ/uw1Se+n4kT5N3zArh7LoCep22ePReAr3TOBdDzluixuEL+nNhv
epDnvIB4s36c9VcjP58n3pDnXID5HPlrWv8n3uBbpb9s34Qe6v/EIfJVFtSd
4vufOLR7UFrnp26P/AOt2xOfyFPnJ96o/xNv5Fd2Lia/a/MMfJ8Tb/Y83bcb
l/v301jHkX9R/GbxAz+v8UOcwHNqnNCP2Ek/ki8hn13krX/hF5z+xc4jV7PW
8e1kvUb+VxkX1l/wHdpf9Av8De0X/EBd/UGN0v39+5C01zkXsHkP+VabmpTz
5fld5AfqvIQe6slx94TXL7MTXl/Wdxtf1LtmXI7/j6+f+IEv6numpH+fnH6n
PpNc903MDzzfMVH2X7b/hVfV/Sy/Cx9xK+la38+Ma3hE+HmKE9aP/O5R3b8w
vpA/Kvtf22/Cf9b9I+2Cf7pgfoZl3u8S//CXZb9v7aXOQH2AfuQ5i6SbZXzh
B3iPxjJOmffgCXPJPIAf4EX7yXxCe/ld9uPEA/JFRN78AE8i+m3egLcVe6x/
7fkXsd/GqT0PIv6xccc+mroT9iCv/Wjxjzz1GfSzX/tO4srilv1dQa1zot+e
F5D4tHi2/aPWD9HDPqWJ1JltvMDjSh3e/E8e1UTGl82f8NsyTq1exLrfTc83
6XfuwZaU81bLl+Bp9Dyd34X/KPOMrWtwPae2+gy/u0XPGel35GfIObvlM/CJ
eo5Mu+CNZR62/AS+X+4tWHtZL4rqPI898Bd1XsUPzJ/l1A+0F35U24v98Dlq
P3bCP1A7iR97/k7jk/Fl413rYMQPfLjGJ+PCuNaLsJ94nqTzGPbDR+p8hf1w
5h/sh/fQeQb78fM7ug5iP3yq3pfAfusXXY+wH55Pz/erDF/W198/PHfv+cwn
hh8NLOhVeMKokldCCVKc3DvkjzzGy+4c1ni0x+XvFwKJE5XcVjl0O5A3/eAt
OxvvDQxPdqO/P27h/xY6n2HQwRWhoclHNfH7G54xb6mF/T2+Z3TbsvUPZzY+
Z/+OA9s9PTuHP73SvEYu4+czDY/s68nL3+MF5XceBCrk+inv41PLQ/wufPEL
Qy4UHTw5wO/CZx4+M7WQx+e+Me7RgQE5jN+bWrXnE08Pvwtf8UX5ugVi6EmY
+MiMyyniBHe8vffI8ppRgWQJHiR+lON+QPwXPxg5+NbHTTNeCYlcqiB8QP+9
ubu2/TOQNFWVTL3aZTMeOUzkL+zr8NvfGV4yfmL5lq5dPHn6RfyULFimzbnf
vX4J0C/wI6vKfev1S4B+kfalCv6Qe9Xd3Y33mn/gb3wdWjT44AprFzzQMHVw
oMfpF3in5XcS7PL04B/46YwfHu7nydMv8v/TBOf/PLzvvVPLLR7gqaZOKuf5
0+IBvq7Iv3/n9Tj9Aq9yO+5P9z09/C6835a3F+SOoUf8ly4YZ8XUtstqRoXo
F/FT+mCXT7bcaJLxSoB+gU9v+OZyz88h+sXke4s8/QIvO6ZChC+/a0jDP/xz
wWERFd5cdftsoKbwQLr8v8ZPODW78Xmi3/pF/t3NQN3S/c8cL3PU/APvMqlD
nVWe/ftG7Wvmr0/Ef/1/vt29w/M/7UU+vbb3u7cevrkjUSbj8YVbP8IvrZhc
65j3u8ijP7mMR/Mz8qEdPwxc5Omvt3DNH/mL5Tb5DN9cOLrNs4d+rzYs9ay2
9e8GftV+l78nMp5ia7i/rL3whhoPyDPuHsi4Mz8g31XiwTjyf8v4tXhGPqKo
xBXthd+UeDM/oGeczA8Wh8j31Dh8tV21fya2ymn8M7Hf/AbfpfGJPPpPyLxk
/kR+n/jNOPLFZH6z8SXtfhKI+3H6FN58a36Dp3ghPB6NM1/dKXXv6mKvH9vs
y9rBzwOQbyfj2vwGL63zAPLo6fUwoubxGPGDfEGRNz8jv0LmSfMn8smvH3ni
zyf4B/6BzEvG0ZOj7bRNqz09Ewp+te2tH/Ka/DGZ3wJw5Dd8dfHUCc9Oxunl
n469/OeMFMELMq+GGKfwwTI/27om/9/LM0WPzZ/wG23C9gSIQ+bDFNIu8yfy
u3S9wD/wVeofxim8h/jZ/In+Eupn4g352dK/AeIH+bsdw3Fi8SN+TR18T9dN
4gT+0lAZd7QXrnFr45p5eKfEufkB+ZTTZDzCkQ/q+MU/yO/TdZn2wjfpeISj
5zsdv8QV8hnkdy1+4PEzybjDb/BTur4jj/5yOq7xJ/J1dDzCkZ+s4xc/y/9P
G0wr86T5DZ44czifMc769VTmWxt3yI+TvMj8Bk+keRTy6PlN5nnzG/IP88g8
D0f+xnJZL/An8tVk3TH/wBMUDud1xtEzVtYvG4/Ia35o4xf5+rIOhvK8UXG0
f55BnnlmXK1h1UtcD31yNffhjY9fMl5khHDkWWd7y3pteSy8yKe7GvjjHT0m
L/mA5bfwrSUPJvHnAfn7LcvrijWr1dfnMl+8aHla66mV93eJIS/9kDC4U/Ix
y0Pg3R/8cTym/eRveeOc93kA/ciXknzP8hN4HpG3dqHnU9EfQD/zW0DyTMsn
4W3F/gB6TF7yWMsz4UHxQ4D2khctEr+Z/fA84n+Tl/7PEMwv+wjLn+GvSP+a
Hvi3sh+x/Bl+UuIkUGDTp/3yrN+vf24K1K+5d0/UW/vtd+E7htyc/868q/a7
8L6dmnfpu/+GrRfw7W9X6/S2Jw+nTpg1w+XMm45ctXwS+SwHUwQ9/da/8C8+
Des3jp4vHz71/rthcWV60hU47v8u7XX0WJ4Jzyq/a9zue+eKuObbSR6L/Bpp
l8WP4wfj6Onzj9iZp2b1DemX5jP59eJni3NnfFldF35wyuXbXdtdNr/B52oe
Th0G3rrqmprd2l22+HfGu9Vj4W1E3toLf13zduo58L1ij+Xz0j9xg2+V/OXk
3Q/OW3/B2wYzjJsx86L5GV76xJJO9zx5/AZvXVbk0c/4vVD61d7+uMYP8IHj
xgT9ccHvOuPdfhc+WORt/wg/LvptXDvzj8W/rANJg8EVjUb5/Y6d8GNzJwz1
4wQ74WdyNmngxxt2wquvD+uxuHW45V3wc6LH7Ifvld81+x07zX5nvrL7NvDp
J8938uMH++EDdT9OvMHPDV+2z48f7HfmT7vfAv9D5M1++K+6fyfe4BPFHosH
aV+6YO4+9V734s38Cf8s/9qL02deNL/B12YqdMyXxz/wwblFnvlQxmvG4Ds6
H/K7zJ/1agwqPirGPIx8b50P8Rvyf80+ec+PW+x05mHzM3oy6XzIugPX+c3a
hZ4rot/8j/xnOu/hZ+TfEPtt3DnriPULelbpvMe6Bj8k64LNb/C1Or9xvsm5
zGM93yTfIz8Zee5yo4ij5+xcz8659FyP/MrymXtDo+J48ujnXGapc57OOc5w
vS9BXRHeWuvP3HNAz+o7heucnLRwE3mj9PNfga/fnrv/r1w77B4m8k+d8257
jkPvJ1CfhD/R+jbng+g51u2nnflGzo/Cn/zu6316Pr7u/S7t5Vwpt94PwZ/U
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
su7o+aOtF846ZfEPryTrms3/zjpo/cK6kE/vUdCP8AgZX9bvnL/Mde4PI79e
71fgf/hlmU9MHj2l9L4x6xF5KeuR3dNQXjv7iHqbj1y1ug357bpyl/b48zbz
EvzDa58U9+PE7nWQb2f/ZIg/n7N/RL6VyFteAV8u+m1+hr/izM/OubDtf+F7
i99Z9sHzF6PP0ZSX0v7FfnijEnseefLR52XPnlNbfcmRjz4XU/66xgPtgu8U
e8yfzBuNJY+yeR7eWvM3fheueZ3Nt/B3NB9DP+NuY/0Sf/j+RD98e6Ltb/n+
Rz98h3DTD18leizfc85J7Xfhzb//NanfXvwPX63zP/YY/25xfd+f+N85tzU7
4WtE3sYjPLOuF9gPbyz22P6Udb+C7k/tO006XhrL+mXtdfKK6O8xqXxTXZdp
L/LuvhU+XsZF9HeXVE8z0WNx6ORj0d9XUvl3dJ3FD8i7+1b4ezKubX8KZ3/K
OQXrbNf9eXNVLnXS5jH4BsmH7ZwCPqXn/VJVPXl+F15D8nObz6mXJqyTbs2T
JqPsvYXwsVm/zvPyyC+iOHegjtrw53g5n55abvM58g9K5qvj6+G8AH7+xX3J
/PfNcl6AntHvjzjo39ukv6iv5imZffr4xacsruDvJ58b9ZXHsYd8IKHU6+x8
ED5B6oHmT9aFaTmn3fX8afEATyj7ZTuHhX98ukPyap48/oT/Lft3yyepj9V5
N926mP6El99YOF9Mf1I3m/o46tMHp5Zbvod8ZPl8b8f0p72/d8OHKWL6Ez1/
na+Sx7/XjT+pp6UaNqCg5zeLT/iatglqfelx7GH9GivnC3a+A08g5xd2P83O
C6QOb/k5/FfRb3Va+GW9z0meDM8vdlo9Fv6h3qvkd6nbJ5a6vcUD/ID6k/Wd
OHwo8RlJfRV+UeIzEjvRk/VC2J92jmP36iVuzT/IZxZ5y8fQn1zGVyR1V/gc
GV+RtBc9p8R+O/fhd9vKuDP/cy6QTevPdk9G17v2Wj+nXgpvIfFs5w7wITIu
TD914GZ63kH/wjvJeDT/wPvovXr6F/6yjGtrF3yj3m/nd6kbl9PzGvoX3kPn
H/qXcRGQ8WL9Cx8g48X6Fz3LtB/hjKMrMo5sPkF+sc5X9C/6G8h4t/6F15Xx
bv2LnqHaj3B+d6H2O36gLj1Bz+/grKe39fyR/oUPkfnf6t7w2rKORO/XND9k
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
/mT4kqHvrPTstPUFni1X8br+vszu9yovo8+7sQ+C99J9EPtK7Omr+2j8Ca9f
8cBNv15n38FR/pF+V0ju09y2PKqQ5O2230T+rO678T+8W5xIb5/7td0ztHxP
v29Lv8Ar9il0z9+nsz+F59D9O/kDPNP2+aOTeL/L/tT2Nbp/p7/g6UTe9q3w
rfq9JLm/ktXyrlayr7F9K/JXdb9PP8LHJ1la1WtvpH3/9Nl7GiH6F54qS8qX
/Haxz4WP1LoB+QP8E+mvEP2LnYu17kT/wnf8eL2dX8d+IVZ+mDKcN17SPBD5
03cTbL7v6bkUKz+MCOeH9Dvyl7VORb/Dc5xYfvOv259HtY2VT3YKv0dI3rOZ
xuTLVcmw068XEQ/w2TmfzvLrWrHzzIOTYp5fIP+a1ruIE3jzdwsd7enZGTv/
3BLOP4kf5JtofYz4gTcSPYHYeemWZ/JS5OeK/YHYeWnYfjsfQf55qQdaXMGv
pK/4t+fPyNj5anP/efbN8j676P31c0//fuL7k3iDH5H+DcXOY8P9a/kq8hcl
fkKx89hw/EQSV+RdJa60v9LXkyd+4JUiO2Xw637Eg+Vv2daPu+K1i/6FV+nZ
9pEfz/QX/JfKi+r1juF/+EHhIfwMf0P0mD/hJZu+8ZX3u1H4AV5a7AzQXng9
aZeNI/K3Lf+uG5zcG4/zdJ5Evq3sl0Pyvua7xismu7rEP9/BP+hJmaXjAn8e
wD/wmu9MvODPJx10vKBnU62Un/jnO091Xw9Pqft6viuHnkSj93bx10f8CR/3
4Zc5/Hom/oSPFB4qqvOhoz8k713N6tpj/kdPx0Ej+/jzGP6H92qS+JK/LhC3
1u/iH6s/wDtp/YHv4qGnd7rmD/x20V/wU9IvVt/jPIJ6EfUfO9fQ+g/rNfye
yFudB06dh7oNfLHWbYKaz8CrCLe8Aj5PfjeEPPWfairPPA//Rc+niEP4lRtD
Dnh5kX1Xi31BF/GPnUMhn1PPoYg3+OM3f0tUy8tDGI/wGsfLLfHr0tgP/07t
Z/6Ecw5FXFldK/2Ly7x8yb7nhZ0anyH8j/x99T/zpL2XRs+niCv4p0Wiknj2
27iG/5bs4WS/Xm15kf4u55uWFynfquP6ex3X7F8+0XFt+Y/K19VzT8t/lNfW
8Wt5jvIOMi7svA9eVM9JLc9R/qWOU8tzlOu5qvkZPkrHL/mMU/czfyLfXs9P
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
vzeD3yXfeNLm0BY/P0EPfGSRFz4O5y36fhh7/lS/05FM7/MTt3n0Pv8evZ8P
f1Pv5/+p9xawP4ncC7X6ErysnvvzvAD7mmP6vAz3/22/o8+/cC8C+2vp/UbW
F+e+TUjeL5bI7IxXN/xcgH6P87noeeCr6+XGljoZku/3RN+XTpL87ddHe1ze
f5TY7H8i5yOBnlrHIM6v6fs5f1F5eN5L4fOF0CB935e9B0Pfw9lDn8uDn9Lv
njOPkefkzj846RjPnmraLvhKed7H5it49S1Z44+LIY8/V6n8PvygvJLIB8wP
ytPI7+p7tRKbn5/XdsEZ1xmyiH8Sqf3kJxnEnwHsgcfXfsF++GrpF6uTE5+b
5R5FoKyOa8s3cp04+f2dU5b3wp9EffN0vsfZFzOfpG/yTYPvPI5+ePyV4fuW
ti+Gv7j3+KsLPXnmK+aZ54TbfAW/3Tis3+yHo5/njpl/UobCdgbWqjx8m7YX
e+D7pb2Bd3nPsManvjfbxiP235K6Zeiicqs3Sr0uMIDvtKqeuD2efb8x9n+k
79FFP/xv1c84tfxK9Y+MNe9VCs97x2O9L6hP+H1BDWLNb2EeFfu9PWE9kU30
uVra20Lf+8Rzr3buoO99aqby+OGivvcJefiv+t4n3vNpzw1FRITvA/D+KHuu
50CWtn/0i35/FDywdlPJc/2i9Vh9MuJmZf++FnrgGXfNTZ9v2WnTA087e32V
PB637wJrfyWMaBK+F2ffYdd+iYjoFL5nYu+rV35y+f75np32Xix42YntP/Hs
tPfNMg9ERFQL3y81O5UPOzf1iWen6bH61bKlhfJ6HD3MGxERzeQevjN//q3z
50Bnnsyj8yTyzG/zRb/Jw78Se0yefn9L2mXy8PPiB5Nn/sklfrb4t/d1SL/Y
+zCJkxrSvyYPzyDxYO+dox9TV42frd+BU/Z+P3i1tIMq9fF4LWdcj9VxPdAZ
p4/0PeT0S4zz3PD3snnuLMbzFGdjfgcwxrnt691jvM8tRl4Rfk8gevBzhYaZ
i/f17EQefmDy9BT9Y9hPPCwRbvkGPCB67Pk4uwcofrDn0eC5xW+x8pbUzvfF
YtUftI6B34bHee6kn4fwu5af6+/a96xVPuXNdQd9efsegcqXVHvQT9zOTpZo
pJ+HEP/4h3HE/tGeR3iwfIB/f4nfdbjtE+Hfin5rF+Nrqf6utUv9/Lr2F/rt
Hq/qt3ap/CHtR/Tb+4XUb7SLfonQeYx22fOkN8J+M3863N43CO8k+s2f9G/f
g9Xv+3UD9znKdPocJfrhf/8i8u7zjJH6PKO9V//Z/jU/W71X7SGe6cdFGs/4
gfmE+Rb9dq6dKtk7/jpI3KKnvMY/v2vPayQVefzA/DxfuLXX9umi39pF/9bR
uEI/fInGD+2y+7E6L9Eu5rGnT58u89c79MMvi59tPKKntM5j/C7y3aUf7T2N
tLeZ855G+Fe6Xrt5SCvNQxo56/hvzvsb4T/pOm7fWdD+va3v37DvICjPpe/H
YJ535sko7HHmW1t/GacPnjYNr3fELby33m+x92Qqj6ff2UGPPYeu6zvy9ly2
3t+gX5z4t7iC91P/E1dOvJkeJ65s3nDi2fQ78Wlxi/8/0fGLHid+bD3Fzj/1
XJj4xD9x42Z+Zca8gxZv8MSzsr083ePI45/VyT+5O23eQRt38K2be96Z6nH6
hX7/RbjNh/DfRI/Fib2PUfdr6GF8pRF7rH/hL4r9gf+qH/5XPRD/wBvHnbMm
Toz8xPKK1wqMj+dx/B8dn8eXbHsyMgr/R/Ohi31u+nX+b1mw3Ny4MfIreJ4u
2wfF9zj6o99TV3t5TP3RPGKZz+kXJ6+w+SRGncS3J5L+cvKWKPwTzff47bK8
lHk1o9hp8wm8mrTL/B9tZ2LfTnueOppXWx5Tv9XbS4f9bPEALyL9Evo/SYO+
sQ==
     "], {{
       {LABColor[0.676094128119322, 0.4485405917061707, 0.7359231649869302], 
        EdgeForm[None], Specularity[
         GrayLevel[1], 6], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1:eJxNnQXYFdX3/efemblTdicYmGB3YCAqYoLdyhe7wA7ELuxuRVRMxO5CsVux
G8XA7tb/+rxr8/z+z8PL2XPumTN9zt5rr73PvIP2G7hvO0mSNZskSVUuXCTJ
Oq0k6dNJko9UMUJyL9UfoPoTJO+r+u8kHyR5kOSP1eYC/f2iNlNVSbKMyv3L
JFlS/S3LfpIr1X+dJ8krqvuf9pms+o+0/YD6+VHyF5Jr9TGtTmQB9fuf6v9W
+braviW5h+Ruku+V/K3af6r2n6jtyar/SdsfSj5O8veSl9YxVlF5uI47h477
s9p+rLpTtH9Hbf7S9iyqX1ltDlObiyQP12/Xq83RKltq84vazKv6P1VOVP0M
kn+Q/Krkw3Ssn7VvT/1dpvq1VB6jfq6SfJL2v0lt5pbcR/VHq/49Xdcx6nMB
bf/LfVH5aq3rk/yx+rxO7U9S+6Ha9wHJ26qcpDbv6rff2V/ltar/RP1M1N+v
+m2PTM9B57GV+j1G7dsqf1O7G1q+xs3VZpzu1SjJx+v3LdX/QqrbTeVxqr9a
9SeofqT6u17yZvrtL/V3reRcfzup3RKqG6ryDrX/VPLb6n8rbc8heaTOP5H8
ueomcU8k76X+7pf8n875M9W/JDlT/WTJL0tuS15Bu72uffeUvLzko1T+pfaL
SL5O9UvqWDtyPuprgH6bR/Xbq1xE57m/zm8p/Z5r+yv1+Rn3SvKWanuf5H/1
+43at9Df+5KPavldGat9tpU8QO12Vz9fS35Df9fouEfr9y9Vjtdvn6rucZXH
6d6eq/3f0va1+u0ktflO5U/ankV/R2p7b/VzvtrMShudQ3/Vnaw2u6r+c9U9
oX6e19/7ku9X+ZLOYWbJU0t+Tn8zSZ5K5QLadz3te5L2fV5tXlP9rapfQf38
xnuovwmq765yNtX/xfci+QXJIySnOod3eK/VvpY8n347XfVTSf5Y9YmupZR8
BqLadCTPwzWo/mzJL0ierL8v9XeQ2tymNrO1fF8u0u/z0p/kfVX/F+eiPoeq
fgfOX/W361ifqHxTz2Mn/fa55Pcl76k2G/EuaXtt7buXtjfW9lw67t6SB0q+
Sfuur3Jt7beI5HUlryV5L92LWelT5eKq31L1m6h+g3gHeD+20vZEtXlDB9hY
9bupbhf9rSd5P7VZQvvNq2MdIHkQ75PqD1S5s/Y7VHXfad8ePMeW3+2Z9DdQ
bQ5q+9vrKXkIY53+TpX8WeJzukv9fqHyAx33YO6b5Dn1t4XaHNL2uPaV2uyl
37bRsc5S/Veq66a/rbkG1a+jcjHVHy75UP3do/bf6PeJ6nOI5GGq201tXpU8
h+SZJD8huZT8j9osquu6XXLD+6j6VXTcnPeL+yl5JpW3q806kvsyFmi7v+QZ
Vf6h9+0xHesx7rHazKK/tdXmTZVzqc1i8S4cyBiuY22o9o8ylqj9g5V/+1ry
NGq7uOSR+u0B1R+fuL6v+rmAd0zf8tQ6Xh+16a3z/15tHlCbh9RmkNrs1vbz
vrnwe7Ke2iwc70lP1e2sNru3/X78rX2f077Pat/D1GZT3h/9raf6+1T/oOpn
VPsZ9LeG2t+isrd+X13y+mqzqvp+WuPDX5KfVvun1P5WtemjNlPpWIsWfjfX
V7tTVH+y/s7Rb7PoWNPxLum3o1Q3SeX+2v8e9XMM16L7M077DOH7yL1N/SHM
N7r+T1oeW07Qvt9JPly//aI+v5d8suQj1e4slacVHk8mqn64tmfOfR/53viu
f1d5pur3k9yO73BO/X3V8n3fTdd2k87j+Mbj00cxRj2jukOYf5nDdD7ftjyO
rcl9yjwODlF/3zAXqN3u2v8u7XMC/en3PWKsvJHnFeNab8mr6u9jyXuo3YOM
lypvUN0uqetn1PFWy9z+kLgnM6rdk7rOMXxPkjfWPZxO9XvqfM5V20G6z/30
94P+LuA912+fqb9JKCTa7qd2X6pdX5VHaP9/Vf2T+t498/fO+L555W+U8eNi
1S2ouvNop/bLSO6p8uDSc9D0attbfzdJvlV1pfp5WMdainuk+psZC1X/FfO+
9rtN1/i02jzF98KziHm81O8n67pu0X6nqd3i6mOYjn2bts/W9lQqWyq/ZnyW
vK32eZRxW/IfOv8rWtY3NlL9E+p7vP5Wk3yQ9vld5bdq8436Oxe9RdsHq/4P
ld+r/hL1ebnqN9T26jqfT7XvKir/0zm9qrpXeNaSl2Ru0/n/zlyu+ntV30/y
sowrqt9a229o3yVUzqA+59DxeqnfVOfZW+VyareZ2m+s8h61P0ttN+f7Yo5V
+50Yk/W3hdpvpbKbyllV3z2+ndUlbyu5u+r/VT8v6Rxe1LHm0XZf1U+j8md0
LfV/p/r/puOxZSGVPVVepvY3qP3KarOo6j5Rm79VrqjfllK5tupv57tUm390
bn/r7xptt9Xviuq/pXJJtb1adTepzefMN9qeT+U0OrdZ1WZRbf+u/X7T3+XM
lSqnV/35kjfRPq9pu5fKXOWD2mch2qv8M77Nf+Kb5HtcSfUt7fsf80flOWFG
nfOHueeKzXXcvSvPHR+qz5ba39q2fvAb+l3MwSN0rF/RSfhWOv6mH1X5mepm
jzl67RgnmCduj7HiCcb4ymPB94zV2meY2j6s8pEYcxh77qssP6nydPVzIWOq
7tWLHes106tcim9K5a06/3ULjyHPavvlwv1PK3kt7ftDy+d/u9qfwrEqj3U/
p9Z13lC7uZivVC6p386hTe17iM7B9ZyaWafqp76XUJsZ1PYWHXcZyRej86v9
s5Xv8w+lxz/k43j2jI3oM/r9tIyHrzkDXVfl9Gqzq6qGt/097ii5u/o+Fx1D
Zd72+8AxJmjfmbS9sLZfUTlbvBtPqxyrvxkk/5z5WLwDv0jOov0Hleue0nnO
3PG78DTjKXMv46W2r658Pr1433XOf+hvbm0/nPu+HZ57jL+97Wf6bsv37zD9
9oKOdQM2Es9V5XUqr1Q/R/MNSR7EfdD+u2AfYE/p2FtLPl3lNmp/k9qMUvtM
2wNVfyJjsvYdo7+p9durKueMb/89tftUv4/X/V9R8rySv5S8ks7hdf1+h7bv
1t9jnIPKsZXP8Wo9l0Z/E3gXVL+K2r/H/dPfM3quH7Q8ZzyEHtzyvLV0zBuP
cM/U/h3JT+rv7srvOHr6STH/vsJ4EnMLuvI6hefZx7Tv8qp/WfJDzLsxdiyo
crrCOs6ajP861oZt60ObqP3otnWm6UvrFLOr7WaZdYw5JM+lvzUkNyq3V7m2
/t7XOW2lNtdJ3lp/X3T8jvToWEdBV2nrHZih9Lg4Hzps5jGQ8W5ix3PTPOh4
PPvQt57s2C5hDn5U134R42Tld/N6yderv+ViTn5KbZbVb3Or/ELP5TXJH0h+
XPK7Hevtc6l8vbC+P0fHY9irnLf6ur/yd3OfzrNQXSfzO/y06q/ku8A+q6zf
fa42w/X7qTr3l9TmWvV1F3Orylrn9AznJ/nnwt9HJXkJtX+EsVvypaXfzVvU
34Mtv/+8o4urzQOSp9PfEtjI6v9+yZd3/L00Km/GtpN8EWOR2j8h+U79LSv5
WZU3qP780vPqGPV/qOpPVD/jQ7dhTGPcmVHy1KHfzt72u8Hc/218T5zf6ZXn
4jlVXqr6y1rWPXqqz7tVnq9jXax7MYrxQuWyqd+3W1R/Q+U+uNZrOj7Hcxg3
sU9Uv5PK6yuPPRepzYHq83m1uVd/26e+Fu7jWoy/Ksdo38tVf1XLtv3Fki9V
+Z/2H6/jj5ac6e865g7uOedXuVxQ5bPq/8rUesZx2v47dJ4zK9f9jv7Qsh6F
/Xlq5b5nZfysfN2zqzyxsi42I+N65fYzq3xc53Bxy799k/leXaD6sR1/f5eq
vKnyuHulrndUvA+8H4ths6v+bNV/l/oZMH5d0vG7UPDtqk2H+Urv88h4Ty5G
jy88loxm/ImxE/v88spj2unM1R3PJ+icH7Y85uyr3wbHOMO481PhMS9Vmyvi
+bJ9Zse62xm8e5XH7FHq815tv636e3gfOx6frka/1r5vSh6nv51Sj42MfaM6
fgevUrmGjvW45JHYgx3bbf/p/i/M/VT5oK5xEcmbYAuAM6ifH1N/A6Mrj+Hn
qP4PHauJ8Xkr/T6Se4JtpPprU9uHH2CHtoyJvcH5hP1ZhK4yv/4OqIwhdVSO
qIzb3a73+SP1c0TL2ydXxrgm6rjntKxzgme9URlj2EDtD5L8W+jAX2KXco+5
N+rn9JaPMZx5TuXUKt+qfPyNtO9PanNnalzv+8w2UTfmu8r438Zq837lcfJn
nUNbbf5t+bdXK49p/dXm5crYyBu6xz+ozdjU2z9m1oU417crH+dttZlQeWz8
UX2+VPmY66mfOXXep+k8X1b5vPa9PvT1Iypfe4MdrHt/dst6+TPoKi3r5ONU
f17L1/mB6oe2jEPepXuyg8pd0bkqf6/dVJ5bGaOaH31cv22hNv9TebWOeXPL
vx1eGaP4SOd5dmVMbh70psr43nwqrwodgN8OrXxe36ifIysfvw/PVOd2gH7/
QdvHVD7faVUeWxl3HaJ374TK78vaav+hzv+M1L8dWBmXuE/37X3Vn5J6e3/V
f43NofaTdLz5JW+v+3Z05eP0Vf0hlbG3NSS/hy3Z8j5DKr+PN9W2s/9o2T4E
MwDvRR99PPe8c4LKqzLrLnz/N9TGSxZujP3ynvPOgXGCZ07RaSiP1TkPqo1n
Hlt6zETeNDHOeV3Ia3SMhySFx6LRUX+Ajru//o5ijgerQUdQfzvnxkoZm95W
3T2BsYxS/fSqX1XlHNpvTe3TX/Urd4x7/KFyN53HTuiXKl9RuxeZL1QeqLZL
q59fdG/e1e8vaXtN7TuT5MVV/6Pq11Ddrm3j8te2rc9g410tea2WbaqRbeMf
6B+/Vq7foPI5cW5gZcfr2Oskfn9uz40TD1J5ZebrZBzkuu9RubN+O0nXfCT6
q8oqt75Im1Nr35uZVQ5j3NDfCG0/pb9bYh6/T+33UR97gxs3HtdPV3lhx32v
qnte596H57sYNhY2WG0sHVx6pMrBtXHdE9CnJF8pebjk4zoek7bO/U2g33I9
PKtR8T6MzW1b75gb58devlDlDrntZsbfz2Ku30DbWzQem09rrAswxrL/UYXn
4mN1zK9iLl4fO0rnsXpineHU0nP9ltq3f8fY5xr6r9D2prxX6NT6W0HyGip7
oZO3/U7PDV6n7c0kf67fVla5tPp4RnXLqM1K2v6scrmWyhfU7yPq/3yVL6jN
Cmqzin4b1BjHOlLlF5Xr1lE5qbK93Efl2zrWc6mP8RL3H52E+9QY4z9K5dW1
sc8ekgeo7Tvqf0/G5cZ+iaMbj0/7tYyj/lD79x3Vf7/cuP1+umevpP72uzPG
gem1/C4uqvob2j4GWP0+LY8jO1cuP0BHahtHpa/rcuMtG6scWBkznKA2+2OL
q93XqntH/b+o7VX12+DMx9sDmyYzBj1A9W9q+67ABtfCFmgZY7y28PfaV/du
tszf23rabmpjtp3SOPEmLWPFV6iP1VrGE3dujF8Ow0budEHuXZh2v5BX1zm3
GCe1z5foZpLvZU5X+RY6rY61nPr6BJ1b5WoqX0dXbXv7qdTjAO/NI5Lnaxun
+lf7zhjyvG1jHOAgE8BfA3uZWLnvxbENtO/Cql9W2x9VxsRWUfmh/paWvJLK
canPk+0bcmNlm+b2rTA3MVcd0TaOt3XYJNjN2ChgNOjU6NY3lh7DwXHAXDgv
zu/gyn6ZAbqvx1f2323KGFLZfzdQ8lC1P4tjSR7ZeAztr98PLI2DbaX6IZLP
kLwZc01pzHAbydc0flf6qbyq8fi+kfYdxTut+rVVPtL2vmvwvefG2/AR4l9D
b+mdeK7nHNbke64tc15H6j05k3Ng7KzdD+eCDnhMZj1wwxh7GYPxt+B3QbdA
V2Jfxgvw5KMz27P4/vCxfqJ+Rje+7+upPF9/10peF1xWf//oWn5T27vUbim+
GR3/DtX/qvpvVX+L6hdU/R61x0fGyR1qz3/MfTszjjYeNy9V+1fi/HZV/e1q
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
             "]], Polygon3DBox[CompressedData["
1:eJwtnHngF1MXxme+6yyKZBdatAghEpWElH3fl1RIpZUShSLJFqVsoR2RpaJF
ypKUlIrQK8lSoZQ1afc+n575Y36/c+YuM9+ZO/ee85zn3Gptu17UJRcEQdti
EBT0/+lSEHTT/4VhELwq+fMkCI6W/pLKx6VBUC8Ogsoqe15lz0ufVQ6CJ/JB
cILqXKI63XTuL8nv6PxTkm9S+1jlI3TuS7XdqPN/Sv9dF4vUx9mqs7/6Wyp5
pOTH9H+y9I90Uzeq7hy1+Vf6Zzr/uso/1v8N0qvo2Fvye6rzrPoLpL8rOdS5
VlLflD5E8mJd/wuV19K5cZI76DhQ+svSX4/0e9WmSqavU/2rdNystj10/TP1
e47XNdup7CrVWyD5QpVfrfJrdVwkOVUfDfVb9lDdSdL/Ur116u8MtblT+rc6
/7PkK1X/VMnf6Po/q/wUneurtndLbyD9fyo/QfItal9bZQOk3yr5XfXxveR9
dFSUvEx9rFL5eN1fU8kLVedVtX9Nx6eS26mPouRnVeczPbtp/B7Jy9V+uuSF
Ov7kXnTPFXX9Z1RnlPTW6usR/b7v1P5XtT9bbR5U+UAdZ0p+SO1eVflFqne/
6s/S9cdLvlP1j1P9xTp3rOSRqtdL9ZdJnyr5LLXZS/ICySMk/6l7/CX7/bfr
XGcd96l8je6nia51s/o4hN+j8snSd1N5b8m/Z31cr/LtunZLnpHK2+pcT5Xd
pnPn6H4+lH6Lytbo3BzJn6r+Z+rvEJ3rpPqLdf3XpS/S9WpL/6Xo8fqozp0r
+X21+VFt99Wxh+R7Vf8ilY+V3l/yStX5Rforul5zyRN07j61HcA9Sz5MR3uV
tVb/ldX/OXwPartN51+T/K3uZ202Pu5X+Vfq40fJZ6hOE2QdG3j2qnOW5ONU
Z4Xkmjp3rOQluqdNqltNx4GS16vf5SqvrvJrpLdR/5u5N+n38v5UfiVjXfUf
kFxN5+bq3jbpXFXJrVR/o+o3k3639EN1zFf5Nuk1JP+mPg9R+f66Rh3JT6j+
HZIv0rlGkjfo3EGSl+q4Wf2XdXylthdI31fyANU5WfWvlN5Y8rMab2N0Lx+o
7JXU1/tY1ztdbV7V762s/u6RvCWbE+5WvX+y++sl/WDVn636hwV+X4PV502S
m6re++rvOelLpF8sfT666pyj9mfp+Jx3pz72llxB91RD8iuqd7vkqerzAPW9
Vuf2VfkePHPJ16i/P6SfyHhV+Sk695nkltRR2z46/srKb6Fv/b6dkvtIHq7r
P6v2fdXXdarTRPJlfP+S66tOd/WXqv4Wybep/tOq/7X+51S+UfdzrsofVP8P
qjyvcw9J7sc8LXmBjvclP1H2uxnDmFfbc9XHdj27/3T+Dcn3qU4F1V2kYzbz
ha4XSv6f6k5U+SOqN1htd9O5QZIfV53ako9VH59I/kP1qkuvpWuMVPlVuv/f
cp7ve0UeTx/pXpvyTTCH6Kii8mU6N1fyDWp/h/raqPK1jG1dv6n045nndf3b
1efa7Hl00rnX1F9N6X9JnqTyB9RmL+lfqL85kn/S+crSd0q/VnXXSz9Q+sG6
v+Hq63vmZOlbVH6Jyq9gPpPeQP33kD5YfdSQ/oHqfyx5b7U5L+cx8LLkxmr/
CeNJ52LpP2fjZYmODtLr6v4r6v6f1PnnWI8Yx2o7Qccnkm/V9Q6T3FZ1jpb8
t85tkP6b7ienNoPLHnvDdY0V0n+WvlT6T9JbSX9bxwq1baT6u+l+Hy97LDKf
f6eyROfqq6yC7v0l6ev43lT+q8pvlD5Gx0dcm/VVdbvrHurwvepcPcntdaTZ
eFmu33Kf6rzM3KB2E/R72tCv9NGqM0nyZ6r/P8n1VL+z6l7PnKfyko43i15/
hzN3MsdgI6jP11Q2t+z14nP9f1PlS/hm1b6z+qshfaLqT5FeZM6SPC17psNY
E6TPk/6C5AtVf2U2Pm5T36nOtZf8fmaDfK5js+S/1P/ZfC+qf636n69z9SV3
4fmo/Vy1eYqxqTrvFzxfMr8O1VFP5fPUZoHks3SNZqHf/Sjd/0Pqo7XqNmYt
lv6k9PnMb9LnSf9N9Q9T+5X8TukNdT/zVN5I5wqMLZWfHnquGK3ygq6/t66f
17Waqm5eeiXGhvQTGFOq947a11X75yVfrOutzuaX+9TXJdLXSD9Geje1vUj6
j9n4vlPlo9VmtuQGOjeGsaXyb/Ku/5rknM6dmPMz6Sz5Sx3TVb5Tx/66/lvq
82iVbUPW/T6h+6rP967f8Knkf3WN46SvUrspKr9N/3/K7qcD9omOgPlC9Q/B
VlJ/2/X73tTpx9R+Ttljq6jyDyU/pvJ7VP8kye+lXs/rqO632Ig6l+ieb+X9
S35b5V8kXg9/k75Gegv9H5KzzfpByffAvfCbN6isg655L3O1rjdN8hYdF6j8
OZW/r/K91N8UlQ1Vu1nq71fWBJVXUvlQvj3WO7U/nveS2j6spvKv+eZ0rqj7
P0C/7yzGq/TdVf923ofkGdiOut5d0lOVT8Feivy9YKv+wPiSfifvV/pM6aNU
pxXrt44vJf+t/q5R2za67liVl6R3UtkRqj9N+g2878weukb1v1R5Q8kvS35R
5cukf6/r/cF7kr5T/Xyg8k/yfodrdHyez+YgyReoXK84wCmox3qOTVDwb8Ye
PrW06/UGN+lPHWw5xlDec9BayXuq/tWqX1V1q0kfqf9Xqe4VzOGSn9SxSHWX
q84iyW1579n6foX0PZnD8Ud0rqbkZ3Rusep/o/pLeJe6/vkq36Tyvir/t2h5
pJ7RPZm9tkX6i9Lvl74Ke1Htn8KHiTyHMpdiIz/MWGS85D1nMney3uZ5XtJ7
q+/l2Byhz7H+3pa4/ljsLj3Prfq/VfpBodfUP9Rmna4/OPSajs3Cb/tF53qV
/d54f/oXnKeyf/kNar9f5uNgrwXMj9IHsT7oeqN06sOi1/M10v/L1o/ZzA06
nmHsF21fbi/7W35Y5xar/Q86aqivKO/1nfUeeavO3VX0fFFbekNeatk+HGs7
a3zvbL1/kmfBXKv+/2ZMquzp0DYO74zfhw15F/aezhVCvwPs5ao6rpX8beDx
fHFqew67bqnkTjr3gPS31Obton0mbGOucWfZPgK+As/0DumHSt897zUZW+7e
op/Fbjr3mMrjyGtfJ527uWibiLWONe9Rfj/jO/Qzxh7mm+Hbwae4T3r1kvui
f9b+vI7rAq/hrOU/6XngKO9k7DOfp/bF9qRLyf11/VF5z20/Sm+p/0Nz9onm
Y0ur/bCcbbrJ+tCqSX8a+1T1PlT9Hbqfy1U2hjGJb8EaKH1E3jbzwzxz6ePy
XmM7lW17s54+qrZVeV8523Rvq//qjA/pZ6veHPXfXP8fZf7XM3ir5POUD1P9
VdK7q49B0mep/J2i74v7G8ScrPIbdG68rr1Qz+AtyR3Lto3wnx/CttL1hue8
hv2h6x+ia47M2aY6OLWPTV3e4RC1PUbP6zmVfxR4PjhY5Y9LnoFPzPvGZ8h5
Tdui/vYreWyzZn2h8s90TJQc5Xx/B+kaj+fsQ1SRvJR1SuWVcv59E3X0COwz
4zvXKnmux+bH9j8KG4xvS+e+VXl93d9olS0MPP/U4XvE/mbMgE2o/gzJc/K2
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
wc9nf0P2K4M/CI+QfOCFee8JQX7J/wEnNXQR
             "]], Polygon3DBox[CompressedData["
1:eJwt1XmQz3Ucx/Fv7GlHTYhGqZYZNeSczbGOcUTYch8h1pF1H9tasTtMrta1
k2NKEzlqMZXRYcyYIjWF8QdjiBlTIyZUapJCktLjPT9/vGa/r+fn9X5/Pt/v
7/P5bO64mQNnVEuSZDKlU/PsJKmRkSSV9NE9SbKDz66RJMVCLTOTZDA+PidJ
VmYlyW7jq/k7Codiq7F92FtYJj2PbcJOYB/yG6gI+1LPP7Fj/P00Alsvdxir
4tfSi9gRuX+x03xdGon1oc/NV0a/Gzsg04TSjL9K27FNfIHcAZn5dAs7jO2m
7z3vl/uAJsq09W4nsaPe7RgVY59ZS773rc4/JTcaezbWrddCakfd+d70nudB
1Ia68MXmaOE7bucL1U/HHjJHc36yvjXpJawX7cD6UR514n8w1kHtEL7YvBV6
TcUz9KlH/a3pkMxJqi3XWW4Xvln/81geNgCbqnae2ufUfsUvpXx6mj+KV9Pn
jEw9asWfphzsHN+A8vgyWuS7FOt/Se0d/edjS7DpMj/GZuEfiW+PLcUWyo6x
lrNYbf0uYbnUju+ck3rPeN9H9WrKt6D2Wak1x9pb8gdlb+p3Ql0tasGX0gKs
VP9fZbP5WVSOFcmcx27r0xPrgN3BtsjOtJbGsX+xVbE/sAlYazoSezv2srq5
5i25+/06+tuJSrGyu79Hj+hNL2OzaJ8++6lCj0Xx7eiKNczNTH2zcj7PHN94
/jj2stp56vKxgb7Lg7EOrAx7QPYPteXYSvnl/Gy8nfG2Wam9NMPfOVhXf7tQ
G6zU3zT9Gqmd6LkOlchsUd/D+Ei8wtxb46wZextbjJ3FTmLDZBPPazJS5zjO
cyHWhk/LTO3/OAfr47cTHaZ2gbE3+Qly6zxvy0id2Ti716lKrkLuAv6d3GXa
gS3HrmK/xFpoF1YZ5xK7xi/LTr37bPNextP4rd5tWXVrw85gfc25Al8lVxK9
sHR+r9z7ckfk9uGT5abic+TG8+fk+mOfyu2SOy53Hz4ce4a2GS+gEvlJ6sbS
NM8jZb6N/SrTMM6w9/skM7WmRvwoejLWT419qyn698Sq1PSKs67HaL0aYw3U
7lFbqfZxfmbk+DpUoLZ93EG01vhe7IL6ATLp2BTjTSJnnnHYF3p1x2pinbAx
cSeaJ9/z39TM2FX+otq9+p2Sq4+/EPda/CbWdYjfQ5PiPtBvlJrH5O6laTmp
Oybumrp8Ok3BBtGNuP/UbdajUP8h2G3soMw75jqL9cDexbrRcLmh5jyGnzB+
Ua6f+sHYcewU9hM2LO72OAfU3Lzr1HbECvifqRG2Ou4IrBf/V/xf8Pwattte
usl3zUndwXEXN7T+ZvwF/GG1q7CW8l35TeZdYt6d5u2NjZX7Db/heaXcTv2u
8IuzU+e7TO4qXiv+d1Ad/ZbxTeTz+b7UxXMi19bYLX5D1Mcei/8ThjbyrczT
LSt1t8ed0povwovjW8Z5wW8aHx/7Oe4B7B9ssNzoGqlv/gp2HRuIrVH7OjYi
zhHl8pvjvGFj+QzZpnwVrfA8Cutj3m38G7Qx9if2Hz0R54oq4/fir1F9fkb8
lt5rq/qvjbWyjo5U6D1z8SLrLZf5H6p9CdI=
             "]]},
           Annotation[#, "Charting`Private`Tag$48731#1"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[
            0.5179528003031847, 0.36076846304904076`, 
             0.20873305034080086`]}, {"Directional", 
            RGBColor[
            0.3974410003789809, 0.20096057881130092`, 0.010916312926001058`], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[
            0.3974410003789809, 0.20096057881130092`, 0.010916312926001058`], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[
            0.3974410003789809, 0.20096057881130092`, 0.010916312926001058`], 
            ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0slLlWEYhvHH6aQN5krMSIvCVvYXFBlYYg6RmMHJCnOIRGtb9Adku6A0
oVHFI7QLTDqkRhitXDQ7NKnQJlpEtGvj70M459zXdT/v+41nz4UrLZdzIiLr
eyc/IuEyWQ96CyNK+Nu8iD5ciRdwPz6AFzdHrPFDeBn/xI14Bf/GZ/Cgtb1y
TF6T//QZPID/4wl8F6ecMyN/2VuEn+E/uAS/xjm4KTdikn/gzbKR3y+I+Mh3
yhO83PGmzD7pWuRJ3QOzz/yhXEjWbopo1T83X+SnZBvPyiW+y/w0X8Zp+ci+
L7hStvMX1n1NZvIcf6z/xkfkd7nP/g79jPkPflZ28lm5wqvMu/lLvsrPyy7+
zrW/56V8Ds/hec8oiyfxLB6XbzyLaTyEX+EpfAOPW3dVjspL8q/+Nk7jDL6J
G/Awvo4P4qf2D/Fq/ATfwhW4vSjiov/APdeyne+VPbzOPRbzAtnFm63fxneb
d/Bj+q38qNySvIOU+9c3WOfwUWFdmg9Lp4hqz6LfvbucaNMfsU8V+bI1OZ99
qeSdJe+S1+h94rAfVdQZNulrrfOJHcpa3XHdIHbo2O+APbkb/+91XZBYrw==

         "]]}, 
       {GrayLevel[0.3], Line3DBox[CompressedData["
1:eJwVzEsugwEUhuHTtH//S5U1WAA1p2bGmt8llImakbi007IUpDswcdmEiGtb
JJbiMXjznvN9J2e+d1qeVCKixFEWsZ5HdDBKIqpFRNKIqKNmHvAdXtwtc/U/
x4Lul6/5VXfFB/YhSr/eZImsZ7/Ahizld3nGZ7oxn/Mi2vjQ1flevun+yfwp
O8aWfRtruhFS3Qw3kZlzfsDY7QoXaKClu00jJvIb844fu5jac/uhm0t0ZbP8
JZ/jvm7CA17CKr51BT/K99w/m39k++Y/PaEmbA==
         "]], Line3DBox[CompressedData["
1:eJwVy0kyA1AUheGbSYoERbAATYiNxEyTKmWEEgQljR1gDyyAIEi2krID5sJA
3w58Gfz1n3PefWPFWqGaiIgllHsi2qmID17tjcinI46xIi8i7S3p7ZnX9Bf+
1M/40d04JnCqz/EBiu7u3KzzvH6ITXmQh9DnNsMP2LDX9Uk5iy39gr/8L3Wz
t0uc4xbf9h37rJsTbMvL6Pf2irrtjXdt7/zj/oqf7FOYRkP/tZfd3PMeL9iP
UJWHeQQD7ka5g4r9Ws/JM6jpDf7zf19uemvhBv8lCS/k
         "]], Line3DBox[CompressedData["
1:eJwVzksuA1AYhuG/VFADttCFiLsw03YDjWET1wghFdJUiAXoBqQzvTDCItyK
abVpd9HyGLz5v/f7z8k56c2d7HYiIjawNRHxlooYmPuTEXPyzZQeezyPWXkN
t3i3Hzp7oH8cj6jxO3wgY1/Ckd08X8ChnDFf9L/unfC2Oa170h3zH97iPR78
FIt8CUU5aybMcyzLee+eyYX/d9xZRxWfdiO6EnZ5BQ1dHV8Y1V9gRV5FWc6Z
r84l5St0/GVG96y75F3+zft8jF/jnj+giT+uZC4S
         "]], Line3DBox[CompressedData["
1:eJwV0Esug2EUBuBjgF5Qd6amLm11ARqWIOreiQW06F0TiTSRiA1Qq2LEIrQT
1anH4Mmb857z/YN/46p6WJmIiBLdRMRXKmI9GfHMGm/piBZ3dgW5y5iOedX+
iRX6urK3bf2lXNY9ssSFuaU/lx/uFnU9Fmjqh7od9tnmgIa+KX+Zd/dAhjPf
qNudyjnzPbO8/r+hZpeXOUbcmmfsu6R50Z14e6M/lildm+9J/8B8rT+S7+6S
+gYJqvqBbos9NilS0dflD9PuakyRNX/6zh8aJSXw
         "]], Line3DBox[CompressedData["
1:eJwNy0suAwAUheFrIPFYQb2qXl2AhUhaplSrUzbgXW9KW4SkBiSVCHZTJqpt
mNhCh77Bn3v+c+9N5Tcy630RsYDTgYjuUER6MOIWcyjyz+GIE7tn3sA7P+az
8g3++BI6bo/0bXNGf41prPFDfcFcdHeOmn4KB/o3/iQ/osR/eUquYhJ5f/v6
VTPJK5hAjn+43bN74HW88l0+Ll+h1x/x7W5H1zLHdJdoustiRbdtt2xm+BnK
9qPY0r/we/kOm/yHj8gXSGCef/n9BzA7LBQ=
         "]], 
        Line3DBox[{2195, 1011, 2471, 2350, 2973, 2194, 2470, 2578, 859, 1187, 
         1186, 2741, 3065, 1263, 2193, 2349, 2467, 2348, 2192, 2904, 2957, 
         2466, 858, 1185, 1184, 2807, 1069, 2191, 3007, 2347, 2463, 1008, 
         2190, 1007, 2462, 2346, 2972, 2189, 2461, 2577, 857, 1183, 1182, 
         2740, 3064, 1262, 2188, 2345, 2458, 2985, 2903, 2187, 2902, 2956, 
         2457, 856, 1181, 1180}], 
        Line3DBox[{106, 1386, 107, 647, 1387, 108, 648, 1388, 109, 1389, 110, 
         1857, 649, 111, 1858, 650, 112, 1390, 113, 1391, 114, 652, 1392, 115,
          653, 1393, 116, 1394, 117, 1860, 654, 118, 1861, 655, 119, 1395, 
         120}], Line3DBox[CompressedData["
1:eJwV0DtOQmEUReFDY0RLFdCOIfhiHMYhGLHERg2otW98JCqggI9KUSyx0lDL
DIyD8fuLlX32OpeTyy2uba5WMhGxgpvxiH42YjAR8TgWca1vmbcxj8pkxC92
zLd2B/IQUzjn19Hgy/IL0/yLe01uWf9BFQv8MY7QsjuR3/ypnEHenMOdXcN7
5LhXd+71D/mp9/m2XjPvYhH7+PO7PdmxO5P1dA8X/Aa6fM+NAvcmH/QSP0IN
S+nZ9H/SN7C7lEP+Ss4mzAU82XW9wxz37s6z/g+ZECwA
         "]], Line3DBox[CompressedData["
1:eJwVzzsuhGEYhuFH4bwDhsQimNkBncQSNGgIzWhosBLUiNMMpqDEDkRBGGda
Z66/uHO/z3tIvm9gfGZsuiXJKFY7ko3OZAtHrckm93QnvQVdyRwf48Zemd/1
PjCIs/bkVr+mnjJbwo77pt42T8jL2FV/2rnT/+IqLvTneQjDuDcr8UlbcsUP
8hr23NbQ8LZ9LrnrK7DzXeyrH+1V+Ef+RRmz8jmezOryQfE/PMuHPGm2gob6
z/xFP/KC+pIXuYIRvJr186m3XfObvI5/uMU2Og==
         "]], 
        Line3DBox[{2214, 1013, 2495, 2890, 2974, 2494, 2482, 2591, 2062}], 
        Line3DBox[CompressedData["
1:eJwVzjtSgkEQReE2UZEtGAhL8AHkkqiglrERgRDBOlgJkeUWLPBBpCgo4oNE
EUhFc78/ONX3TPf0TKbSOKkvRUQJrdWIz7WIzVTEPfbk6krEnXyJ3bQ5nONL
b8tZD89mOryNCU71m3jU2+cHeJDP1PXliIH8460M75jr8wX/5jO+nexEiZfx
JFfVHfUFh3LNm0O5i6I7ZVxgqpdzNkowc82vkr3IO3vDkXyMV7mmbvjTh/zr
D9lk3p53/sfnfM4LfIxb3sUN/gFWvjNu
         "]], 
        Line3DBox[{1030, 296, 2092, 1235, 1234, 3058, 2216, 297, 1767, 533}], 
        Line3DBox[{958, 305, 2140, 1277, 1276, 3067, 2219, 304, 1774, 543, 
         303, 541, 1773, 302, 2218, 3059, 1237, 1238, 2095, 301, 538, 300, 
         2131, 1272, 1271, 3066, 2217, 299, 1769, 535, 298, 1572, 298}], 
        Line3DBox[{2233, 2799, 2375, 2536, 2374, 2671, 3031, 2232, 2552, 2551,
          2997, 2231, 2373, 2535, 1586, 2798, 2230, 2797, 2372, 2534, 2371, 
         2670, 2229, 2669, 1585, 2533, 2370, 2228, 2996, 2548, 2547, 2227, 
         3044, 2369, 2532, 2368, 2668, 2226, 2667, 2367, 2531, 2366, 1947, 
         2225, 2543, 2542, 2995, 2224, 2365, 2530, 1582, 2796, 2223, 2795, 
         2364, 2529, 3030, 2909, 2666, 2222, 2665, 1579, 2528, 2363, 2221, 
         2993, 2539, 2538, 2220, 3043, 2362, 2527, 2361, 2868, 2794}], 
        Line3DBox[{2243, 1047, 2554, 2382, 2977, 2242, 2553, 2596, 885, 1203, 
         1202, 2762, 3069, 1283, 2241, 2381, 2550, 2380, 2240, 2912, 2961, 
         2549, 884, 1201, 1200, 2818, 1099, 2239, 3016, 2379, 2546, 1044, 
         2238, 1043, 2545, 2378, 2976, 2237, 2544, 2595, 883, 1199, 1198, 
         2761, 3068, 1282, 2236, 2377, 2541, 2994, 2911, 2235, 2910, 2960, 
         2540, 882, 1197, 1196}], Line3DBox[CompressedData["
1:eJwVzjlSglEQReHGRITIMkcJFKcNAC6CcgmGSkmugfMGQBlEdsMgMqgb0IWA
w/cHp273ufW6Xv6kdnyeiogKPtMRf2sRh5mI9dWID/tWNiKPA66HsflFvuue
ZRdHuOTnKCWp+3Vnn/+RM3uVb2CP66CNKX8vv/kHWcYdbjHR5fxhal7Bm33p
1q45w4+T3rtNFLgWRuamfNU9yieUcMHPUMRIt3Bnhx/azzDkTmUd23wDdQz4
G/nF15L35mtcoa/b8I+JOZDCP0NGLjU=
         "]], 
        Line3DBox[{2753, 951, 2509, 2353, 2992, 2508, 1233, 2752, 1165, 1329, 
         1164, 2507, 2952, 2907, 2505, 2289, 2506, 2352, 2750, 1232, 3057, 
         2751, 1093, 1301, 1092, 2592, 2489, 2502, 2975, 2891, 2503, 1016, 
         2749, 946, 2501, 2351, 2990, 2500, 1231, 2748, 1163, 1328, 1162, 
         2499, 2951, 2906, 2497, 2288, 2498, 2950, 2905, 2746, 1230, 3056, 
         2747, 1091, 1300, 1090}], 
        Line3DBox[{2784, 1261, 2454, 2344, 3004, 2186, 1065, 2806, 2072}], 
        Line3DBox[{2800, 1281, 2537, 2376, 3013, 2234, 1095, 2817, 2073}]}, 
       {GrayLevel[0.3], Line3DBox[CompressedData["
1:eJwVziFIQ1EchfH/A92CoHFoE41aFSyrCoOh2WQzuCVdEcUNBmsTDVpsBsHk
ijBnFEwOxKFg0yCyLakrCv4WDt85373c96Y3imuFJCJWJTsasZyKuExHrODu
WEQOn/kG94L73DrXtd/sa3zHMt/TN53tYI/b1vtYskv6Hj6698Md2IPhe1xZ
v+ADDyWRJb7FHenncixb7jfx3tkNVpzf4ri0uQmscg/4a0/iE05hjf/TX/U6
zuCHzA6/aX/iCXbcm9O/ZF5OuW+84hdwxF7EPN5xKcxIWs783z/0GTB/
         "]], Line3DBox[CompressedData["
1:eJwVzj1LgmEchfG/Sha65FbY0pBDQ6211VghgVuEQ0XgIIVLPA2CQ9DQVkvf
oLDPIEhj0MtchFNCNGS0KDT0czhc5zr3c9888/vHlaNURGzL2kTEZjZicTJi
C5v5iDK+2nfxDVu2qv6h1/CZ9/WGO3We4De/tp/wgX5qS/QfHPIujvAeN6Zs
vk07/+UZ3MEH24GzG57DW1y3t7Ejd3Lmmy5Oy5MU5Nz2gsXx/8qcXLjXw0tc
wE8pyRX/wpT3l/CdL2MP92x/3lrhGX0Vq/ZH2yGf0Qs4i0X5B4lNLAQ=
         "]], 
        Line3DBox[{839, 838, 1835, 808, 3032, 1879, 810, 1843, 3050, 1135, 
         1972, 1642, 1845, 3002, 1643, 1361, 2105, 3061, 2106, 1369, 1667, 
         2986, 1985, 1668, 1847, 857, 1685, 1067, 1851, 3006, 862, 1705, 1076,
          1858, 869, 1727, 818, 3035, 1883, 822, 1864, 1163, 2001, 1757, 1866,
          3011, 1758, 1411, 2129, 3066, 2130, 1419, 1782, 2995, 2014, 1783, 
         1868, 883, 1800, 1097, 1872, 3015, 890, 1818, 1108, 1109}], 
        Line3DBox[CompressedData["
1:eJwVzb8zAnAYx/HHnURt5hrabZqUXIuF01GycddeZps4/gRC7iw2ZzXrP+CM
DS2pwdmQxfUyvO/zed7P90eucbjTmomILZQTci5iKRnxlI6o6EP9HSPsm+/5
vnMH+vJ8RB6fdkN+xDf5IreKK64g11DCkd2xs298W56ZT+UJzvVZdO0uZOL/
Hf5SPqCDlvef5Trfk1/yGz94MT+6uyhfseG/TfzZjfksN0CN20UVe6jjg792
7gYT/VZ28auv4M79BXNB35YpZJBGFlMEuiuU
         "]], 
        Line3DBox[{8, 2155, 23, 907, 2724, 38, 387, 2428, 53, 2164, 403, 68, 
         2178, 421, 83, 2190, 1006, 98, 2203, 113, 2212, 128, 945, 2749, 143, 
         522, 2517, 158, 538, 173, 2226, 556, 188, 2238, 1042, 203, 2250, 
         218}], Line3DBox[{1349, 350, 2393, 352, 233, 2412, 375, 243, 2437, 
         393, 2438, 253, 409, 2451, 263, 428, 2467, 273, 643, 2584, 446, 1394,
          489, 2492, 491, 283, 2506, 510, 293, 2523, 528, 303, 544, 2534, 313,
          563, 2550, 323, 675, 2602, 581, 1441}], Line3DBox[CompressedData["
1:eJwVzTFLglEchfF/Umm4BbaW0lBb5F6LNDRF2eLgoNGYEG1K4BA0tdXQtzDq
I5SBIE01JpGEDQXWEij0c3h4zjnvvffNVmq7R1MRsYOtmYi92Yi1ZESRT9MR
+/xqr3KPm7YDeSDX+En/lE/cOdbrPNSv7XX9R27YGvKQP+wj27085jZvpyL+
7ClnfvU5LnFn8i/fWnqab7hgv+UH3OHMmUfO4BkLOLe98CLesIQL9/p8ySv8
hVVc6d+c8P765Lye53eu2Mbe2tCn5U0u27u2Qz0rz3OOl/EPf1guUw==
         "]], 
        Line3DBox[{846, 845, 1841, 809, 3033, 1880, 812, 1844, 3051, 1137, 
         1974, 1648, 1846, 3003, 1649, 1365, 2114, 3063, 2115, 1373, 1674, 
         2988, 1990, 1675, 1848, 859, 1692, 1071, 1854, 3008, 865, 1715, 1081,
          1861, 873, 1735, 821, 3037, 1884, 824, 1865, 1165, 2003, 1763, 1867,
          3012, 1764, 1415, 2138, 3067, 2139, 1423, 1789, 2997, 2019, 1790, 
         1869, 885, 1807, 1101, 1875, 3017, 896, 1827, 1116, 1117}], 
        Line3DBox[CompressedData["
1:eJwVzitPgmEYBuDHoDIpajET5AewaVU29bMom2NQ8DA3jRLIRg9Bf4EDwUIl
ufkTsDs1UhiHYkSLXIRr9/Pc7/u9kDmvHl3NRUSBZD6itBCRW4x4S0eUzQPz
kBEX9ra+596leSMVscmPs75+rK/pd3V7POl25D4J185u3P3Q38oH+72849G8
RN1ZXabZ0jfkK8/UvN+Vif5dTuQvf3zZO75dk98c+L1DgqE+o+tzbD+hwhmn
s/8/e98bn+415b/9RbYItu0tZ8vmvLkoV1hnlSxTPbQsGg==
         "]], Line3DBox[CompressedData["
1:eJwVzyFLQ2EUgOFjcA607Q+4IBOZYSCoYBCTRSfChklBBoOFzWAyGdVkEJOM
IWJYMAkaxjRsIAwWDAZdGf6FZfG54eE7573fvXCzx439+lRE7HA3HfFJaSYi
w615SCEdsWvvz0aspCKutQ9G2g+/+pJ+ofVYdj/PHkXOtXeq7n67d+W85Ezr
0vT+QJ/j1N7h1fxCLZnZdL9lr5ifWfDdda3j3T/7IU+8aV3G+sRepk3W/Xkm
+ppzNfkn/ZGj5F/1qu+fmBts6w/c6Af6l3mDexY939Jyzn+XzStv
         "]], Line3DBox[CompressedData["
1:eJwNzjFLwlEUhvETYQbRGkEtuRQ0t7qF0BDR1FgOgRK1VFOCOIqU/Jda2sJF
FAki7BOEDSJGrtLi4hBEc/6Gh/e8z733cDfyF4fncxGxj8dUxBAr6YgUkqWI
B72PeX1nIaLOJXoPv/o27p1V9aIsYMJlcGeu8CP5hU+s8jfc1mLEj12bss8v
89f8h7mHdzS4M66LJ3OCW29O9RfU9X9Z445lB2XuT1a5kh1H5rw8waWzAT/l
rvQD+Sa7eMW3vod1f5q6tyaf+RGXRds85luyiV37cpgBlrMu9g==
         "]], Line3DBox[CompressedData["
1:eJwVzzFLgmEUhuHToAmO7kEUbZU4F2SNEsQ3RDWZi05+oENTW6NO0dAkFEGD
DS0NQQgZErQEuQoa/YaGpi6Hm/Ocm+e88C7X0qS5EBH76GUixjhcjFjCtfyJ
Ui4isb/nI7ayEZfcB2bcFD98ke9wIxT1N3GMI1xwr2jozvS6Zgfn3AA99198
AWf2F7zJQ6TyM/b0H+x1+Qlr3t3mBm6z/Cn3OL/jhvjm/+wn6GNVfwW/fNnc
mf+Jv0dVv+mNttlChbvDlW6Vn8i7uMUNt6FzwK+b/9r8K8c=
         "]], 
        Line3DBox[{1211, 894, 1823, 831, 3039, 1434, 728, 1804, 1200, 1428, 
         1484, 1787, 2996, 1786, 1421, 1479, 3059, 2094, 1413, 1475, 2991, 
         2047, 1749, 1406, 1092, 1748, 878, 1400, 3010, 1086, 1733, 870, 1392,
          1077, 1710, 820, 3036, 1384, 711, 1689, 1184, 1378, 1458, 1672, 
         2987, 1671, 1371, 1453, 3055, 2082, 1363, 1449, 2982, 2031, 1634, 
         1356, 1062, 2979, 1633, 852, 1347, 3000, 1127, 1839, 841, 1054}], 
        Line3DBox[CompressedData["
1:eJwVzrFKAmAUhuHjkAaRU6tSU9TWBbi1RiSNTdoSidGYS0sIISpRIShId6AR
0WDdgQYKQjk0tzg419DT8PKd7/1/DmejcJYvJyJiHw9LEVOspyLSuF2J6Ohj
rOq5ZMQNd6+P8KvvoOutoZfkKebcJu7MVX4mP/GBLH/JbS9HLOzakhN+jb/g
h9y7PsIQff6cH6Bn7qDpz4n+graeQp0r6k+41n9kjbuy48h8LIuoeJvwC66i
H8o3+YoWP5Df3B6ybptzGfnMf3G7ePy/Cz0c2JfHH9EqL98=
         "]], Line3DBox[CompressedData["
1:eJwV0CtLw1EcxvHfhN3wCm5eVsQovgaTIpgGFtmKIMwL4kwmQTFaFJNZN/1v
E5EVQduCQdA3YPANCIKrFj+GL+d5zvM95cxu7K/WUxFRwVIm4iYbkc5FLMpz
8ri8hQIeByMW0hG37ov6MqeCjJzFiq2qf9mb3EQvY8b2rd/JazjitPRj54O+
jinOmX6OmvebqLn/4DXkK/fXyPG2kceuPbFNyA3bE4bkHQyj5+0Bp8WZ1J/t
bxiRR3Foe9d/7ffcnn6CeVtff5FP8cPp6n3nq36BaU7KuwHsoY5L95+8plz4
/yO0McbtOEvOP+H9LCw=
         "]]}, {}, {}}},
     VertexNormals->CompressedData["
1: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
nyZZj+LjpuFXbvD5vM6d/sjyJbkd9sWOz/vozbP3fL7o358urWT6Uv0afeN1
Py960WFeT9vOOne+kOG0007H+/F6ejO/7WImR5+22WHO/7sauQ5TuH7PflGt
eb159HTmTF5/UrME7v27KmICwz9kx9zKW+oxPKB4u+o+xwNXytjncb/X/pU7
kefRaWcz7nL//EE8HBfxQGQ8hGHeTDEvqYl5i4YbmvF1TcuutYDHV1jFodv5
uhbr1SvP7dti9S7flun7+u21XcNS6wqp9/sCW5dCrmsz/DZW+I2mw28prdtO
53hejwy/yOvviaK6v/i6no47dJvhHDJ/3+UO9dm6ElNuNL7M1lX0dbkHX1fI
vv6POG6c0GloNY5btL+JcU8xTsZg3HS80GMp9JA46PFf9OBIY6bXglzpXY/P
Yy1wo5Qfj3ml/A03x3o8X7+9EF6fxTV5vKRNAPen3N+bYn+p3N+l8M8m4R8q
/XNiaWDVukzvdtcZaXy/QuYI/CblXTX86a212onvx6yLNuZcz+dY7d58vBj7
7i72nQzEvl/FvlcX+07kvlezE/LbIS/j5ADs2SHsIdIeKb9BI66arLWN5Odt
1tAa+xYz/d3zPPK4fhkPGzTWmwH/hME/CfBPucXC/6OF/+ks+F/KB+O8SHkj
/cseHJ+b1lm4jeO7Ny0ehnD9zxAnM7G/j7FfMh52I05kPJhDT1foeQY9Dy3F
vUmgj7g3sdwt7k1knJjCThknLsgPvy3V84mM/2biXJfEf1P4bQT81hV+k/3O
u6dFY1m/o5D9jowTN419yQHOvKOBM+V5r6ax7zIeKmvkgUOIq0mIqwLE1abp
4p7oU6C459qwRdwTecEed8RtKOz5i3wSoFFfpB8uijxQkt/u4BzF4Bw9wjmS
foi0NR9fuu+TcTIY51TGyaQFzp3uMD88Cf1pxOtR3KTMmtwPMj8EIQ/I/FCE
PPNdIfKMP/LMNOT/kcj/sr4PRL6agHwl8/w31J31qDuy7muNEHnSGHkyFHnS
Sr2Ol9SvL//Iwwnq73JL3tl6I/8/FPmfyPyvi7qsp1GXD0M+VqNe1IS8rkZ9
v478n4G6I/N/c9T34n7qeGMc6p0N6t0N1Du53pmiXpfglo44L8Wop+9wXo4D
/7QB/jEB/knDftUQdYHIumCG/ZoHPCbrddcTou7nou5fR91fDlznBFwncfJk
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
OZoy/y0xx/3Ue3E/RRJwP2Uz9tgYLm/RxyN6MZMf8WTeTy6/BPfpRNynk+q4
T3+G9xJXxHsJYoL3EnfV3wWVvJ8fv1H1/RodmX3r9gYLvwhtfL/W60XBx5pl
s+mSgvEFMSuiaN8Olkd4nNjjvruhuO8m8rsYU7xPuCHeJxD5nUsA+O0QwW/T
NuC3H64R81q+iWi64MBR5Y4lYt6dKRWD+bzn6ozp/JDNe6WtmDcA70Nui/ch
ZCTeh5gCPycK/EycgZ+v4x2Fo3hHQcrhHUVL4NXXAq8ST+DVlvHivYf17k+s
Dp5Wnr4l6mDx+PWNOR7WG1WzVxWGY9u161DI+6k8L/HdQWv3oWfM9C8oPxeI
erf/bua7c6wvOPdyUl+t1bE0fIZhBO8jOuGd2CvxTozId2I26B87iv6RyP7x
Id6DGYj3YLQ/3oPdU+8rqewrq6u/e6fyPiIe7/qcNP7e5ga871or3ncR+b5L
F31lsOgriewrb+Edl7N4x0XlO65z6n0llX3lOtyDJIp7ECrvQQLw7q6DeHdH
5bu7wGPifZqJd9lkJfP/igrifZrCRj+V58HG0WtbrmX6y5WJf8/XK9/NBol7
NDId92jyHWmhuNcj8l5PvqPOEe8/qXxHHd6jY4PHymx6f9Xpdgvyb9PcwZ08
+fmS742ninezVL43DluespqdR0qbLy9m55cO31X5E5c3w7vEveJdIr2Fd4ke
WG9frFd+Z/FU/T605O9AXuui+h6clFu/5+d6Cz/DDvge/NS4ZDO9stnkrOk4
c3YeSXTK0Nn8XMh38hbi/SeV7z8f/mPfC3HfelncixE93Iv1aCvmtd716/a8
A0cVIc3EvBVH5dfg824ZZbbjAZvXJ1XMG4l42Id4kN+V3AOfYCH4BCp5pzjE
M0E8y+8vxoIPGSv4ECp5niDEw2ARDwoZDxNb/jpgzPlnEnq7MutnyYLmkfw8
No4R7+twHhXyPF69pZt3gvXvf2/3smLnkSzdOymRn8cxeAeVJN5BUfl9mR76
zUTRb1Il+s1LyCfLkE+qIJ8YoZ8tEnwskf1sFO7HV4j7cSLfdw1BnozRyJM7
8D5NT7xPo+3wPu0m+vSNok+nsk8/inx4CflwLPLhEfADLQQ/QDaCH5iMe3lH
cS9PWuNe/hXqxTmNeqGHfGgr8qEiEPmw0PgddWbnvU2tp2FrOY/UeEVXrn8t
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
QfIC/eB3uw/hq5j9v7ePzDjB5r2w9X0Nrucq+Lo+4Ou+gK/rBL9p11L5jc6G
38aDD/wOPnAV+ECDFWEDfHLi6fr6IzMqTnpBWpvvbDJ1Yh5JPDxkyrGceNLM
I9CBjdNrP6KG8HH5+6faWsvVfte1m7ma/VTa/+204IvsBV9EJV/0CHxmQ/CZ
jcBnXvgHLxp1M9Hel9nZs6xubW7nJ//Cpdwe/Vcz9/sxOwNX2FyswOyMN213
gI8XhanFA92OeFi4T43vomXAd90Af7sO/O0P8LeF4IGjwAN3AA+8oO3j89uX
rFeGuh98Pq9WNnkc5X0pe0EeeRdoiT6lQK1P0e3YYNI2Jr/i7Iej82tl0yOb
zbpyefl7ptpaHq9L/w7FafDVy8BXXwRfHQPeewZ47/7gvctDv4PQT7yhfzXs
PCfspBmwsyn49obg21uBb98M3n4FePtV4O0twdsMFrwNkbxNTJ/7S6703qlc
/iQlyEg/l4xpMiIrpsobcvDdEtcAtl/Rug0c2L6QfWku+/m+7NXod2QfNBu/
L6altVztd1En/oP/6RqjxtdRyde5XH8+x5/Fw75joek8HkINRi7h817FvUYv
jXsNB3X9ROof/L2uzwMnW8WZNLEup0ZiXYHu44aweKOJnSwUPA7XbqtrwvVP
v6fmHxoB//RwEfxkG8FP0lDwk3qmd9qyeCbbQwr9+Pl6lZPdiOtZiXuc87jH
KYt7HG2tSmrv1X/jPbmN3YYq1wyOKv2O17rQlOWTHRlZBTyfNKhf28qO5YEJ
1aZWYnmDeJ70rMnzwH/9l4da//XgZ+Ygls/ppPVvT4TevUmG7f+9ledz+Xt/
2lpaqt8zPYPf+5PjLTR+5/R1ZO601fZuivjTKnuo41Nhz6Wv2w/xPDZ/z13K
89gyxXtVPvQC33hIg2/UB585RfCZdAH4zJrnvSy5/odCP3GA/i5xZRN5vu1Y
o4cDz7czn5h04fpdvQ+vNufrmnSjK6tTJGvC8l98XdUCG+hyv/kKv1HptzWH
V1fm9eLCtmNdeL1YYHPEkOv5/VnwpUrwpd3Al9YDT7tF8LS0OXhaya/uFfJE
8qsMh6i+01yl8fchl3fueN+m2XFlR99fdm1axhKfphlz7w7hOP+K6jvWevje
0wnfe6bTI2mxp7JolFe/AP81UaSVw9ZRvI7LfWH4RG1f5oE3nix4Yyp54/W7
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
fq/0S4eDntPwn6X/WR/zj/0w7ynnH3PhP2yA/yDzlie085xU5jlbwK97C7/u
GPy6IvilteHX6cOvs0E8skvEI8QN8chcxCPGIh4hLRCPXII/aQh/MhH+ZAvM
Z13AfFZ5zGetgL86Df7qdfirp+CvLoA//AT+6lngN4I//Ar4ZbzjKeIdIueh
shDv6Ih4hwxFvCP92Irww3WxXwfMf0Vg3m0A5r/coYdmQg+p1ENX7TkRDVxH
VeW3fYZmOBdHxLmgp3AuegJ+VAFn5+K3/Xu9ELf+I+JWKuPWYuTfWoq4lVLE
rbmY90kU8TUtRnxti/h6oYivqczL1UA8HoL1Mh73xPoZWL8J62UcbaegR8bR
TRT0yPm1C5CXjE+jIK+GkJc55GUKPfSDHrpDD1tCD8dDD1tDDztUTL2yLzWR
rBv0ePsj/Rfk+Lvi1ZxvnQD/VwE3OqTfrXe5Z/RJ68uLOf9npgn+1wY8XAE/
aVIwfi/Dox8bYxLK8KgyBJ7TgOsp4OMMrvQxYXgq2Nu943hevRZ4JgBeXgFn
+vM6r+NMs7vRH27wdz1pTkJd/i6iSlXuTUl4AOC/fl3M/8zgBxa4uXL4TV/T
/mK970cO9/4/uLz3n6n9gXyNPyDWe4n19IZmvXVJ/PQ/PIKeQEEPvaOhMzCJ
wyngdwFfjPs3Qty/5Dju3y24d34KP4pew73zAPNuNph3u4B5t0OYy/seKeby
7mMuLxhz8eaYE58DO9kadjsec+5psNsvMP/YFvOPjph/XII5zeWY0xyJOc22
sA8xmA8dDPtQC/btIuZbpX0b9cD+/RPmDwwZ8CuP+2/L1wwczP0Bxs/Xv5Oj
SnVY/e5ELbzL8QzvTnzvM6V9FMPzl9nFexxP3wsdZwk8qj/It+WiEu9sEPnO
xvUWxa2eMn/yV0Hrx9w/yR12dTbH06nwg91zBn+W89KLw2esObyFwzujL91Z
8T8s/uifr4P+eTnv1gX9+f+ib1/O2d1CXX4h6vK9UJdP0O6/Jemo+y/HXMlT
xXzKfsynVFfMxSxGf+Nq9O9tRv9JOPpttqFfUfbbzMVcQPWDYi5Azpk+nZcZ
s/NDArG2tZ0c/TWGRrXOGnPdO5s8GNG8uyODrxq+93AUg9faFfk3h9dCfWQ1
5iaiUB+xwfuceuJ9TtIE73MWF4n6wlNFfSEO73BWwP+n2+MdzrXAUyT+95y2
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
NywQ
      "]], {}},
   Axes->True,
   AxesLabel->{
     FormBox[
      TagBox["x", HoldForm], TraditionalForm], 
     FormBox[
      TagBox["y", HoldForm], TraditionalForm], 
     FormBox[
      TagBox[
       TemplateBox[{0}, "Spacer1"], HoldForm], TraditionalForm]},
   AxesOrigin->{Automatic, Automatic, Automatic},
   BoxRatios->{1, 1, 0.4},
   DisplayFunction->Identity,
   FaceGrids->None,
   FaceGridsStyle->Automatic,
   ImageSize->{355.2746623369083, 295.},
   ImageSizeRaw->Automatic,
   Method->{"DefaultBoundaryStyle" -> Directive[
       GrayLevel[0.3]], 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
     "Globe"},
   PlotRange->
    NCache[{{0, 4 Pi}, {0, 2 Pi}, {-0.9999999999998741, 
      0.9999999999998741}}, {{0, 12.566370614359172`}, {
      0, 6.283185307179586}, {-0.9999999999998741, 0.9999999999998741}}],
   PlotRangePadding->{
     Scaled[0.02], 
     Scaled[0.02], 
     Scaled[0.02]},
   Ticks->{Automatic, Automatic, Automatic},
   ViewPoint->{1.4677146727230537`, -1.5950723801342026`, 2.59837598157127},
   ViewVertical->{-0.5199528208643925, 0.5650705814604559, 
    0.6405812220500249}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8426974892726736`*^9},
 CellLabel->"Out[34]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
9TRjh2SztFk/JNNszu1pbh+cbu7M7mQ20cnkD+5rVtKD4oEO9mlhrm3GeoaF
2wWeqkyeamsMpKrOs0/F3oWI206ujFlFpH423n2y1+jOfyeyhp/ktIIEn3GM
L9HrCZL863/GT1Y4si8/TeWkTsaQ1P+W5OXfhhOycwkspMneIb6rJDlUkJfN
T7V0SG9zR+8m5ueiAXr8xJOpbbolBrTFPEsCbUxeJhkEj8bxXUU8SbU+ydvM
fGT1EGZ89LQ19P9f0+uZeFOzv7Uft+9ramqXkUBdLML0x3EKHlLHfyBh+uEA
v3mLwPNQNrOM2TG4u5lJgnVq32tMZuuGeJC8n3gQkaK+EvenQA30AphQTc11
9kTO7KF7fIie51F6hif1mV6Meqa3+LnwTKdCvlbG/DZkao625pMomZkpPDe7
C2kHEWNmMmkzEmNf0cn8iU7mMzqZ9/r6zcn+yfxAs/L6mSdIox3OamHy+/Uy
F1988X97KJGuHAU65XmxbbdeHniT/KY3boKv9YGtEWUKrqfHuJce+P642A9O
0oHZ8rf8wK+HfGlMhJoH5YErNhK4fhlnKos7m7HDsk31wjYiPUgMGhKD344S
w+qPpMJPk1p8dYA89Iqh17PCeY7+/qPXx5tb+2WYTm1bx3pwwMc+uBoYMJ+s
3YdHESvLt1G4NSJeIR5O4wLnhHfQqdwdF/nQlfrQzykHv8QPjgf+dch3kQm/
lGTGjhpoShZdK4Qh68sciTNlM6/kh65b3FhOeiqxL5nEYdKu/0cn/XuS/a8P
lAd+IKejWUSicyfLf7IwezdgKdO9vfPQnme2R+Y+c8A+M9u9+sDyyQmtsOAR
R/IyPt2JfduZ8J2JfLP80MdiPDRB0Tyvp40HfzlkigqzTOGEvvI9EOWReCZY
eE+iKZ5IZsXoPia8kITSTHroSQHzHzrlf8APoFN+O0ce+JHcjuaZm5LMBBKr
d9+Yyif9NCm+R+i0c9s3jHpoK/mjHjpPuTrFw9nrY8gkeegM55TH5/YyZXOu
jP3wDyubQ8M/paxO+qKipCuzdO39zeWh8f3H6FVB7y+PM3VbG5uxJEnLp5CS
nE8PPo1eJKz+Raf9d7KlPhgiD/7Y0I6s7Y+STVU4qI95mrCNh3+GHv5JOvXp
HRtY+/snudw5cf63Tj6tFeR7I6aOBSBEaCaC+YoGpnZHM1M4pq8Q4gAR4qiH
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
7dqmwvJbAnKU613DtWxyT/F75qcQy9PBLvQLy8+l1yx6zdBZnwUq9if4TfWY
NGbP50e247kkPKNEg4UY9wwVgPJaK/rvyxGIvZSTyossfjM4xezKyRAAZ5hl
ub3M0aHp4uFqfPFTrWyvGNNFtMEsNbuAymL1qjdewP63SyTo2LFAmdGNwYi2
istrBvFiCQnVVK0WFFStvMIdxLiwfTQCxPxv6Jj/4VWaqYF1SIrz1AwHBG5H
nTMihXEgozp818iPIqZTJ0epgyMIrnr3OhyTzhR+qHWdJdbnwUPNAbGGqko7
AgUyHCBVYAK4IEd/r0qBMolQIBSZq4Ocfpgox3meNPQYLbDY37MBr0h7/IZ4
M3HU8KjlFmknrct7CkGiWk/9EFLKpz0VplYleKIn4ROJrpZzAj1BFwpHGAo+
zvYgFrlfrBxUhUZ0euxW6b5LJfyOALM9CmxZCpI0IzYXluvEHA/Or5iWbiqn
E0pmp3GxGJKs4XmhSO4vpNcUv1j51r0d75d5CGjZI3KhKgDs+siwTubfCJMj
YAMjR11dtvpJ8NcODpnXifsLcvuaWbl9TElOT43IdjOlORnmjdwURs0/NIiJ
MbIoFUWl2sGR3aRICErhlgu4w94w+776cIAk5ZgeeQROIZA1jqxSsGUZxB6A
AiCxYEqeGEU2RS5wUK8g3vUK6FUxQwKr4ZUJ4iAEfwISjmqQng/f1TE8ZFnf
2MxVDYf0hqOWxiC0wfVpK7sqLMQJKCrI4hpc7XLzw3X2TRXtAJa9Xy+ByyLg
i7VRK8mLGpcpxVwFCVy2AOmGUf+Xt25iUhLjzJbrWpjtI3tx7LVo9GDEO3vo
EM0zqA7B69myZNECgAAchTM6eenTkOssvx4vWuJlhQX6seZlmpI5mRFRZvZc
LSwOB92SuTtktw7XxW9vHBMKZpsaPKQBqpdcJGPGVjaSMyMtEC4Omeq5aaZi
aropm9CTnx2WIhsmOoqxZFSmKR+TQSI53dROSDHhiSEn1INUG7AQHknXGZZm
qoa2M5Xk+T5Hnw8MkTbX5STmd+ow/zvIIFqbm2mW5PSKY/a/wkwmSOwbnM4b
FrAa2esrOI7yKKkq+cd4GQNcPrqb2EdwkBf9j1A4JkYFw2CW+EusHax9FOUk
O6WYpGVeW92VO122zh7ogQJLp40MA+sn6IsjRxMzgxYGtzAMjvwEDKSxxXel
+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
hp6hTQsoV0bcPyn12cmcYM+Qcn6R9R/GX+feFFkqkUfOBDZNgDXAV0ixxvNy
KXkLDeN2HVp6r4mTFNp6GLUtlbL/oWs6kuEnSReNzsKEzVx3AUYJv2w9UPdU
y2ADRdiB76edrTBRwqQGQPpFA6O7ROMqxAPk/WjB3Z2gnwUdJGrFaddcbO9g
IUzdlYXFDgdQupN6p736q6d0JE+g8nF9zfrJVxEmwAGzbCw8iuaOGmSxu3RM
P1ICLR/dl9KC0pH9zLrh/cx7Nm365ZC0+fW1KBF+MwQWqh9Z7BzS2tkTpH0k
a3rgandJ6FWdlVYoo6AQaQNw0z8vLAuQZfjS31Zj8pTk5NzEnNOt5/K6pEWF
P5YxvxZ5Aji7UWW1syDCozyac7ePPW31B5u7Hj3tF70q9cHbUlX/gJPuzPdl
E3b9ZfyO/1Ci6zUZ+mpzGbcUBBxmXcrVKGZFQAXd75oedAVs5FdocWB/BTIc
tqj95Ri2/sPM/Z8zWHj/K0GFr28RBo5FhcyqPPbrmC5MvoMSPc9KtFvUqtjA
NOm6Z1vxz/Q9SVpfjyYKTufiMe935gqF7Fl7VqJQt75Id5ESHhFyPSKUe+0W
DJUFXeKU9rUIaNLylh1gEiGzy8gnicuxcJJ6MqgRGBQOpWLTOX+fK8TDFUWm
fglvwB6Z0oPceAC0ICPB8QrG1p9fx+rqmMOr4dixQcXkS7J1cHcChvnDrjR3
X9fLPGIvy9OjC80fJ6ZJdrbuphb0+KlhsYKpGxVrLvabrpCyJVo3jpNcNi9J
knCcwaTRZksZgwGKf5iA0du3ukWjNrH42cI+nvolAwRgXVE1qSsRJSHqBMvY
5ZOvoZph6cwx5tP5RaZ2XrHvE8yx/35qoXllfEfz/JiO5m4LEDBDgno/pHVP
DS40tdekzenvxs01HhhEjj2perKa7otks7LWaVYvoNCmkV4B/1lzFBBaNJy2
vzeF+TE+GTjgIlijh1GprAdWfZczzlynh0Qdlr3BwWI8iJMzzNTIKrBO95y2
G5bIn8g3FXdw6FRu7skj2e9L2PMGhClddTlRWGga/hNZC8bnvCnj45NSQuDb
2zCoX8M9m8pZPZyECZFgBRIyk4KW/+iO1BxEEgdYODMmTZDwpUDCPwEJ9t9/
JZDwNSCBRLqSpna5JCWQgMDP+ZjEjIWp2kdl2+nBLrKOKMnNKYGDV3L8amKw
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\
\>", "ImageResolution" -> \
72.],ExpressionUUID->"f7338cde-4ebd-40fc-a7d5-bd8ec12d25e8"]
}, Open  ]],

Cell[BoxData[
 FormBox[
  TagBox[
   RowBox[{
    RowBox[{"plot", " ", 
     RowBox[{"sin", "(", "x", ")"}], " ", 
     RowBox[{"cos", "(", "y", ")"}]}], ",", " ", 
    RowBox[{
    "x", " ", "from", " ", "0", " ", "to", " ", "4", "Pi", " ", "and", " ", 
     "y", " ", "from", " ", "0", " ", "to", " ", "2", " ", "Pi"}]}],
   Typeset`Query,
   Editable->False], TraditionalForm]], "WolframAlphaLong",
 Editable->False,
 CellChangeTimes->{3.842697503583336*^9, 
  3.842697539194617*^9},ExpressionUUID->"34abc2c2-efd9-424c-98bc-\
acbda5afb907"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"contour", " ", "plot", " ", 
          RowBox[{"sin", "(", "x", ")"}], " ", 
          RowBox[{"cos", "(", "y", ")"}]}], ",", " ", 
        RowBox[{
         "x", " ", "from", " ", "0", " ", "to", " ", "4", "Pi", " ", "and", 
          " ", "y", " ", "from", " ", "0", " ", "to", " ", "2", " ", "Pi"}]}],
      "json" -> 
     "[{\"t\":0,\"v\":\"contour plot sin(x) cos(y), x from 0 to 4Pi and y \
from 0 to 2 Pi\"}]"], "assumptions" -> {}, "parse" -> Defer[
     ContourPlot[
     Sin[$CellContext`x] 
      Cos[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0, 2 
       Pi}]], "inputpredictions" -> {{
     "InputMathOperation$AlternativeSurfacePlot", 
      Predictions`Prediction[0.99, "plotting", "", {{"3D plot", HoldComplete[
          Plot3D[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0,
             2 Pi}]]& }, {"density plot", HoldComplete[
          DensityPlot[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0,
             2 Pi}]]& }}], Predictions`InInput}, {
     "InputMathOperation$Gradient", 
      Predictions`Prediction[
      0.98, "multivariate calculus", "gradient", HoldComplete[
        Grad[
        Sin[$CellContext`x] 
         Cos[$CellContext`y], {$CellContext`y, $CellContext`x}]]& ], 
      Predictions`InInput}, {"InputMathOperation$Laplacian", 
      Predictions`Prediction[
      0.97, "multivariate calculus", "Laplacian", HoldComplete[
        Laplacian[
        Sin[$CellContext`x] 
         Cos[$CellContext`y], {$CellContext`y, $CellContext`x}]]& ], 
      Predictions`InInput}, {"InputMathOperation$TrigAlgebra", 
      Predictions`Prediction[
      0.5, "trigonometry", "", {{"expand trig functions", HoldComplete[
          ContourPlot[
           TrigExpand[
           Sin[$CellContext`x] Cos[$CellContext`y]], {$CellContext`x, 0, 4 
            Pi}, {$CellContext`y, 0, 2 Pi}]]& }, {
        "factor trig functions", HoldComplete[
          ContourPlot[
           TrigFactor[
           Sin[$CellContext`x] Cos[$CellContext`y]], {$CellContext`x, 0, 4 
            Pi}, {$CellContext`y, 0, 2 Pi}]]& }, {
        "reduce trig products and powers", HoldComplete[
          ContourPlot[
           TrigReduce[
           Sin[$CellContext`x] Cos[$CellContext`y]], {$CellContext`x, 0, 4 
            Pi}, {$CellContext`y, 0, 2 Pi}]]& }, {
        "convert trig functions to exponentials", HoldComplete[
          ContourPlot[
           TrigToExp[
           Sin[$CellContext`x] Cos[$CellContext`y]], {$CellContext`x, 0, 4 
            Pi}, {$CellContext`y, 0, 2 Pi}]]& }}], Predictions`InInput}, {
     "InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[Sin[$CellContext`x] Cos[$CellContext`y]]]& ], 
      Predictions`InInput}, {"InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], {$CellContext`x, $CellContext`y}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], {$CellContext`x, $CellContext`y}, \
{$CellContext`z}]]& }}], Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.5, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[Sin[$CellContext`x] Cos[$CellContext`y] == 0, {
           Hold[$CellContext`x, $CellContext`y]}, Reals]]]& ], 
      Predictions`InInput}, {"InputMathOperation$ComplementTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their cofunctions", 
       HoldComplete[
        ContourPlot[
        Cos[$CellContext`x] 
         Sin[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0, 
          2 Pi}]]& ], Predictions`InInput}, {
     "InputMathOperation$InverseTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their inverses", 
       HoldComplete[
        ContourPlot[
        ArcSin[$CellContext`x] 
         ArcCos[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 
          0, 2 Pi}]]& ], Predictions`InInput}, {
     "InputMathOperation$ReciprocalTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their reciprocals", 
       HoldComplete[
        ContourPlot[
        Csc[$CellContext`x] 
         Sec[$CellContext`y], {$CellContext`x, 0, 4 Pi}, {$CellContext`y, 0, 
          2 Pi}]]& ], Predictions`InInput}, {"InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", "", {{
         Row[{"derivative wrt ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          D[Sin[$CellContext`x] Cos[$CellContext`y], $CellContext`x]]& }, {
         Row[{"derivative wrt ", 
           Pane[
            Style[
             HoldForm["y"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          D[Sin[$CellContext`x] Cos[$CellContext`y], $CellContext`y]]& }, {
         Row[{"derivative wrt ", 
           Pane[
            Style[
             HoldForm["x, y"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          D[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], $CellContext`x, $CellContext`y]]& }}], 
      Predictions`InInput}, {"InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", "", {{
         Row[{"indefinite integral wrt ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Integrate[
          Sin[$CellContext`x] Cos[$CellContext`y], $CellContext`x]]& }, {
         Row[{"indefinite integral wrt ", 
           Pane[
            Style[
             HoldForm["y"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Integrate[
          Sin[$CellContext`x] Cos[$CellContext`y], $CellContext`y]]& }, {
         Row[{"indefinite integral wrt ", 
           Pane[
            Style[
             HoldForm["x, y"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Integrate[
          Sin[$CellContext`x] 
           Cos[$CellContext`y], $CellContext`y, $CellContext`x]]& }}], 
      Predictions`InInput}}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {44., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[35]:=",ExpressionUUID->"8a22a34b-6240-4e0f-b4bb-4976605854c7"],

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "*", 
    RowBox[{"Cos", "[", "y", "]"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "0", ",", " ", 
     RowBox[{"4", "*", "Pi"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"y", ",", " ", "0", ",", " ", 
     RowBox[{"2", "*", "Pi"}]}], "}"}]}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{
  "UsageTags" -> {{"ContourPlot", 5}, {"Sin", 1}, {"Cos", 1}}}},
 CellChangeTimes->{3.8426975700135565`*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"511fbf8c-2a48-41d9-950c-0888408690a6"],

Cell[BoxData[
 FormBox[
  TemplateBox[{
    GraphicsBox[{
      GraphicsComplexBox[CompressedData["
1:eJx03X+U3+l1F/YZjUYjaWdlaaXRSLvyWj9W0iqHQEMCbTAnn0kx4dA6QADT
Bhp+FDClhPAzNckBklIChoZDEqCNwXBSkzStq1N+hDQpFoEUL8TJtPECA6wz
NqvI442WyUZjrSxLntX2tF+97nPe97uef+a8v/f5cZ8fn+e5z33uvc+F//IP
/cbfe2BhYeH7vmZh4f/73/82/qePvPMd/+fulHi/8J0f3fzGf/MXlzeSvlr4
J971nu/4obsnNjL9WuEzX/qu3/yFC2db/nOF/8Ff/MB3X3j+fCvvQuHtR8e/
5Vf/40ut/MuFD/6x9//O3/9brrb6rhXOercn7U28X1h7k75aWHsz/Vph7c38
5wprb5Z3obD2ZvmXC2tv1netcB/Xt/6/Xzjbu9vau9vau9vau9vau9vau9va
u9vau9vau9vau9vau9vau9vm6b3WrnvVXlh7k75aWHsz/Vph7c385wprb5Z3
obD2ZvmXC2tv1netcP9O33pc91u7je9+G9/9Nr77bXz32/jut/Hdb+O738Z3
v43vfhvf/Ta++218xzo0K3exzaPFVu/ihvYmfbWw9mb6tcLam/nPFdbeLO9C
Ye3N8i8X1t6s71rhvu6+9Xe63+bx+J/zeXkj5/PyRs7n5Y2cz8sbOZ+XN3I+
L2/kfF7eyPm8vJHzeXkj5/PyRs7nsa/Mfj/SvvMjbV4caeUcqfbC2pvp1wpr
b+Y/V1h7s7wLhbU3y79cWHuzvmuF8/sd62z/Lvs4Jn21zesTbdzXWr+cbfnO
Fc7vd3Ujv9/Vjfx+Vzfy+13dyO93dSO/3yEnzOo53vaF49VeOOfd8cbn8Wpv
pl8rrL2Z/1xh7c3yLhTW3iz/cmHtzfquFc71auybfZ3t32Ufx1ynTrTveK3N
87Mt/7nWT+dbORcK53p1oq1XJ9p6daKtV0Pum5Vzsu3rJ6u9cK4bJ9s8O9n4
OlnthbU3858rrL1Z3oXC2pvlXy6svVnftcK5Pg85qO+bfZ3t32Ufx0y/1tat
sy3/uTbvz7fyLrR+u9TKvVw41+e1tj4POX6Wbr3JZevVXjjX/fW2Tqy3ebXe
+Fiv9mb+c4W1N8u7UFh7s/zLhbU367tWOPejIdd2Oajvm32d7d9lH8fch862
/OfaOna+lXehfQeXWvmXWz9ebfVca/U5Z+w0OWqn7bs7bZ3eaeO+M/2iV978
NX/p558u/GO/733//atPXij8Ly58+bf9yZcuFv7Mz7z2R4/9wHOFj/2G9/7W
X/orny+c56S94g/OfXpvynV9b8p5slf8wfiD8QfjD8YfnOewB8UfnHLAgyn3
jQdTzsMHxR+MPxh/MP5g/MF57lxocuxCk3sW2j650L67hQ38wfiD8QfjD8Yf
nOfepSZHLzW5a6nt00vtu18q/mD8wfiD8QfjD8bfb/5t7/slf+/PHiv+YPzB
+IPxB+MPxh+MPxh/MP5g/M3KGecaGH8w/mD8wfiD8QfjD8YfjD8Yf7N8TxV/
MP5g/MH4g/EH4w/GH4w/GH8w/mbpThV/MP5g/MH4g/EH4w/GH4w/GH8w/h7+
tQ+/9/v+8OniD8YfjD8YfzD+YPzB+IPxB+MPTj3XZtO7bDY9W9dPjfRvfc7f
bHqbsT+99blxs50rNts5cnvqcnrKkT3/9tTlvpRLNqcuN+hf9Nl3+mzhpG8X
XX7j0fP3/VR64yW98YKTvl10+WfjeOWL5DfvrlR64y89nONxbSPHf3fq+3nX
W6Gn3myvnYN32njutnPFThu/3SaH70xdjk15eqeNz27T5+3UeOAv5eud1t+7
1X9d3un6zS7/JH+7U5c3sp/Ia0Of2eWj1D+enJOXun6zy09d39nlKfSU94a+
s8tX6Pqny1voKQ/ea/Nn6MG6/NX1KF0e63qHLtd3+Qw958fQd3Z5res/u/yG
nvNhv43/fpN/xzin/LRfOPUnQ95LufRIk7NObmT+tcJ5bl5q55KFdg5b3Ej5
mpz0bJMvzzf+LszJkyknXGz73pVW/9XC6F2e6/2X8t1+4dRPDHl0Vs9K0/Ot
NH3FUvUfnHqFlXYOXan+Sfn2fKv/wpw8K7/+gVOfsVT9A+sf6fUPbL5lefem
pO/P0WfjfrSd/1favDja9Gij/2D0LG+t6PoT3Xzr/ZnlnZ+jy5/6g5XqX3Tf
Z+9fGF361C+sVH+j69/Eu1Ond31w9se9qZ8/Mv9q4a4n1999PLqepvdvln9u
jt71yej6u59v0K2PcK6PQ9/cxwPd/O392c9HfZ1Hz31r6F97/+a58+Tcea/r
o/v5r+uj+3mw66fR9R/+9Ffvz5T7r8ydH7v+up8nu9zUz2/93qzrq/t5s+tx
+/mz68X6ebTrs/v5FD33i9E//byKrn/6+RU994vR/q6/7ufZrs/u59vcZ8c8
0v5+3s117umNlNsuzJ1/u367n4fRU99xsuk7TlZ7U26+N+V5dL+w/ujn537v
1vX4mX+tMHqeb8/OnbflS/lzrb6XPK+fb/xdmDufy5/y6VrNl6z/amH0fj7u
/Zfn5f3C+q+f72flnKn+g3Men258nm7jeqb6C9Y/qS843+q/MKcfkF//wNbn
1DdcLax/pNc/sPmW5d2bOr3bESV9fy5/189n/y02Ofb4XP/C/V5Rf6P377jf
Y5ifvf/h1PcOfX9P3/X/6KkfPlvfdx8fOPXF434A3Xj1+4I+fv3+IPU6u03/
s/9F9ENdztls96Sb7V5t6E+yvnNFz/vsrn/p9lWbzR5ls9mjdH53273tTit/
t9nz7LR9c6/oqT84OXe+6fYu/TzS7SD6vWq/h0s7gnNz54nc1y62delK+46e
b+Xtzp0H+jmzy1F9X+z2GF1eTz32sMfI+Xykzd+h90h5cm1OPk359+pGl7e7
3NLls24vkPcFJ0reQE957uTcftPvl/v+kOvMkTm5Ic+Z47/+7et76tkvFs7z
4no7Lw49Wq7H5+bW2y5H5b3FsH9MfeT2nN1etxNJ/ejyRuqP5u3AupyW9a9u
ZP3DLrDL8Xmv82zhPC+uNzlna/q2P/uBW3/21pXC1okZX3enPBfdnXKfuTv9
8o9+8qt/y798pvB/dvzi/u9896XCeQ/2cMpz2sMp952H06/6Le89/NPffqGw
8nr6WT+Ne81Zuw42Ofrgxm//j95z7Vv/63cU/gM/+clf+Oz65cL6Y9aOJzb0
B6w/ZnyNcyqMH1h/wPiH9cfs96E3gJUH6w9YeT39rF1r1R+zdpyu/oD1B6w/
4NSD3Zy+8lvef+zQ3zhfOPXad6Y8t9+pc2yfL+gXj178dR9debqw/ur0Pp/Q
f9fPv3nv2i99bm5+zeb3/Vr34dSDDLr5lOfi+1Oeg8d8Q8dfx33+on/tl7/r
wPe+92Jh7el0+bUPHUbX3hmfj6bclwb2fVhX0VOOezTluru4oT3oMLr2oeO/
Y+n/wu963ye/9mNXiw6jm2//yZ/+wC/7ub/15Ib5Bptvs9+HHg42Xv17RMc/
bL51ev9e0fV//35n7Xyq5AIYf53ue8UvOty/Z3T8ddzXB3T9D2tPp8uvfegw
uvbOfj9V7enY+mM+oWsPjC699qDD6NqHjv+OpTe/0GF0egj73Tf/4Eduf+SN
y4VTj3Kz3cPfrPSw/QLOe6ODj+fx22u/QZ/1w6Far2H123/kR7d+w/iRXn7f
D/5h6WH8w/izH6gfRp/167ATgqWH8QvnOexGu0e8UXZLcN4rDZz30yeKnnYU
A0uPP3T8wdafjuW3X6Lrz46l/ytf9Z5/c/rvPL/R22e+5L3dzWY3c7Od124W
v3Da096c8Jf79eWWnl3UgaaXO1DrL6w9cN5rHSr5os9fWHkw/vr87d/DbB04
WvXB6oPVB+sfWP2w+mH1w+r3PRgfWP35vQysftj4wOrP/e1yS7/wmK+xXsHa
A+Mf9n3N5t2ZKq9/r+jag64+GF166wmMn/69o2svOn5hdOmtR7DvB85z/ma7
J91q/j6bJY/l+Wa56UO6XmPYjaeebafkp9nvt5s/1U47P+628+Nu85/ambRP
eXlO3Kv2kXfTXn6v2oee9vB7VX6n5zx4vuTLtDNZaO0a59a0vzxa8pzvodtv
Zj+fKzp5TP70d1go+QXd99LtOVOvc63o2pf8D7/K1NcPv6U89y7V/qr/8xx4
oZ0Xl5u+ZXHunqXrcfP+68zj7+htVV+3z+z3a93/Q3rtVx7+Ut+zVPKt+tC1
D135uS48P0e3jqCTJ82v1EPsTOQz8yvtF4+W/GZ+dfvH1E+da+f6Zyq/+YVu
fqGbX90eMu+PrrV18PmN5H+79DNpDzDs8tL+jF3g7Wbf0+0sb9Z5TPq0z9mu
85X0ace4N+W6ebfJH3t1fnTeTjuHu6X/Tnut84XJ4/LD8qf/zlifpE+7vQfF
r/VJeudj6VNO3Kz1KvWqj6bUkz6q8zjs/AOrD047zaWmxxv2SGnvc6bkJ+MH
p//PUs0vWP3Sqz/tCTYn33f3czF/yBfqlz7nz2qdl6R/azl7s/Rh5k/el6/U
+RmW3vzJ+/fzhc0X+WH5zZ++/kifdqhPFb/WH+mdd6XP++TNWo/MH+dJ/Q6b
P7D5A6sPVl/ev45xMn/y/vZMyXfGDzZ/Mv+1wuqXPu+pxnkk16V7df7Sz2/d
TzeavDTOUzlPny06eQ+dvIee8tKN+v76umD9S7+R21U/TD5N+erenN9OP984
r6fd/sHSr8vvPNnPT9KTd+H0iznc/FAOt3uflZrn6Ok3cLjkbVj9cPqfrZS8
jY4/GH/kmZTTnih+Uh4aGD8wfmD1p7w0sPqtT+qHlQ8rP+Wbe3P7lPmvPPoM
/Qnn/c1ajW8/f0mv/+Dcz882OfRM2/eGfUA/r3X/vdxHnqry0q5n+KH28xms
PbD29vTdny/XoXFeg3PdGuc361HiB5PzWJ4ztkoO6Tj1Gffm9CWZfmDzBdY+
WH90rPz83od+Jc+TA6fd2e0px+d25Yez/25PKXcebPZJB5udz6E6L6OnfdDB
okuvP33vMP2H/oXTD+hw8QOjS6//0GF0/QnjT/q0zzlcdOnxm+vP3pT6lHuF
1d/1qej46fod64nxg40fbPxg/WE90F8wOv2H9qFrP4ze9addrs99fb/pV4d+
VPtTbh76zrQ/udHinwx5wX6nPjjtHA/U/gD7HnO/HfpG/Qvjp9eX83noH9N+
7FCzBztU+XM+DX2i/Pk9zOsHU9+2X1j7YeXD2p/70dDnaT+s/i6/WU/V3/V7
aZ91Yk6f1+0Yu71X1+elHmxef4duvsKp3zrbzjljvYPpG+Asb8hveT7cnXJf
2ZnyfvfZjUx/rsk5z5T+K/1MF6t9qX/aqfsd+XO9XppbD2Dtg7Wvyy95ftkt
rP68T3y2+Y+ea/dIz5T+Rfucb7Qv9R87df8jf5dvnNdTz3en9BWw/RZ2voTT
zu1+jR+c9lgPSq7Le7PTpQ9Iv9KHNb5Jv1L5Mx7Bg+JPejj1o+z4HhW2PqUd
/IE6D+b6tVn32foPxj+s/2D8wMpzntV/sP7L+bPW7mlO13kYNl/0X9KvNPvw
q+3e4Gqlh1P/tzk5D8PWN/0H6z/Y99TPj33/y/PhOP+lvfjBpk882OyzDzZ9
4MFm33u4+O37UZ7vxnlMe/r+lOe//Xb+Gucn9DwfjfMPet7Xnmj2PeP8ov78
vvenfl7pemrrv/Lz/DJ/3pBf++VXf9/PUr6+184LQ37P89qQ/3O/GPJ12vMf
avbyh2r97fJul1+7vNrlZ+MlfT8v53o/5Ef16R/lZ3/da+egvVovsz/ulbyX
6+u9OTvgtEd5tviUH51951vrBbebX8Z2+ZdKn/fn21Pqf7ab3eZu6X/gbgeb
9qr3Sp+bfg5XCuf68GDqv6ff1n6bTw/m4kjl+vKg2V/vFz85ry+3/etK0Xvc
jG63mvf7iyVfwXkeHn4wcJ5fl0v+yHvV7RYnZvzvflU9LkW3A05/AnE1LhZO
+fFIkx+PlH6619/vieCcX6sbOb+GHsW9Ud4/DPuy7i8GG8/uv5XnrP0mr415
mveKJ9v5aOzXeU94vujpnzvsQXv8sNzfrxQ958fwG4FzfqxV/3S9fbcnhuWH
9X+fF+lndrEw+cV6nt/7VslzcH7vW1PyO+yZrf/ph3q7yoOVB+d3f7fWN9j5
CNbevG9/MPXzBZz3nA+rPFh/wsqHle98In/epy+V/JJ+qwfrXmVWz/BLSvqF
wvoH/t+/+j2/+Pd+3eXKr/9Tftpp++lS7Z/4gY0HrH5Y/bDy7a/Kg5UHy9/t
u+2/8sPyw/LD+l8/Gk/YeMDGL+/LH0z9fAbnPfXJKg82P2Dlw8p3vpM/78OX
Sv7Tfhif/9cXjl+8f2747SX9QmH9A5sf8psfKX/ulLyZ955nih/YeMDqh9UP
/+sf3lz7Cz/3/OP/Z+q80e3Z4fRruln333DuD4NuvUi7j5vNL/72lPv5zSnv
7W7X/T669sLaC7sfhXN/GnTlk7/RYfSUJ27W+Rc9723v1PrU9QHkzbQTetju
ie+XfqDjvv718qxv0nf9TD9vd/0MesatOND8/gc97/+ONX376UqfcaqGfqjf
//f1Fd14wcaz0+U3frDxkh7O8+tm05fvFNY/sPbD+qfTrYf6J/Xrx5q9wZmi
6y90/YOu/2D9BesPWH91uvL1FzqMbv6j6z9085f+xfzs+hznpbRjO9nsHJ6q
+dtxX997edZv6bv+rtuD5n3EUulTjB9sfDs970ePtfuK05Ue7vrDbr/Q9w90
4wUbz06X3/jBxkt6uO837jP0D3kx7dNHnLi3pm+2uD3Dnj31DUt1/s24NTfa
efNG81vdanFDbrQ4IVstDs72XJyRtDO50fz8hzyNbjz6fVHXz2uP8ZA+z7s3
av9Rn/FCh9GzvO2Wfti3yQ93+T/HabfGI88XO1NPpx77GfkJTrvcu+18stPG
Z6eNz4gznvysFc7x2Wnjt9v8Pu+0+4zb7Xy0U/JE6k+G/x15EDbe3f9OeTle
O228dlv819tNv367jddOG8/dsmfM9u1Wf6e8ttfksb06d8uf5+q7Tb7aq/7r
/qx5Lz7iyaV8tVf39+qD075yu85/aV/8sOyQ8n5htXCeV0e8OPTUWzwsPS2c
9qIPml3qwzY/Rjy55O9Ck98GznhJD9v5ecSXy/Pu8GfMeEnjfqX7aad9+V7d
v6Te7VHp8bp/Ydp7Lc7Jd/n7U2Xv6fwFZ5yb4V+ZdmOn5uS99JuZ95vv/pc5
L4b/pe8TP75fOO0ph3yc+sF5eRPd/FWe8ySM3v07067qypz8mfrM5+f0E+nH
uzL3O/18xjE7VPJKp6d+/nQr53TT/5+e0zekn+eIz4wuPzps/ne68vWH8mDp
4a7fSPuGhbl+Sr/nlTl63l8cq/K73S56T09fkvq+leo/2PrZ/b/SDnjEt0v/
6EFXv/0Gv3keXCl6T9/9+aXP+92Vtk+OfbzvK+nnPvxe0NP+eqX4kQ7Ofnqi
9NJdf5V268cKpzwx4pz19N2uWP1w14+hpz3EsOdKv+vzc3TtN57K8z3A6Oq3
f3T9XNpdj3iGKW8MfX9P3+3Z1Q9n/+9OeR+30+To+TjMznv2Hzj9subHpf/v
cSb9T37WCqc//7G2/4w4IGkfcG5On5nf+dPt/mP4y9tfYOPd/eXTLn7Eh09/
EHHKx3mbfAhnvIBjbX85XvtHtm93Sv+Cnal/F2mX9lTlh+XPeAcj3l+P75F+
qE/P3Q+lHdjQD8DpP7Fd+l/yIWzfTPuJ1bn4IT2+H7p+S33w2cLpjzLi/XV6
j/+X/F1o+o2Bfd89fkmPB5j67hF/wHh3+5H099ou/bbvj32J7zPtTfYrfdof
rzU5aK3tE8NuRnn2Qxi9x0NIu95Tc/qQtOsdcfTyXm2kRzce6L5P/Ph+YfJh
1x/l/d68Pgbd/FWe/RVG7/EY0i72ypx+Ju8jn5+7n+hyRpfr2EfkPj/ixna6
+4GUB8f/tL84PXffkHZT430CdPnRYfO/05Wf8uDQZ0lPvwGjp/3MZtmD5jl7
2A/nPfhC6WW731rK02dqXe7+453e7Usznt/pOSy99RW/6c9ypt0Hnmny9Zna
f7r/ead3e1X0lL+H/3mn9/vq9J/aaefY4XfZ/RSTPuIP9vvvtDscckn3y+t+
bKk/2iz9Bn5T/7dZ+p+0Uzz/Rejb7b2Brab/22z6u80p7TM2m/3PZtMHbZa+
x7zM9Xq5rc/Lbf1crvkkf653y219W27r0fKcHq/7yaa+d7xbBPe4zWmPurKR
9lkrzV7uSPPHOdLm75Gmx5r3m0572CGvd/uYXCd7vMGdZtc74uzneXO9rdPr
7Tx4up0H19v5b72dz0Z8v76e5T3qXuG0HzjT/FHGepfz92Tdd+Z8327vQdxs
/knj3d5+P4ie/kUjPmC/v0NP/kZ8wB4fK8938/F7Ms7mvanf36Dn/BvxA/v9
So7nE4/lkIdTnhu/MP31P/+BX/Evv+NS0U994MP/6LWnLhXdOM7W8cUqb5Zu
2FnOyjm5oTx05aErb2ZnsNb0YC9Pn1s88fG/8rvYn79c9c/SvTb94OeP/9T/
8q1PF/6bz3z5i//ur54tftHxq/wX/vKHf3TpFz25oXxY+bPfj2/IDysf/+j4
Tznt5elXPnnxB5768JXC9MrsbX76G9//9zdPPFv2N/LjR35YfvYY8sN5L3a9
7slm8+iFiT0FOozuXINf9h8wvd/suz+w8SfvvPnuP/GvzheWH7/yw/L/0v/g
Xf/br/3oWuWH8Zv2Hjem3/DPP/m93//Nwx4Ezu94q93nbbb7m80W72Wr3Zdt
tvuQHp9mZ+p6p/zexzvS3V6k3+fAGd9mp9237bT1bLe933e72cvtlL9Xv39I
Pfrwj3G+7PYKuU8PfXG+f3bg8Tg8X99X7ttP1L7d9V+pfxvxVzJ+6NAX9Xgu
Xf+S7yfMx63p9gtdf5JxCC/M6T/g9Ic5Xuetbn+QcsO1ufN+xqUb/jzK7ffn
aQc8zmfGQ3rjYT3K72DEJennibe+r+z3tdvt/aStSX3W3/yuFue+oy82jv3c
knrv8f5i2ssu1f7W4230daDr27p+EdYe67329P7sctkX0+v1c5L2pJ/OiP+Q
/iUj/kO3A8h1csRXyLgpr07WV9j+Z7+x/8H9O+3fWcY/XWnyxYhbeuvKu/7n
3/7Jt9X6DqvffqX+vn/lPejRue824+xemjsfwvon7RPvlnxh/4Ttv/rD/gvL
bz+TH5Zfe+SHc/+9UXpn++fzv+m9f+/bP/VcYXT7I3rfLzOegHvRV6aFf/fa
x/6LX3OhcN4j32/38CN+WLdnlj7vEx7W/Tus/pd+7Xuv/7X7xzbUD6ufPZT6
e3ypbi8rvfoz/bmN1L+yu3ltSr3o/cJ5n79WmP5Lehidvjvzb03WC+XjF07+
1gorX3oYXX2pr91rflX3mn3FveZ/effxevW5Fi/hXvm7SJfxx+/X9yF/xnM4
UeWk/v5e81+8Ox29sflPL3/pGD/51Sc/LL/65Tff31pfs93kv/4u1rCvkt+6
+tb6lO0mH243/ciwb5LffpJ+3iO+V/K72/Qid+be8Ur90Ii71uNv5z3KhaIn
v7tNf7Nb+ptuH5X2O/uF85w74oVn/mFfnHHq7rZ4HyPOS7dfSnvk86380T79
n/wNex7tzXPX5Y38Tq7O8Zv75LCnyPvFRzWOnZ5xAxcqv/Hu9hNpL3K02buc
aPWPc3K+O7TY5MrFdl/4qNZrOO2lhr0JuvnU44fnvdalwvo/45mP+OHmm/Iy
/vKI45nxI3Zq3uV5bLnpuZZrfU378XOF075ueSPPX8vVntRPDnvs1FMeavEQ
xrt46U887E0yPsKRul9L/9Wd0gf2OHW5Pqxu5Pe/upHr1epGfv+r7dx6vOlV
h/9cnm/GO2vmV4/Hjq5+9DxPDntr2Pj3+/e8H94vrP97/PjMP+y7Mw7meDcl
96+1ufvxtAc/38of7bP+JH/jvlh700/rctVvfnV+Uw4d93Vpx3mqvpdOz3V1
ofIb734/l3LQeCcTn1n+2tz9aZ5HRzrzI/k9Vzi/x3GfiW4+9XjyKUddKqz/
M7791bn7TuWl/+x4Hyfjt4x3ntNea72dl8Y7cmm/f65w3h+sN3uq9Xa+Wi/+
5c/4mUOfnvdZy6XH7HEt89w79PsZb2bcf+Z6NeKJoTvP5H2hOHkvtXf/ture
Hj352mz6sq3pz/3fn/yar/6HFyq9/kCfnauutvqWSz+W6+duu1/bLXmi28d3
+QjO7+te25fuNn3hvWbPfa/qkz7n85Cj6U/oT1OfsjtlP9+u87z5hv6Rv7/5
Y7/ia87V+TXv6Q/XdzCbV4drHPu9sfT6H9b/mf9au6d/vtInX6ttnXii+EH/
YnoA6c0P6fGHjr8s71qVh78e/znjOSzN7X+pX7wwFx+o728Z53innZ+Wa39I
eXDYK2W8hxHPOeWxsc/RV5k/qb/arfsk8yf1L+fq/sj8QTdeeT+/Vv6Zxivn
zZlKb3xg45P6/u25eMru79IP6lbZu6e+ffg/bv7b1575Jweer/R+n+2ze01O
v9Puge9Mf2/rtY/+kd/JXmyv9O/pnzDiJVvHMj7F1uQ+LeMs3G/+pyOuqPSp
Rx5xNdHT/mK8G4XufgrO99juN//SB9N3ffgjG0e/72Klz/vqB9P3/573fcUH
/8BzRU97igfV3729eR5Yb+cB/oNvFp7JAQtlX5bvH414zuqTH5bffEr5nZ3D
UvMLH/t6+pOOeM/6U3r9AeMvzx/bc/Gd8/2W04/1HOP95h7fWXrtk958nulZ
j7dz3HgXETafpTef057yYrPP3GzxMLYm97nK7+8l9Ti30md8rRGXET39cUdc
V3T9D+O3v48kv/ksfcbzeqrGDz39b5+q/u7tTflyvcmXpx+XO/BMb3uq+M33
lUZ8afXJD8tvPqV8ujX96LNf/vwv/g+HHy6Mv/QPHfGn9af0+gPGX8qz2+1e
eavul/Mcf6Puiztdvh73L/WWt5rd9o12Lrze4g3dKEz/lv5RN9r961bzn9qu
/QQ93wO5Ufcp2pPvnfZ4tTvTTO/9bO0/+d78jYk+P9sz7gfcR6H3OIJpTzb8
E7s/W54bn2ty5HNz+r/UAy60e5OFJs8uNv3xsY3Mf7zoqf/dq/tt9LTvulf9
i57xD/aK/84fvQH+0q7keOG8X9+v+lK/9lzLv7CR/bA8p8/rfmv5HazN6euk
T3/H8c7krN0H2/3zQsmDXT+XcRYGnfzV9W/Sp//j0uN14ErVrz35fpRyDhXd
up/v0h1s96GHij/Y96U8dOXN7r0uV3l5P3roi/hpb7Z4yYtlp4T/2Tp4tOlN
nyi5Pd9ve1vxZz2CpVd+3vceKpz+W8NfSvvxg57+WyP+oPVa/dYTWHrl659u
l5r+NJulf7Qu9vjueS/snmjcy/b2d5x2aNbf1dqfejx69VlP1Wf8+3ti3U+n
++d0f47u/9L9Xbp+MvWiC3Xu6nY25lPebx2b06uiWx8zTsX5oqc/6ImaH+j4
z3d0n5vjL+0mF5vd2vHCuT4P/5DU/z3X8i80PeDynL6x31Nk/Iu1OX1i+uXO
xzmd3bMP+9Qsf15/mPcmg2597PrB9Pu4XPVbH9WvPRmvefGxHDfiADr/Wh/l
Tzv19eIPtj4oD1151kfl+X7zvYKtsq/DH2z8M37026o+3wHs+5UeVl/6r58t
/tVn/shvPVO+9Sz7b6/u3cgJ/f4w7+WebfLN/H1k3qvP3xdm3IiT1W/sd3N/
Xa/1mTzX4/enPuje1O8fUk55du5+o99n5L3q/H1D3sOebP5NV9r8X6/xSL+s
F0vfCue9+93Sr8zG9fU6/2f8BvZvr5e8je58iu68hM5+GD312yOuPf0DfSOc
7/+Nd0/Rc94+bPHMH5Q9DTr9Y+o7HhRf9kfyCrsROOMPLtX+hj6zm3pHYeMx
66eh34TTbmG8Ozrjc8T9TH/JoxvoxgPdeKAbD3TjgZ7xuca7pM7PxgPu76IY
D3TjAWe8rafKvgjdeOR5fT7OuPXReMD5Pu/pGg9045Hr626LN3O77I/INWmv
Ia7wa/U99PT9PGWdoAeatf+zpVfK7+1s1cdenf6Sfhedflf9ec9zt/IrH1a/
+yDlsfdXnvkBS9/Pc9r37H/z/h/5kc9fqvLtB+pPP/jPTSlXP6z+ye/xbI07
/mfz7vPFn/JmdkZD/4kfOP1AHrX7pRGXnD7S/J/x9caUdgCLza5zvEMhfb7j
/EbR5c+43o+qfepHtz+hyw/Tl5KXuv0H/nxfyvf94U//KT/ta/enr3n1zb/1
M3/5aqWn34LR+31X6jNvl72d7yXtEZ4o+13zpafv8rh9td7N+//bNeJ85/p5
turTf/Spvi9035f65Ve//MqH1e97UZ7vS3nmLyx9Pw9on/msfN+X+vUXezvz
1Xqqf3J9PVtyLP5netenij/lmR/y4wf2fXV7BXKL74t+1Pc1K2fEhXfflX7G
J0uPKb3vC0aXX/vwo33qR7cvo8sP09/6vrp9A/58X8r3feFP/yk/49Gc3PD9
SO/7gtHlTzvNW5PzA+z7y/g1dyb6BfMdfWYH/fbSP6Qd57E6n8DKt+8rn7yv
fHTlozvPpL/Tbumn0y7whfYO8vXC+f7EudK/qk9+5xf54be297xedtT6k/wA
q38275abXmK5zkuw8xCc6/qRti4dqfyw/DD+jAf+cnw2586Ls3k04pTAzi35
Ht3xOu/5Tvhv4U9+/MHOh8pDVx75V3nOW9LTn0uf71q9WPsz+xHfGzqMrv1p
X36gyTcnax5n3PTbNc+7f4b86oOdz5SX8fRv1/2A8tJ+YK/kEfIUfslTaT+w
V/u79PiRPt+DelD1k4/YA8GpLxvxfVNPttcwP96Fpi9bbPq84aed8deOlvzQ
9XS53w//tx6fDU77xoV2Pl+o8xF+U/+22PSJ4z4b3f6I37SPXGj79/C/y3Vs
s9Zn57+ub0572aGPNh+cH2H2MsYfHUbHR/o/HGjyyMn2nvB6ixe0PucvJL/6
YN+D8nwPyjMflZf21uOdIPIPfsk/ae98ovZj6fEjfb7v/FTVT57xPcDme4/3
m/rKvYZvTuQH81f+jGc93vHIeDNHa7/Pfhjlpb3o8cpvvsP5XtqposO+B/ya
v/JnvOtxH47ue8Cv7yHj9Iz33H0PPb5O2mc+3eIPiMvxavOz3yp7xW5vxD8s
322+Vecr6zF5T/kw/yv37Vn/eO+dvKY+8lrKY/ulb+vrqO8694/Tdd7u8yzj
WY734Pt9LDr5U/kpf473M6TP+JHjnVLnvby/3i/9R8bHfFuld/5w/jRf0PN+
e7/0Dcpz3pHe+UN5GdfnQMn33f4H3fiy//H9o5tX1qMeh8F86/ZA/AnNN/IY
fvSL+pUP87fDL7r1Uv3mX7cvUr/5l/Lg/tTvk6wr5l+u1+Mdirx3OVH03Kfn
77vQzT/lm1/9fQ7p0TPe29E6D6X/8YjPlvG33lbp9ZPzmfmHnv7II36a8sw/
6c0/5Zl//DuNd7fXQTfe7HXMP/S0a79R+47zSe5DL9R6JD35Wno47Xn2ml3P
vRa/987ke8j4awebP+Bi3XfI7/wlf8YvO1jp2B9nnMHDJSegky9g+4f0zhfo
yifvKD/fRz9edOXDypde+eh577RW/ZfxAO5MxlP/0T+nP+da9Z/8+k9+/df1
1/n+350p7wPvVPwN52PplS89LL3+c37Ke7utpjd/qcVpf7Hdk201PeBLdX7K
8s9Vevygw8o3PtIbH+nTL+rVosP63bqn353P8x75UK230vuepIdTv7Jb9iv6
J+e7d1lHnPp8D/nOxJ4k4/qNuIjSpx5ryJHy61/86E/8wMnPuSofXXnaK73+
kR4dP3Dys9ve23SvMe5d8n7sXH2P+JEelt742z+NP6z/+n0p/QVMX6V90muP
9HDXb9Ev5fw/u5Hz9Wyt/90fh/zpPAOn/9CDur/N+5PbhdNf6EHd16LTd8P5
Du5C8dvts7s/S9qb3Sz/FvJ892+RHj/SS0ce0n5Y+62r6kv99u3C+R7QU1Uf
On5g7Xce0v5uz9v9MdKe5Gb5Z2h/98+QHj/Sk3vJ6/lO72sVXwsm7/X0xhM9
78O2an8nP+W915MlH5OHUm9/qej4Jd+pH8YvjJ+eXv+j5/3C1pTxM1Y38t7t
yZKn8Jv3BpeK7vv2ffp+YeVZ38mTsPJg8iGc++PZ4s96oTw497uzVT668lNf
e6f052lPvV320dqjfOnzXcJXWxy910qOQU+9xWu1HqHD6PoTHUbPOASv1fkQ
xi+sP+CMr7Df4iPs13m7v8+Q/igjDlnG4xrvMZpneT+wWuuT/QQ2n/UXOoyu
v9BhdP2FDqPrP1j/wfoP1n/wW9sVXW7nqf0p7QPPN/+HM3UuTv/Q4UcGp7/n
2N8yvsXwc9MfcJ5nxrtC9NvKg62vsPJg5aSce7vFv1pt+uQn2v32uXbOOFd0
6w+6+1/0fPd8zBcYv7D2w/ilz1QejB9YeXDvd+Wlv+Fq0x8+0fwRzxVdfeja
j6796Nbzrl+D9Rv7l7T73qt9F3aegJ3vYfqRXl63J4HRu76q65u6/gjWvq7P
gbWP/UHakR8vOQHWPhg/sPb18vp9Poze9SFdn9H1E3C+C/Rii/PwQmH7D/6l
J09JD0uvPnQYPePc35rY86b/0ULdI1j3yZu5vg19hPNMro9LzS7jYNlldP8O
6ck76Ll+HqzxVF+uv0vl/yt9xkcY70n2+G39/OO8pT50/Z3nsc2a9/qX/lD/
wvo34+c9mlI/sV8Yf6lfODGnZ0z5+cScfbj0+hdd/8Laqz79K7/+lV7/Jt6a
Ml7p1pxdVrePzngMNyf3senn8Nk6f8G+P1h+91flB/IYyw/LD5MHuv1fl6c6
nT2d/YS+HR22n3T9freH6vJHp7MvUh/9KjqsPjj95JZL3unyd5ev31p+vlF6
cfJx+iveaPLm9fLbnc2LH55Svr5R8XelT3/BG01evT795LEPffwrv/BclZf+
gzemz/6Zsz/6Dd/zfNHTj23EtbL+wek3P95pybgFt5p9/a05O+T079up86f0
cJ77h/+i/pA+7fVvFV3+fu+vPdYf2LzL+F/Haj1Jf+uB029nxPeWX3ukh6XP
+GLHaj2RXvtg9Hz/d6v0t/bFr3j4XZ/76Z8a9jfWH/MHNj/g1MO/VvJJylPj
fCZ/xpe8XfYbvg849eYLrd8Wan2CyYOw7wMmD8LWB9h6lvqmzbLj1d68T1pv
8tU4T2lvxrO8Xffz2gun3v9UtRfWXlh7Ye2FtRfWXlh7YXqLfp8M01+6v6Wf
TH/dJ+fuS/t6nvcza3P3h7D6fDfq699Rvx/r6zn9jflN/jG/4Yx7MOQV2Pff
7dvyPmSh7jfMI9+X7xk975fO1HqA/omv+OiX/uMfOV/58/5np+71c327V7j7
2aRf0IstvudOxe/M9Xxg9LQzea7djww7XOd28qNzPpx+gQfrPlZ+8XClZ88D
o+e5lh/DkfoeYP2X97h3p1w/7xV+63n99lp/9UfuDwOjp1w03n3SfvKf/oF7
nAj9I7/2S69/YHT5jVvXf3f9edcP5/3hk/X9+t5gdN8bOpx+8gfbPf/B+j5g
+1fqCUccmLzHH/I5LH++X36o9IMZ5+LVsleBrUew/PRj8sPyw/Knfdndqctz
M/zB+r66fIae8RyWy17a/QWsvzKew3LZU0sPp93neBdOee4HYP2Z8Y/Xqzzp
4R6n531/5PAv+4+Xz9b6Bqfd4bgvhdnDd3uoTL88d98Gy5/2NVcbfa/Gx/xy
/nfOMR7pP3q95EnJV//c2bdd/4rLld78TbucNyftN3/Rv/cfvfsX3v2nR/+k
n/nB2q9SnzD0A+6rpbdep3/g5aYvON7G6/hGnqfH+Vj5GbfmuaIrv/s75/lg
8YvoT26V/Jhxi4b8n/qPW2VXkvL54pz+AFa+9MpHVz5MP+H7yff/lktfAef7
eOOdR9+H/LD8sPwZT+1eyc0ph70y9266/Uh664v0cI9TmPHs7pY+sfsZKl96
5UkP97ir+gPu8xMd7vNdf2Q8jTH/0DO+xfDnzPvse4X5b8IZ3/yVijeU98H3
CssPyw+TT3rckX5fBotPlf4m+y0e/4lqV8ar3K/7J3TnQzjjVe63+/0jFfew
2wnDed9ypMUHPVLxSeG8jzmykf4BR4qPjPd/ou1rp0pO0j507ct96kqlz/ac
bfwNu1z2PM5XGX/0dtmLoMPuqa1HGcftlTofo+e8HO8voLt/RXeeRKd/R8+4
wHsln2c8wsXah6136c95c+r3CfaHfPdnxMND1x508iPsPkJ67e3x8dC1D139
1mP1+770Lzp++vsS6OpD17/o6kfXv+Q2/Zvx8RbrPK1/05/vZsVf07/2R+3r
8dnQtQdd/8L6V3rt7fHa0LUPHX/uP/DnfIcfWHmw8np+9372D/pm/KLbL9Cd
3/Pcu1z2JO4L039oxFdwH9jtT8gJyicX4AfdeLCv05+w8mD9Q1+QcTJWqv97
PIZ8F3y862A/yDjbW3Nx0sil+EfXn+jp3z/iybJ30Z/pfzLiI+jPbh9Dzk7/
/1PFD7r+ZK+mP2HfH2w+9fsQdP1rH9Kf+f7jiLOa9/2bTX++2e77N8tepN93
2a/kR8/7mLFfGr+0Txn2lvhVHjzT+wz9e/op3Gr+F8PfI+Xd800//ELpe8U3
zu9pd0r95+qc/jXj5g19a/qfD/1q+t9da/Ntd0r7ttU5/WfKNUPfqb6u3+zv
oub97aXC+a7Zbrv/GHaxqVc7Wd8d/Sk6/Uue8/fLrzfPl/slf+b7QPfqnKh+
6clD6Sd8cg53+yP0PK/ul3yLDsuvfcnveN9IezuWX/9aT/VvjzubcRFPzMn/
GRdsnKd8pxkneaW+vx7XNuMfH2nxpo5sZHzjI81e9kh7D/rIRvqhD31/j+uX
91wn5+LhoOu/vBfcr/etelwp8yXfi7pX9lPqz/htJzbSjuHkHO72V+jmT86z
Z4sOy699ye94r0p7O5Y//fDGe4Vw9xM1f/r5L+3Fxnk658vZNv7jPEC+IR85
D7ivQXcegMln0ruPQc/vYZTf78dgdPou5aOrH0aXXr+Sr+iH4Xxn4wtFh8kR
s349uEG/BeOXfINf5yP9hY5fGL/S669eXr9Pg9Hp85SHrj4YXXrt107th9G9
54sOS3d+Y+vAVy2sV//A+Mv705tTjzfgvo2+uZ8fu38puvOB8SZfSU8/3c+T
/b4PnfylvIyD81rpO2HrPnuOfDfqC5Ufnb6zY+mV38tjzyh9xje6XedX/dv9
K+0f5iM63M+30uvffn8pvfnVz7/Sk4eVZ36jw/08LL3xkN549fOx+1Pzp5+P
u78ouvb5Hswf6c2ffl7u97fo+FWe8Xc/bnxh48s+B/Z9yY9u/DuWXvm9PPag
0mf8nttTPw+nf+RW+VeYL+hwP79Lr3/Tv26t0ps//XwvvfmjPPMFHe7nfemN
h/TGq7fXfUae38d5qN+H5X3yk7XfaT+svR3Ln34tw/+u389JT96XXnth7dUe
7UWHu/4CPc8Do/3s1zKOxngnhR414+DvtneAh78/uvYqX3vRU7+yU/xnXKRx
H+Z35Rnf7l+f55Jhv27+oeOXnJny617F93SeJHfB2d79iueZ8TZHPJiM0/pG
nd97vDvnS/Tub++8oX/ldx7v8eWUh668vFddrvUWNh/og6wHsPkgfd6jLhdd
evaH6NZj2PyQ3vcPmx/Sax+MLr31Dx3OeO03i55xbFeaPL5S53fynPWg68+V
B6vP/OvxrZSf8v1Knf+Vbz3o8We6/sX+ZPy6PbP0xkd5sPTpZzf8u7s+r9sL
dHsj6Y2P8mDpjWf3X2XvmnHYxj2Z+7i09xrxF3p8CHT8Kx//6PhRftqPjfgL
yk+/m2H32eMvpB3s8C/J95ZOtO99nK8z/3b5Z1qfYPlTrzLej7E+wfqbvZn1
p8cL7O8e9ngMzrP6V37rT4/Ppzx05Vmf2Btbn2Dzgf7U+gSbD9LjH0aX3vqE
bn2CzQ/prU+w+SG99sHoXR+c74fdLntrOON/3yw6eYZ+1XoAZ5yoM7UeyQ8r
3/xD973L73uGyRO9fvJFf0cp4wduNnvuzdrP2cvhJ98VGe+Upb/nkeof3738
MP0z+xX6Y/Yo/d3d1Nfs1PkTTv3NTos7MOxvM/7ZgVpPlF/vckf8u3EegTN+
+NBHZXz+8U5RylPbJf/qz/7OH3kctt/AWf5Yv2Hl62/lw8qHld/jNDkvu++B
0Z2H0OH+7pj+hH1v9OXWF/fJ1jOYfqT766Jbr2D6k4yHeLf8c81f6fVP999F
dz6kz0r7ktentEcZ/r7y69/ur4LuPKn8tE95vepn15Vx+t+o/Ojyo2dcwTdK
3yF92sGM7yPjAa4VPePGLtb6pHznX+UbL/nNB/mNH7rxQ8/74+VaT+CcbyNe
YPdvdp+uPbD2dH9mdPzB+Mv4gnen7s8svfnV/ZvRyx7wsZ7P+JJHzK/uDy2/
+dX9k9DLfjD0rM+1eIMnyl9S/eQD+dHlRze/Mp6VOGenmh3WiJec8fXWWry+
U0U3v5RvfinfeMlv/OU3fujGDz314+sbqf8e+tUeZ9k629/BS3/7zfa+22a7
v3qxxbPaqv0C7nFJyFvpNz3eDyYfwRnfcfiXp53/Uq03GV9x+JtLn+/XvN78
10c8FDjv0w83f/uVFi9xpd23H27vTa9UeeTMfNf6iSrfeUf5sP7v9hLy639Y
/fKTB+TPePvjvJdx28f7vMYHNj7d/72/x4tufLo/fH+PN+PF357yHDne1833
l8d7ufmO1tNz9hDp73Vzyvm2NfV6pcv5f7PdZ90u+52Uu59v9xwD9zhTKe/d
KXp/77a/b9vfs4WV19+r7e/T9vdo4XxfY/gZ9Pvw/p4srD8zbvTNKe2Ihp2X
/u3xIjPO7jPNbma8F6t/e305X7cK5/sQT1b9sPqkx0++6zTel1V/vqNxtPal
9Kcb9+H9/df+3mt/3xVWXn+/tb/X2t9nhdXf/Wr6fXV/XxXu+0jqw9aaPm/E
+erxGFNv9Ew7V4/3U/Vv37f456a+/kaLV39j7h3jjKu91d4futXOmzfa+W2r
vWc63i/t9qhZ/3gvIN+LHP7C5Ol85/L1kk/R1Y+e72qN+NT9vUn7k/z1/uPj
9vX3JPO9xREnXPn2mx6npe8r5n3H/f3G9LMf7zeiw3n+G+83dpx2Q5tT2j0/
mNJ+dsTvN16w8er+z+RT7bd/GS90/KNnvIv1uXUw41MMfVLfh+xnPS54+neO
+FVw+nuO8vp7Y/19sW7v1eWx/l5Yfw+sv/fV3/Pq/nf9va3+vla3H+ryR38v
q7+H1d+76u9ZdX+/7vfR4zf096Okd77p7zf1/Om/MPz8tCffQzo950/c3zPK
eTn/PpH89oceT6K/99PjR/T3fKTX3v6eTs/f/fT6+zX5Ps3pOX/m/r4MuVB7
+3sx8msv3M8pxhEmf/b3Wvq5pr/HAsvf32OBU794vfSL6T99fO49j/5eB2z/
gdXT5dv+HkaXX+F8L/bhlOeqxVp/4P5OMH0AuvUIzvuJsS52ea2/V9DlMRi/
aa99t+wdpIN7HFf8ouMXxm/GrR1ykPmYevkRr9731L+3jJM0H2+9f9957zri
MOZ7ZsP/Nus5NhefO/3U5+Nt9+9NvWlP3uNfj/fne7zoHm+6yw89/nPf/3v8
2h5fGe7nvHzfaKvFz9qaOzf4fnt85B7/GMZf2lmNeMf6rcczho1XX496POM+
b3u84B5vuMcHhvVP709Y+3v8XzjjI6/Pyf0Zr3jcZ/V7kh4vN/1Zbta+2PVM
+f7pwTpfZPqduXi06d9xs9mtbBVWPqx8WD/0+K2w+74ev7XL0f07huXv8VTh
jCPx+vTpEx+6+v6/eaGw8e1yeo+f2OMl5ns8Bzdm5Z7YUD6s/K7n6vEJezzC
bscy+25GHEX4PV+z9Xc/8a7zhX/9G9/1tc9+0+XC8n/qJ77hoz/1z05Xflh+
WH5Y/tl4/GzptWD5Yflh+b/z3vE//lv/7YjDBcsPyw/nu1YLzW5ioewKZ+eK
hY1H1971xvVvO1f0d/6qra//zg9dKvyn/uG7v/fRz1yq9MqfxVE4VeXDyv/z
/+OXfM8///FTVT668mHlS5/vDv/s9NSn37zzVf/ps9U/9hHj9Te+7jPf8fV/
6Uph+fWH/LD8xkt+mN3ebN79++nnfuCdP/ZXr18tjH7yp7/hj/5XTxzfQIfz
PdiDtb90PanvHb3rsTJu3IU5vVe+k9n97d17LG+IdwGj/+4fefdX/92vXC86
nPFLX679F/Z9mgcwuxNyerdvRvf9osPo7lvQM/7abvljd39rGD/d/pi9Gn7S
fnmsG/jp9sPy4wc93295o+mBh/0VnPv2cluvl+vertujwbl+L7f42OO9A9+h
8YPxx14IZk+kf7p9Mbr2oMPo+gcdzjgbp+b8yWH8dPvfHreqv6/iu8ZPt9+V
Dj/oxq+f39x/pf/HepOr1tu9yXqzSxj2OjB+YOOX9jZnS25IuZO//LWie98s
399YnZPD8n3CS0XHT8YPp5e9V99Xxsl4UP52xoN9BH0Huv5Gz3cOxvcIy9+/
t3zfZrwrkPdsy3P33ik/iDd3oejO9+j6Bz3li+UWV/xwpfP+hvrR8x7tcIur
fbjOFej4Q8cfOv7Q8ZflXyu6+dHrT77O1D4uP7r86NrXz1UZj+lS0fGX8dVP
lT1hvld2ovRn3a+PfU3qx8f9PLr8fb2A5e/rAWx8087wYNn7a3+X19GNH7rx
Q9c/6Pon49Es17ion/4m49ifaeM04rTnvDpTdPz5HX/o+EPHX9a/XeeotOe6
1eznbpWdXMYDPT53rya9dRbWL7N++HTZt8uf9mK3mn751uR9wzz3PVc47ctu
lb08/Af/6pe881ve8XzVn/zdbenHe4DmYd53PKz4Suh5X/Gw7P3pZ7Q341wd
KTkRPxlv7GLR8Zdx+rdLT2T8Mr7qzcLqSz/1YceTcYqOFT+w8ZvJ4cfK/ld+
4ye98cv7k4vNb/25wsZPeu2FjZ/68WddkL6/p+feJt+JPVnxq9CNX/rfb5fd
nvbC+jP9DNeb/H+x6PhDTzvKF6aUCz7W7A9eqn2WvU3GLdopv0LzO+MG3Sg9
kfrSf/+FSp/2P4dLHkk908v1vcPar77Um7zQ7F8Hpt/Wv/JnfIwXprSXe2HK
eCQvNnuLl1p8tBcrfpX++h/+xWt/8NKPPVvrgfFS/ywu/8WqL+MZvFDp9Zf0
6of1j/kNmw+p1x/+zhlf45WS/2DfDWw8yH+w81bek+9MGZ/jlZIfYfokGP/K
h5Wf9l47NV+d4/HLHyrfidorP3332XnOeL3GE8af/O5jYfHilJfx/l5veq8v
NPuA/RYv740p18txv9b9t/p+oPy0H9iv9igv18M36j6F/alyrWu+f3T7Sr73
/ajSZxzYsS7m+9inyt7VfFGe+w908pf8vi90993yw9LneyoLdZ8Os29Unvml
vLwfPFjnubwvXix/qbTTHXEw5LO+SW99TP+vI5XO+pXvEa7Pyfv4cX7MeJQj
XtLbr7/zG79s73zxZ33Bn/VEeusRLL363YehW2/Q7T/9/CM9LP4zPjpmp6S/
2ROmX9Whph8/VPtp76/u36c+/ddxxh+60OwZn6vy0v9yxIvy3kbKoYOuvLz3
Wa3vz72Z/Zd8knFUjlY7le93OOMEPtHszp6o/OrPe5whv8HpX3q03VMM+1E4
/U2P1nih239hdPzB+LMe6B/7rf4xX/NdnItVvvkNS69/rP/ql1/9sP6wX8Hp
T3u07ovV5/uB7cf89/EBGy/YeDgvp7w03tfTP/Zj+e3HsPbC2qP8lC/Ge37K
9326h+jvNKScPOLgsFfKd7BO1PcGpz/IiVrPYfux8nyf3f7J+T/j354s/vO9
keNz9h/dX7HL98rPeLknqz3Kwx9sP2avbz/uemx0+y97/YzvfarpvU4Vn3C+
cz38sZRnP0a3H8vv+0O3/8qf8cSH/0H6f10ubD9WnvmlPO3JeOuH5uIb8w+0
H8/OdSNOqnXJ+iZ9fqcjfbdnyfdh1+f0I/ixf2T85hFvz36MP+uPeqwv0luv
YOnVb/8R30Z/SQ+j67+OM37f8cpvfaffsR6jW9/xgy69/un+q+rXXx3jx/fS
/VHpseoerL3n2eNBOQ+mfP9iycOp/75b91W+B/SMF79bcXOdB+gJun+c84P4
7NLTL3Z/N+kz7vRSzd8ez6DHy6EnTDuJcd+kPPOtxyvo8W+Ul/bRy7V+9Xj7
PR4mOoyu/6zf+qv7f1nv9Z/0+qv7c0mf9nanq/+6v3WPF+M7TzuS9Wafd7r6
r/tT9/gvytN/0tuPnN/tH10fov/T3mfEgyB/yN/lN/VnfOOhR2W/8fq737v0
6Q88U/Yc6Owv0GHnquT3zcfn0PGeFLr4+uj0cOr7J1/20X/9h9eeK+xcM0s3
3p2D7V/6gb0I+pe8/Yf2D33mamH7S/b7QuuvN6fDKxfvf/PvHe9FoeMfHf/6
A/8w/me/j3dH4G7Xhn90/MP4l94+qn/dl8Do+EeH2at3e9CMf7pZv+f7ueKa
0i/9eKXP+LEvPH7X7EzZS/b9KtfjpcL5LvW/LDp9mP1Eeva38If++pfcXvs9
Fyo/uvxZ/14rb6zf9AO+J/f71ht031ePf5b399uF0z9lvJ8Op93ZE7Vuw/pn
9l0OuvOK9kiv/bD+kR9d/vQ/H/50sP4hr+kf9+f6B13/9PheeT++XVj/wPqn
r9/ypf3xS6U/hq3bvo985/Rm+aPa73/Pf/uB7/zlX+38+mrzt9lu9swvlf4V
Zv+tPvZA6iO/2//Jz3C+a/So1kfYedE6k/a1A6ffxNNz9ivSp/3twPJnf69u
pN356kbaRazWPmm90d/WT/yQD/T39/2dzd+3+7eHvbX69HfqKwbW3+rT3+rT
3+QF/Q3rb+ut/ob1d/fX6Dj9JJ+eszeRXv923OOB5PsV98sent0F7HwGiw8L
45++K/0SB+7xrdDx13HqK++X/Tv+YPzB+Mv0L5Q/OX7tF+kHOXCPd4OOv46l
t4753sWrhdHzffdhv4Tue0KHU25dKzrsu3IfYv3N+LN7zW/wbtkvp332iDed
fmfP1n1C2mc/rP2U/kf9Gd91r/kV3p16PCZY/enX9mzpT9QPS4df+iH80Reg
0/d0/2T97fudyeUjjo19kr+B9L5v6dEzvudT9R9/+McfOv66f63xxt+/+vff
9pMHbg49nXVR/dLjT3p06TOu2HLR4YwLtl50mD+C/cl8hfkbwOYvTM/luxdP
GnZOm53rD1R8Xlj91mv1w+qH1Q+r3zlS/f1c+d1//PB3ftcPrlX9cMZjfHFK
P4WXWrzFFwuju19Ne7xx30qf1O3tYPVZb+h3uv0drP60r31Q64R+p18QJx5O
+7m9ur9Gn61r7yisfP+V7/tTfsafvD/l/eew20p/3IfN7/JhnVfSb/NU0dP/
5GG1R3rtQdceGB1/5pP86c/7sPQxsPNT+nGO9Sj9XR62++qDc//Z4dC3mC/d
PhFOP5yh3yGvweh5v32w6WPHe0D5vtrFOftGOP3Rhj5I/XDaU4prsVKYvaFy
6WW0T/qMW3K4xSlZqfTKo+9Dh9G1X3naI732onu/Al165anfeQomj0qPDqc9
5ZE5e0lYeeQN49PtJ2Hlp/32g/oO+7rs+4V9T9L7XtB9T7Dy8x3L+yUPKD/j
P96f8j5m3BNlHIv+bsPJuXuNjCMx4kHC2iO99qBrD4yOP+uD/NYH6a0PsPVB
eusDuvUh/cEW5+xJu78HfaL50u1L4fS7G/pL54v0k1tv9gKn2335eM8q30+8
WPSMf3u65p/01gP1w2m3ebDuD/BPXu92yBlnaKR33+B7R4f7fYTy8Ct92kuf
qe8fXXrl2e9h57V8X5Uf6Mt1r9DjAnX/mW4vm++Bj3U17W9ebvGrbjU/8/G+
Qb5ftFrlpV/my4Wlz3hCL09p9/lye69s+B/39MqDyTPSd3s0/dLvffL9rZdb
PIRbFV8738U4V+nzPmTYB6Ozh5Y/7YtebvG/bk0Zn3e8/4DOflp55pv0sPQZ
r+nlur/q9n/KI9/39MqD832S5+bs8/R3vov0sPRT+b7biDNo/vX43c5T5h86
jJ7xigadPAEr1/xAN3+6/iv9c0fc3tS/L8/5udLDpHx2tvJnPIjlFi+CXvlC
9Y/5on2w9psv6DB6xmMadPXD+DOe6Ma76/ek5++UcY2vVn445c2rzf+F3/qT
dU/av+Pub9bty9HNrz6O6LD8GTdjvMeBbr1TXvqZDyx9+rk/Wfn6/VqPd9DT
Kw8mn0nf7X3yHYezc/bwyjffsn3nWhz4c5Ue7vb06Oar/OYnOiy/+dbfK0G3
3inP+iY9LL35jW5+dnur1HM/N5deeXC+N/TcnP1Txrl9VPKq9S7fXxzrhPnX
44HTz5h/6DC6+dXp5KN832Dol9HNn65/TjuA+Thp+d71WrOvOd3kzbOV33xD
h9Me50KVa75oH6z95gs6jG4+dLr68z2GoT9HN95dv573/FcLW9/kh1N+HnR6
+R4nLv0tb9R7Zvl+51btn9KlH871FofihcLqzfdQrk9ph3u95D35rX/qs95J
n/60L7T3EK/XOt6x9Pmu6sst/faU90fXm33OjZK3YPNFelh9sP7I91uul78E
jC6/9Ul91iPp0z/4hfY+47An6lh68RK7PKY/Ml787eY3t9P8aXentA9+rcVP
u9Xieb7S7Ed2Sv+Gzg6nv2ed+/TbC6e/zE7J3+4r3c/CKZ/faf6/u1Pa877W
4r3davFFX2nxbnamfI/klfJ3gPM9ydulp+j2W+rPdxVfm1L//9m6j5CfPZL0
9P9w3g98tvSBPf5p6lMHTnvvh01f/LDGr/uLpF52vPfjvN/jt8LOu3DaUz9s
+ueH1d9dH8yOBnb/mH7hi7XfkmfZ4+T92eJGvi83MHqPQymd8cVP+gct1n0O
fuxbef4Y78+Zz+w9cv4vlj5JfbDyve/Z39NTPnsjmD1XtnecF9C1P9/rWix7
ufS/Gf7y5it+7Hfqt9/B6iH/22+634b7J/O1v9dEf9r9ZNLv/XDty/29+26P
ID19lfTW/zx3DntH87nH01Be2qMervLQM17twcL4y/h4hxvfh5rfz0ph/Ug+
yHc1nDvHPQF/Avut+uCUC1arvDxXDH8O/MD49T2k/9Pwr9E/8sPpz3Oh6rd/
aw+MH/ul9sDak+/Nj/Ty63/8wPg1v/t7W/jJONxP1L4Dm1fS4wtGxw/5Ch3u
/jud3uMr9Pdd/c/94WidD/BrHPr5tMctUL/9vmPliW8G+16kN/4wuvaSr9Dh
7q/T6dpv/Pv7tfoj96ujdR7Ar/Wgnx/1h/mi/pRj5vWc6U95vO47vD9hfLp+
ofv3KI88hq5cGD39tN5e2Hgpz37F3om8Buf+drzuT7Le8d6G/u3n9+5PpH7y
GDr5AUbHf/qTDntx9du/YendT6X/5/HaD6W3/8HSy2+f7PHM835rYPJaT49P
fHR/orR7Ge+f2e97PHaYvJb2NBfn0itff/f7Of43MHusjNOzVvKa8zh5DSYH
5fumA6P3uJT0FMYXP8YTXTvwo5zUn5yee7+V/Wm+B7xW8pr6YOWT1/r7tcon
r8HksWzv0Heg4zvPo2s1P9M/a8SfMV/xQ15Tv/0MJq/RX3Q/Y/sBeyDztb9f
534r5bczVR66/UN9sHEhn6GnvLBe67H6zd8eL0t9Ka+dqfLQrd/qg/EjnpH6
2fOoD2YvSM+QcSZu1Pt3KfedaX7TZ5qcO+wX8Zvy28BdD6c8WH3alf5ww/9K
/8gP48f+h5+UvwbGj/5UvvnX3wNM/ddOYftp3rftTf3+8a3jl73U9FVbTV+1
Wfuy+vK9lRebPmqz7MO7/xhM3oHtt6nvevvcfR5+M77aS02/tNX0S5t1P6e+
fO/lxWaPvln25ujWW/cz+W7viFMG5ztCQ8/tHGL9Qrf+weYT7Hvu90f9HrvL
33n+2Sl6xp0+0uLljvdr5Tde6OZvl+fy/mOvcMblHXYW9v18x3HEK075emDj
1d+TTbum8d6s8aNvzneShz8rnO9EDf0+u3zjh278YOMHG7+uD+/+bP19h/79
W1+MZ3/Ps2PpjR+68cr5fKfZRewVPfXTyzU+6Blfe7nGCz31uaO+HI875Wei
fvSMpzPi8aNnvJz1qh894+WsNz3+B+t+oftpifdk/0o/rxs1Hugw+5W/88SH
vuXf/+djv0//mUO1Xpl/1pvUM2y299Zeavr3Ed9I/tTXb7Y4Z68Wpn/1PaS9
/mLpf+H+fpZ5SJ6TH1a+7yPjJp+v8uGMK/tU6dOco+jrYHIZeU965x/p4a7f
TP+aQ3N2kj2+h/VF/8sPy6//e/yL1Cc8mvL++lGdd41H+kcs1vkO7u9d2af1
v/wZ3+d4rVfo+l/5cPrpPVXysv4nj8N5jrhc6fW/9HC+M3tj7r3jjEu2VXJP
vsc75JVu/9LtefOdmUtz9iDd/lZ69fT3efv9c7cPzHfALs3dx3Z7PumtP/xB
c7260e6nVmrce/whdPJPj59kvZK/x0tAlx/d+sYfFZ79P9PeR7nR/F7P1Hk2
15fhr5PxRe/VfZ04PvaHbr8uPf2K9PaDbk+e39Pw10l/gGHvO/vOR1y0bh8r
vfqlV3/318Fv+l18ru7P4Lxv26/0ed90suzx87x7r+7XlOf8C+d93H6lV770
ys/7nxO1PmgvfuD0exp+Jql/OVn2wnm/MuIVKA8/cL7PdrLSK1965esX94mw
/uBPhw6jS0+/BeNHenQY3ffgHEy+63GwYPtG+qefrnN03v9vt/PPdt1Hpv3r
TovXsbTR78Pt39ohPj95MuPPX5i7f5afv5D8GW9grzA5MOML7BVOOXWn4mPr
P/H50Pt9G6y9cPovLda8c9+nverT3+pDVx79DKx/4PSH4n96ud2vHih5OeOi
LZccQb6mh7OfpZ5vqejKzfcRx/0dbL4on7298tj7wOhdvupyFUxegp3f8975
Zukpcj6uVvudB3P+D38RWHvSHnKnxVtZ2uj3C+Ql89/7E8Y74/dfmNPny2/+
y2++uy/IeI4jPhh6xlc8Xvxn/K2b9W4Hetdfdn9ZOOfXWs1/+lPtVZ/+Vh+6
8swvWP/AOd/Wav6nvnrEXU55Z73G3/nO/CZfpZ53vD+sn/GnvJSX1mu+KN/8
Vp75D6N3fTw5MP3Fx/vf9H8ZP3G9+YuP9+akz/e7tptc9WJ7z2u71pP0jzxQ
67P5gK5/Os73RwbdfEv91yuT91DMD/Q/8c73fPtPrJ6r91K00/1yxg1bKbr7
69SXrNT5G8739Q63/hpx3fv73OjKQ9df6T92oL5v/YeuvzrO9z8GXf+l/umV
yXsx+g9d/6HrH/rofGfwTNPLn2l+SD9b8ddh7bP/Znvv1HxAz/bdKXsp+4N4
FLN5vVT1ey9I/bD6rH+w9U996HD6xT5d36f6v/4T3/RrXvlNp0uP4nw1O+d8
vsXnPlvnl4wTd70wOc45Cb3fa0hPXnNfKb3zO4yu/Ixf/FJh33u+Z/py9T+c
+pqt6dyPf/LVlS8Tj/DT00xPNeIPiQeCH3TxjJwXezxr88E8hzO+5p3Sx/d4
1dK7X4Uzfuadit+A7jyW8V6erfzOX8nfQp1n6ENgdPZpOf8WSm7r9Hx/7VSL
hzyw+uCcvwt1Hu105fOHROcvCdODzdIdqn2j3zuy14J7vOPMf63dY474dbD8
5nnqMW+UvzJsvU6//8N1Dlc/uQrO9yyHv5D6YeXB6vM9oB/4X9+5duvXPVfl
z95JG1h70s77xpT2RDfm4hGnPvHzLf7w2ZJr9L/7lIwDOeIBo2sPrD2dLj+M
Xxi/MPnY+gErX3usH9mea82PdNj7wD1+L7r1pMfjtb5bT2B06731pMfbld56
AqPLbz1Bt55kPKNnK7/1JPlbKP2C7xtGZz9hvYCtJ51ObrGeZDzXgdUHWy9g
60mnK996gm49ga0nszh6w58l5bIzdd+f7xqPeK2Z/6WKZ0dOzfd1XproE60H
8lsPYPNX/bD6YeXD6f/89BxdO60P6rM+wOaL/cz86PGP7D/84eHUFx9q+uBD
Vb75rfweP8l8VD6c8vV6O+e9OKWdzscLi/fnvCP9TO68Wulh6XN9e1jvRFlv
lP9Nv/19f+7NKwOLn6c+6ZUvPSy9+tJ+7HbJA84tcPqLj3dzM/1q4f7OLjp9
V+4Lu7UvzNapXyj/6Cx/4PSnvlP2DOjsHeD0d75TdPyk/83u5D1Q/OT718Ne
HdY/5o9yYPT+DnSmXy2MLj267zj793jtU7M4oeM9xCx/YHTlaz+6/oHRc/2/
VPxk/x6v91Txk/Yca80eY636izxiXLwfAZMvtEf6P3Pmy7/1uz97rt6bgDP9
bt3/K088bNj6pHzplSc9nOm3K55p2g19sLDzALm027f0+LrdfiLf5RjxH5w3
xH+A7QfOlbP19RMVnxRGn62TP190ON9Fe7PFh1goeYA83d8dsx6nvD4f37Rj
/UD/o/6MlzDec+nvu6Bb/9HZH8PW/x5PtWP8vLUf5I2av+TZtNM/2/TTT5d+
h7zY4xLM3ilerXipMPrs3eXjRYfzHblThclBxoe8Auc7iHtTykPz8VY7Jh8Z
H/Xn++Uj3n+P/49uvNCNF2y8enzXjvGj/1M/+nTpVfT/W+/7W2VnQz+QftCf
Kiy+ao73TsVzdZ/j+1UefY7yYOWZx/Yz88i6lffg9+q+y/tQ5GH5YeOs39Ez
DtBnm/3iXp3/U58w7rPYk+GHvRl+yM/yw8onT6PLj5+0R9yr/hXfL+OxLM3p
ldMuavi1z9b11cLityrPuUt97ifIn3l+fb7KN57Kh5VvfO23xtf+mvahJ8oe
0HsjxlP+HO8T9V2hZ5ylUV6uyyM+rfHFT9p7nih7QvwYT/lzvMf7qujy4weW
Xn+Ln2g89Eu+d7Y6Jzfle2WrZU+Tcuti7eMpt263+Ekvlh80+T3r227vo22X
vW6Wd67OB+QJ5SV/23UesL+Q/8k3GU/gUMn76F0O1x7nBe1xPkh+V0sekh6/
0uOPvIQ/8hH+0PHXz7f2VfJLj3tjPc04OZ9p/vk7k3j26Nqb75meq/NW2nkt
lP4DNg5p//ly3ddk3NKDtV9JPzuHPVP3N7D02tfjCM3emTpW/ono2oeuffne
57k632lf6kPGfql9aV/6ct2nwOc3tg581cKIhy699kgPS29+ZLzOEa+SH5f7
DvFnYfkznt+IZye/+wr5Yevw7D51ufQj8J/6h+/+3kc/c6kw/QUs/w/84o9+
28U/tl75Yflh+WH6nX6/YL4bb/HejS+c58YvtPVmv/Ql6NaPjqUnP6H7nXzN
/wjGf9rvD4yun7RHPHXtgfPcebKdK0d8RnT8dyy99qBrD/lTe2D8pj37wBnP
/2yd3533nZ/7+d88Rc95/3TdU9rPZvX+XGHrlfTmGfpMjzzi1fv+6RvtH/SH
MDuqWfsPPt5HLxdO+9GVJveuVPnWe+XD5nF/j5C+2vmIPhs/n/qJb/joT/2z
08UPTA4g/7IHgdHJT+gw+Yu+0n6S+tMb9R5GxrX+VL2XAOe7J6+XPgh2Hw7T
b8DKJ/8pH1Y++SnjGJ2o+3ZY+bD13f5MTjM+1nt0+lh0cnWeN46XfKI882l2
7/z2Go98v/zFSfnSK9/4yA/bf6wbGWdw7Kfo9hd0+dkHy28+yY8uP7p1zn7s
vR0Y3X6GDvv+8fHF3jXPe76xH/R31ci30ltP0DM+0XbF95He/ZJzv/sk9aV/
xnbpX+l76O9g/rnkROsr7BwA82eFrb8w+yVY/7EPJM/A2p/0gVM+HPZ93d4P
Pe2Cxv6FTq9GXkv5ctj3dXu/LP9ayXX6W/qM375c//v7O/y6M77Z4KfHeSev
5/xbrf3N/pzzbXUj59d4vyf9Hq81v9Fxvs35NOJE0EeZT7D5ZF0xn2DzCTaf
YPMJNp9g/cHeznyCtTfp59p7mQdLT2D+dPu5fOdnxKfTv+jmE/lY/6KbP91+
Lsu/1t5FHPGM4fTXWq77vZxPZ4u/jGt7odLn/Drb5vVLdQ6iP5Yf/epfOPve
h/966Jcz/unrJf/D5gN51HjD5l3Gc1otnO9ODXtkdPskuvUy5aaBzVfpzS/0
X//Gd33ts990uej2a/YR2gs7D8/G6XDt3+j6A3Y+ll7/a6f+pw/W/+j6Hx0/
+kF9sP4nP+t/WP9nfIbVwuqd9cuwh0VXD7r+z3vTgfW/9PofXf+j63/fmfbm
Or5W9yP6H11/5Hd6tdKnXLszpT3uTt3npBy1WPpJ54R8n3Px8Xzam8gjcMbX
+mzhtNsa9oTkcfnT3//zFc8NzvdGHkxpR/P5yo+edkEPpvTf/3zFa4PzvZIH
0x/75Df9rV/2uYtVvvzoX/be+7/jn964WOVnfMGlkm/de7jHpx+w7pEPM57f
Usm/8v/q8z/0m97z/qFfcF7Ic/iIY6Q8uO6B4pyyWOdW453viS4+PjcdL/kT
Nr7Kg9MOYthvGm/5M07YUyUXwNrDr8h4z/r9qcqPbrxn4/ZU+WMqz3jD+kd+
4618+dGNt/Lxl+/kDX9J402fY7zJ8+qX33jLb7zlN97yk4PtX+lP8kJ9v7Dx
5O+ccfY+PqXc9mKLh/lCna/glFs+1vyZtys/TD9B3ne+KT1q+Ku8UOsFbP6o
D8a/8cV/xr98oc57sPOe8tKfervyw6nf/Vjh9C8Xd/SVKfUrOy3+xk6LB7tT
91lpZ79W+hf7A0z+g1N/s9PiZey0eKs7dV+VdulXqzz7S76v5n7/fu0X/OXS
PuBe8/e8X/uB9Gk/cG/6rd//ke/5g7/tbK2nGR93oe6Z6bfJFzD/Qude/YWe
8WUXyh8j7X2HPS5/QuXpj9S3H6z1Ot+LWCr7vnzPZ7FwxpFcae+vr5R80OM3
6pd8d3ml5F/p8z2FpbIHlN74wL4n/OR76yslf/R4jfixPkmf3/1KO5+sVP/Q
r+kfWP+8+ofef+SZfzAw+zDrD/uZ9JMffl2w9MrL+/OVdr5Zqf6SX3/B+kt5
MP6sL/iznshvPYKlV17Xc5gfGU/wifKTyvdBjm7kery6kevxaumXlG+8lW/9
UF6+h3F0I9fL1Y1cL8d9Xfpb3y6/AvzD/V0A6yFsPVSe7xu2HsLWQ/m1B9ae
9Ku/Uth6qDzff773OOLmWv/oiVOeHvKQ9NY/6VNePrFhPSRvmJf6xXrjPsx6
CFsP3R/oL3TrofKsF2mvPOyJrYfK0x95PzfeAUn/0PE+E/22/oN93+KpmO/o
6Xc34qXRE2WcnfF+kfTpjzriq0lvfGDfM358H+jWw4yP9tKU/L80OY/l+21n
aj1in6c99BfWJ/XB6Pk+25laP5SX9qqbLb78ZtmjkcfSnnSzxV/fLH94+k/+
7l2fmv72I563ey/j7P1J2HplHhtP+kPrDbr9Bh1/+hV/XT+X/vwjfiX+nLvx
B2e84fX6T/+U8XuHvSN6xj99reRCOOPQ/8KUcT0/W5jdm3Vodv57vcYz7ZUH
5k+ofOu18mHluw9Wvu+3+6+La+Oc6r1t32vG0x5xMZ1zpDf/c34MLP1svBbr
+1U+rHz2hcr3vUoPS+9+S3ryjfrZD8HS48f4pn53p7DxZV9sPPM9QX7mJ2qf
md1Dnyh7xLSnHtj4Kt94Kh9WvvFVvvHs/tnssoyv972NZ8bfHH4sxkt645vf
18DSz+5Fh/+28jNe+amyH1W+8ZQ+3186VeMlvfFVv/GFpccPud/7x5/4io9+
6T/+kfPt/eRHdT/rnAHnueJQjQM6vQlMbyK9+E5Z3sD4kd57i+jsDeCfPPah
j3/lF56r9PjzfrLy8v3lRxW/SfvyfeSFx/22Xu1D1z5Y+6TXvixvYPxIr33o
2gdrn/T8690j5H3T5pR20ZtTxsH4N+3+csRrg81H6TP+24jjYD3O+5ZXppRj
Xim7f/YW+a7jq5Uelp79TcaP26n3pvO9jgO1/sPW/3wH/PVaX6WHpdd+6Y2/
eZJxwBdr/NDzfb7xDnDGjzxUGH+zdW/c//X4bTD+pFceed/4WE/1t3VYf8P6
m32L9PR+0sPSsyfCn/qNT8bnPlDrN6xftd/6bTykh6XXfun9Tv5Pfd9ajQ96
6tNGvOuMn/SoxaUd9wG+b3T12Y/7u2L62X6sfukzXvqjklekz/c4l2p8xOcx
PnDG/T1Q9kpwvje5VO3P+E+P2rvwQz+u/ejaa7+C7Vfab7/SXulh6bVf+ozH
c7raLz6L9sPab73Xfjjj95yu9d56Y32GM/7WWFcyPtPd0iuaF+gZn+tA+Vug
w/Lzv0BPu/mVFl90vF8NZ/zQlRpP+hHrFKz91hPfE7pxhu130psPWd7A+lN6
32Pepw5sv5Mef9Yb5cHGJ/WMd6eMH3S39KjGB934yG880GH5jQ96+h2cae+v
jPeFe7ztjGf4qO4/jA+s/fZj7cm4IHuF3UtKbzyTPrDxlN54Zv0D63/p9Q+6
/oFndmZvr/TGP+0ZBjb+0uPP94gOW9fdy+e7BwfrHp29mv2x44z/e7Lsz7pd
inUq7YUGTj3TodLHKZ/+SXmze7ErxY/9s2P5/8bXfeY7vv4vXSn+YOXx98CP
+uGZ3dzV4s988v2ZT/n9702+R+OddmtvL2y8pTd+vlfjB+s/9jTGL98bP1n2
gsar44yffLLsA+F8V+pUs88Z2PiRt/Wf8o2f8owffoxXx/IbL/zB+Y7CleJH
/bDxw5/+tb/rXxjd/ocO57teP1f27zA6+RAdxnf3h8v38U6XvsZ5tfurwc6r
0uc7M8M/AVZ/99fK915Olz5B/d2fCla/9Oo//bvvH/7mp4d/A0wf5/tkb+P7
hNNO8nKlZ08jPSw9+cn3Sj6C1W9+qc/8gvN92MuVXn3Sw9Kr33xTf59/7M1g
9tu+J9j8kx5GN797fvag6LD62FvB7Lvlh9UnPYyu/J6f/SA67DzO3to5zfk3
7X1ulx0+f4N8V2xg35/4fspL+57b0//xmz+z/YO/5FLl//xPfcMzT//+eaw8
99jkCnZA9IH9XpxdEf2geMHpLz7eO0SXX/wd+Z07rCv9Hfl8p3ykS3v0o3P2
Qv1dPPn1Z8fKE99Oec6byrPeyQ/Lb3y6/ZP8xkd+49FxyiNLdZ+b7wwebu9I
HC7+pccfuvJh/ee71n/93pl/i/o6tv5rv/K0X3naLz9+Olae+ee7Mz/pM9Hd
o5qf9JvmX/rHj/ed0OU3P+XX/+yTzM/+LuVs3x44/R1GfHX9K7/+lV9/dqw8
46s881N5xlt+WH7j0+215Dc+8huPjlPeWqr7PO3n34N/GP/S4w9d+T0+O3vQ
fM/g1bKngTNO/KtTxkm/WfKD9S/jEd6c8r2DV+v9Zvj6+w7f+tSvvVjl2/+U
Tx5QPn71S8a1P1h+wr53/MEZP+BgjRv5AL/Kwy+MX+XhD854AAcf+wFfrfLx
T9+Hfxj/5Hf9zZ9Ie3zP+tu5GP/Kwz+Mf+Xrb+Vrj/Lxq5/wm++RHar5iz84
3zsd75iRh/Drd/zC+FUe/uB8f/R09bfy3zqu+o16D4teHtY+5+W8bx5+hM7P
6V9yvcUHv/7Y79z73j9c81/5eV+9Nb322rdd+Lr/7mKVjz/nRukyftR2YfR8
B/1B3R9bl8k39CTKZ3+Zeo6B0fv74xnX6GqVP9MnjngW4kkoz/03jK58djD8
KWDnana6s3X4br1XID0s/excdrnSZ1zEByXvwTk/Fmqcuv982htulXyX+u7F
shPu99X8LWDxPtKfbqH8d1NvNXCOH7s475EubKR+fbHeS+j31fiB8WM88WO8
1G884Rzv8a54l8Oct3x/+V7yoZKv8j5pacP3Ir/vS37rh/zkJnT3KrD1S3rr
an/XpdvrpTw5sPVKefSTyrNeKc86leecldL/WI8yjvhK6YPc/8uvP+S33siv
/+Q33+kxzeeMt7Y9ZTyXrfLbt94471tv9Lv5rHzzNfWkA+d8H+/npl3n1Srf
/FS++ac88xPO+Tvew3Wuz/enTpRfwOyebLxHIn2+P3Viw3ojvfWGvZ71Btb/
aee9NfV4FmnPt1XruvWGPt160+0n+BfB4s8YH/Xrf/UZHxhd/dab2bn/VK03
+LHedPsJ/MD4MZ74MV7qN54wen/ngt7K90K/4vvK9z8PlbwsX3+P1T2Z9UA8
OuuTfL4v9fke1Wd9Sv/9zbKfyPjI6zXP5bd+wdYv5eGPvZ/1Ks8XA1uv5Cdf
pZxwc8p1QrzTTxSmX8r3ODbrvkJ6WPp8n/VIex/1SMkJ9EswfZLy0GH0fO9u
7Nvqd28M2+dg+u3Z/nOr7DXgjD92s71/t133O8rjbw+7D4Lpq5VP3w1nfLGb
JSfaH8k9zi/u8+CMj3ew7hvkdx8hvfs8OOPbHWz9O+4X9b/+hfUvrP/MY/0L
o5sn2b/jPlR5+hfWv7D+U77+hdHVp3993/rPd6Z/YXTrhv6VX/9Jr39h9PTr
WG9+Ieslr8H0gdLn+9brtd7C9DPSk+fRxUuA3R/wD5De+i89LL31AP/ypx/H
09UeuLfH/o8f/vew+wXlp1/H05Uelh5/+kt+WHr9B+u/fJ/lY/XeHXtv94TO
d/n+ymaLE/Lxsq+C02/049PvX/ju7//G4+O8mO+zbNZ9k/Tse2D6o8SLpW9h
3w7nu0ZLZU8O24/TTv/5Gk/YeOoP8me+TzP00Pxl9AesP2D9obx8v+Zo6cek
1x+w/ki8WPoQ/QHrD/dV+gPWH+aP9ps/cNmzPv7Ld7RvVPwy2HdgnDPe07j/
U77vEfY92jcy/sB28wN9aTJ+6Ye5WPXpB+X7vmDfl/rS3367sPL1D6x/2O24
f/kdl37ow3/7S0Y8PP7+/AczrvcXCktHfpjJ5Q8rPoP84gXKD8tPvpAff/Tv
+IPl48+Tcb5PFnZPj7/ZOWHEL5AfP/LD8uNPfv2d8WnYlfx8YfPD+Uf7nW8y
vtp28/N9aTL+sPFXHn6Vl/HNduseTX/09z7hlF9en9Ie6V79PltnxjuPcPrH
3q/x7e+FwinvvD6l/dK9x+96sHe6V/Gksr7d6lft6++JwtrjfJn2cCeKj9m6
91TZUcLapz7t6++RwtqjvrSfO7GhfcrXPjj1Qy/X/mU+WW9h568c10M172H9
xF8z71mP1/g49+f7nON9Seev7OeLRYfVx/8y782eq/LZV8H83VIfu1Pxnuxv
9G/k2+5HYR1x7k17xfHepP1NeeRX5ZFf5WfvAud6s1TfX8odd4rvXF+Wan7B
6NL73fdv/GHjn+N2qPQz6c893n8xn/2e/pQn2vuq431F45/pLhY9/b3HezHq
M/7KN/6w8U/92E7FZ8r4C2s1/t0vhv2j8U97yPHeYsZDGP5oyjP+8ht/2PjS
Axl/GF15xjfTnyuMnnGDRjwn7XU/oL3uA2F8aD+69smvfehwvrtwpd1vvlLx
8PhDweSQmT5kxCuC8d/tsN2vweYp/tHxLz9+0WH58Z/3ha9UvD78w/inj8I/
7Lufze87JT/BGXfjYd2XZXzhzcL0ae5L6Ltg9uHOB+qfndOPl3wEq5/8ov6M
/7tZWP30p+qH1U8eJ9d63y79Pn+8xSO5XvsNnHHdPtj8+H64/GvgfN9vu85T
6nNegNM//nrtP7D06ofVl/FGbjR8fUr5Ybx/1+WbHg8fPffnxVpH3C/l/B/x
M6SfxQ2+Wulzvi/UOmvfyPu+pVpn2ffQx8PkSfnz/m+p4rFKTz8P5/lqxN+Y
zaMRvwE2X9Nv+sYkfqD5Cud8WC15Lv1BFubksR6/Ht140HcbD/p349H996U3
HtIbD+m1nz7YeFjv873608UX+xbjA+s/5Rkf5eX79CN+rvzGC3a+yLh/L9X7
YfZbmJwEax//e9h6me8Dnqn1pOv7lSc+AKy9yoflx1/GGztQ92jWS+upeQ3j
S/7shwdTvmP2YKLnh/GfdogXKr/1WXryW8bfud/8IO+Xnsq64ftSD2yfyXd8
HlZ+50zp7TswezP5Yfln5+5n6/tmjwY7T2f8tXdU/tk7GOcr/cxuZuQ3Xhk/
7EDduxk/+5F6YOMlPyy/8ZPe+MHGS/70v3yq9lfpjV/GC7lf8h6c8Tk+N/ne
jB9svORP/cvpGj/pjR9svOSH5Td+0hs/2HhlPLV3VH7jJ73xg8lT9B/uyelH
3LenvuRIYfHm5Iedb92zO5db92H7wmyeDMw+JeXK1+v7zvfrzhYWD0a8RJh8
R17Eb863z1Z5sPz4g/EnnqX+YF+Q/sMDi5+nflh/8efKeCADe48APzB+xMPT
X9pj3uJfvEZ4JkfeL/km44MtF+ZXMJunj2p95k/qHsw+Ij+ccY4Hpk9Nv7gR
/0J+44Uf7YO1ZzZvBsav/KnfHfue9PiD8Sd/2refLSz9TC4emLxH/sj31kZ8
DvFd8Wv90h/8t1OOH5j+H/8w/sk7ymNvkPb5r5T+0npAzrcepL7zSGHfv/ww
fYf1gL+v9QD2/c/aPTD7EesB/2zjke8xni2s/8XThJ23rAf4rffJH/OjPFh+
/MH4sx7oD+tB+qsP7PtXP6y/rAcZf2dg3z9+YPxYD/SX9tgv8S+eJzw7Rw75
OuNjLRe2HszsaIeejn+19cC5XH7Y95/xfpfrPsh6oDzrgfzGCz/aB2vPrB8G
xq/8ef9ytrD0+IPxJ3/6E5wtLP3snDqw84b1IN/zG/FcrAf4tR7oD+sBfuWH
ff/4h/FvPVCe9UB+5xvrAkyv57wzG+dPlz0q7DwjPyy/8430zjew+tiBw+x+
1O/9bfXD6st3gS5XfvVLr/58z/t23WPTq8EpF32svZvw4+1++3rZwcJ57/jB
KffNHy7c34tIfgb2fhd+YPzk/fj1ij8KO5/hB8YP3PVkxhfOeK5fmIwn+Rcm
r8oPy09+lZ78Ctt3vedk3YfZw8D88WDjY58yPnDKBQO//D0ffttv/H+OlB5T
evoy2DovPyy/8ZDeeMD6W35Yfvoy6enLYPox+WH5jZfvI98DOVbnF9+D8YON
l/z5PsixOn9Ib/xg4+c9LeMH61/nQP0L60/6BZh+gR7eudE9AZx2CQPTz5g/
+DF/YP2PH/0P62/8wfgTfws/7k9g+mv8wWmfeKbeH7VfZ3zB5cL2a+eHjGsw
4o44P9if5Le/wPYn5cHKs18pz70o+Zg8mfL4+M7MY/IsTJ5Nu7TFmofs9dmx
wblvHCh5knwufjv+yG/4Ib/B5DX8wfhjv4k//kbqZ28Ks0eFyW/4o08lJ9G3
Gnfzwfulfs94jsuFjT/5ESY/mg/kR/NBfvMBNv7Kg5VnPijPfCAfmQ8pjx0p
bPzJMzB5JuOFj7i37KnNBzjlgLWaD+Qz8wF/5gN+zAfY+OMPxl/GF1+r+aB+
8wE2H2DzAX/02Oxh81711pT3qJ8uPOP7Z+v87H6QfGo9gfknSm+/Rmd/BLOX
45+AH+sbTP7EH4w/85y+BKYvyXcBXi97QOlh6cVjkN5493hYzuMZF/rN0k/R
L8DO68ZHec5v8ju/wc5ryoOV53tO/6Px7rvxgPW/9y9g94/mi+/AfIHNj5Sf
1x7buTxZ9ek35VtvYP6V0vsO0dmDwewJzRf8mC+w+YE/GH/mh/M07DxtvrDv
MT+kh6U3X6TX7h4/zHkt43yfKv2F8yfsPGe+KM98kd98gc0P5cHKM1/Sf+RM
nZuNB6z/vZ8Buy8mPzkfZFy7682O8YNTnvP/X7rOMryr4+n7cQiEkBAnCRAP
pRQpRQtnseJW3IoXStFCgQLFXVooUtyhxd2hFHdpITgUCxrc/cnzz37mXHu4
yZvf9c3MzuqZ3Z2dnV0rfhPsT0gPNvet2yXeLPLpfzDrH/IDkx/pkU96MPzm
/uyRxfeFPxeY/QHvpjCPg1kH8J4TGH8J815Welm/glmvkh5MevYH8LM/ALMf
ID2Y9KxP4Wd9CmY9Snow6VmfO+OfOOOvOeOdmPHyH1mMR9oXzP6a9TL7azD7
adbPYNbPpGe9THrzftA98T8Hs35mP23mb2P2z+QPJn/Sm/nbGH7yB5M/7eu8
P8Q5rvnO4jHLtHPa8dKc94mgkx/p6R/o2KnYD/M9ch+TeDTQ+X6gm/ec00v7
gyk/4wvM+CK9+R5GimXeT+Ueho25T+qMe0N6sHkvw8b4L6CfzPdxbWzeG7Ex
+ZOedSjpwaYd0cbsv0lPeUkPhp/yMt7M9rYx/U17g2lv0pvtbWP4qS+Y+pLe
bG8bw097gyk/+tmMI2Bjxhf5g8mf9LQv6cHw095g2pv0lJf0YPgpL9+j81yU
+xF8b9CpL3S+L+wF9Cf3Efm+oJM/dPOcxbYfON+vNt+DuyVxD1jXm/4KNwTT
n6QHkz5Nr0eIvwPnJWDzXvJ7y/RTdZHys59Gf4HxJzXf6Y2V9NQXfvQXGP9M
7snw/YOpv+lvcVveH8Zf00wfIZj6kx5MetrbfJ/tloX/AfmZ/gY3BNPepAeT
nvzgp/3BtDfrQ9NvN1Dan/0r7Q+mvUkPJj3tDz/tD6b9zffWUgRTf9Nf4ra8
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
0Zn1Ovio++Wqek16k169P/zr9snfB6mEUukWbnXzVuV9gv8dl9o+0Ee9vTXi
QGr7QKd9GqyesPfoMh9F+zTUmPbxST7519Oz/or2AdM+XTckr3q3OEDRPq9e
ZNq1aVmAon2g0z7QaZ9FJWv6hPwcpO7r9klrhyBpH+i0D3Ta5+Int1a1rxYi
7QOmfQYVrbC0QuYwaZ+Z6+f3aZQlTNoHOu0zS9PT156bccyiS9aWZ7e+ONXi
mlXuasUhI0u4qUe9LrdNeHpN7q/f1+uDHzdnG7vWzU891fQDj7+tsDnUT00O
/H10p33J1sbfN9SuUihcbdbyvjm6ZuSsHFHqnuZnfXRPyyvXdeUP9X6LVY81
vfOYpKoNp8eKvEN3IgqPf3jB6ha+P3neITsePecGuwacbd58pJ9aWOv4lXy5
H1oNv9nhd6VUiOqu+ZeMKOT507tg1SPoebHxcx9ZW+eP8xruGq4W7M2dfstB
Oz79Xi3vXt1fzy07Gav+1PI2lR24qkP+RJF35dzWT4v6JaqeWl5xPS+b9+Nd
5dyI8n4Mm/4Ntt+8Mx492Iw3+1LK/zFs+jfY8ejB3wW06pEl4rK1rszYds1n
vbfS2tFVpbWr/d4PdiLac73mp70bz2xy+c9iLmrI0epzfy4brtZo+vo7J6Mr
ns8h8igf8mjPtZqf9kbe9B82BfXLkjoeW1/M+99yO548/gMrhszKPTZ1/J1+
FRK0NpXO+Aw/MvKnldfcVfcdR79e6BOivlu+f4int4f6fPWY5dODotRDLc98
/8BdXav/SH2VOv6Qx/hE3r7nw2t+HZIo8vh+9i76K+phUV9VXn8/gaPefFa2
ib2fYX1M+YI0ne+nxKOF3UPG+yq+H+Tx/QRofsqLvK90+ZDH94M8vp+2jcdf
jfew49dgV+T7SesnP0V/wr9M9/etc9k3Xinir/h+ug3LvSTF3Y5vgzy+n3Va
Hv2JvKu6v5FXSH8/3F/Za9xPtOOrfAzz/Tjj5YNzGe+hZVHm/UY7vsrHMN+P
Mx4+uLn+fja1/qps8E+BWm+46naw49tzj5nvZ7Pmp72LXv8n67/LAtVg/f0g
b53+fpBnxksKlO8HftobeXw/gyuOLXW3jR3PHv8Zvp8XAcsKnE6lMz4nv73x
bZ2BwfL9qHtD2vebECzfD/LMeD3B8v0gj+8HeXw/yBuQfmevSW/PWmm/B6y6
o7Jv2pN4zsq5ru7W7hWOyD3pLbV7LUnsfEb0ZwltN3F9V+G7yuX9ZD+0uvCb
Z6M6h6g6X/U9kex10Cq7+tiyN73suLd9okat/O7frKqppl+Mu75t6ImsKk7n
h75doPOjfkV1fqOD9l6MWRsr8k4EfjvGt2Ki6qrL/1mnEa5vqiYKnfXp+9qZ
724ted163Nxr77N0KWJfqefft9X2/55Y40PfDCtR4ZE1cF6ew5EdM8l+fNjA
xodLtApQMw6+27ol+pqcL7jWSZO3qWmLXm9mBQk/69u3Or/uL2Nzv5oTIfQO
D+cuvVM/myK/pe/bR+5OibHvD58+5je9dLyarvNjPeyp87u15/iNXs0ShF/i
+lYv0Mrt3RMr4I9lkX1f+Mj8fCN7eIfv+geoVW4lp37f8ZHMd/Cb6+CHMr9B
r/H36M6RR2OE3m9BnmarasSLPL5P+FmPO+djc3/o88H8C53ymPN1mENe1Afz
MelZvzvnX/aj9XV/Ty85KvuGV++tnQXmTSo34JnVp265TCNPvJfyf3l307rh
37qobKvPjOheyVPmS9oT/h1trr3KcDtAIW+oHi/5eu6KrRxm328mPf0Pf4Wi
7YuO3pFN9dXyqF8xnX+tgadHnbsaJelpf/K/W3F8gvuQeDVNy2P8kP+ytfXO
nT7hIfMr3y/+jYxf6DULzLnZoWOIWruyw+kWxdOpF6VfXPp8T5TQ+R5Jz3iE
vi5vl2xryydKevQJuOH/vvtz1qr/6Yl0qt2hta1yb/MUee1/+m+F9ZXt34l+
WKfToz9I/8fwX933u9jlKX187IDIArb/Jvmlpcsg5en1Z9ix37wyqkbT48Iv
XLgn98TQd8d+P/5djuq2XQH67tH/lto/yEcw+u5nLZ/ykR/l76nz23Xpz+fr
3kZIevTdYZ0f7Qv97caTr/KsihGcnH9W3K4KiZIf+m2S27CjbVf5qkdav7E+
qaPH+8qIZpWrxPirAVq/QUe/uVzaOXDRJ76yD5+s5TE+4Ee//a7p6DfojG/y
Q7+JfVKPT/JDv5Ef4wl+9MfiTzqW7nPMX2XR+o31znX9PRap+2jM6U9tOwv8
fH/woy+go9+g99XfF/LQH/CjH8z4f64O+4bPB+sj6JTHXE+FOeRFfbBeIj36
zbk+go5+exzvuWrxr4Fql9Zv7VK6tM8xxI7b/snovoNL7QpUkVq/sZ5Bv8GP
fkMe+m1ezUFb5k634yWQnv6HH/2GPOpH/jW1fiM9+g1+9BvyGD/kj35j/cP3
yv0Lxi909FvrjvUnLs8TKvoNOt8f6RmP0NFv3+r09bQ+Qd5AvZ5KW5eEqqLT
C9W93eSszGPoO+Tn+eZJUuPVtp8o+g86+gP56Jc0PRCqUhasf/lyb1ZJjz4k
fehnM7Mnvc0h9FJaP0JH/3EOhn4DUx4w+guMfgKjf8FN+gzKVu7YE7EjY7fG
Hr6icnJ4pjrZRI9x/9lpL/fsuWnElMaPxF4Nxg55K/OMihn+c5V4teCnWh8y
P/1w6kXS1Iq23VDeZ9P2X/QZ/GUHZJtQqWCi8LP/wH5M+zHfmP3pLfoeutkf
3tLf6HfaD9xItx96hPbD3rtctx902s9pT8609ljllon+Ys8F0379s3U+OqBf
kLQfmPZj/NN+5rt+IWqztpfSfvDTfvDRfthbv9Htx3ikvcBjZ/u3+TNvsrVm
l1X0n6THVsVmXzXz2xeuwGM0fWO6VS86D/FX0MG9J5TvENfBV/jvFFvjOfTT
WLVa47T/u2u+d9b1FyXLXe8VLDhNTpTg91l2Hn5wJEEw8skP+eDVWn7a/wMV
8sHIByMf/Pxc4KzJzQKVT9m7RS4lX7KGDvq054Ht8cpX48Flth4b4vrYSjq3
r+zAmx6qSJ8u6RtfiVTg5rPL7l8z84GVY+mC9bPCvVTnCROG3KwQqaI0Rn7D
Ptuad2mYSSG/kcbI7z7Iq4rlGSLywS20/Ij2Tz2PzAgR+eDXAasKnE3Zb6X9
brR6/P7Ts96v9lvpF7/tt737Nmtfy853ym1KVFc1fdNXbZv6p+Icms75Rdyr
73rW//GqVfxL7xLnu70T/2jGN3Tvi9vLlBnkL/7PnGckaHpgiav5zjTJ8UH8
rBhNH+s58FD2mnZ8LfKfs/jiqhrvMynyd8azgk7+0MkfOvk741PN1nTyh077
pbVTqKL92hVUVSPmpc5vur3AzC/o39uLAqP2z3FX8d+d87kemmSNGP/H5S6T
3FXR5j8ciIw/aTFfwF+uZOtHy3+KUomaf/nrkXOydo9ShTU/8y37T/QH55PM
M9CjljQoUs4jVDWbHnSsaqmbFvMtdPQN553XVcTmYeMS1Rqr9w8jyt60Wu14
fSbdsEQ1wNfP6tLgtsV+jP0o+yMw8TGccczYz7E/Zj/Feqq4prMehM5+oKnW
96zXW2hMe6Ovae/iU/4LCt2dUdHeTX76LdO26xllfoaf9oaf9oaf9mY9THuj
32lv6LR35/EV0v+aP7Osb6DT3qSnvT2LX33Q+PPM6lvd3hvypo+dtCGz7H/F
b123N5j2dsaBY31He7O+o71zaTrtDV3sTXp+oL05z2tUJ1OFjiWOW0P1eGA+
Ih3zzHFtP2L+gc78c03T+b5ZT/C9emn8s9bvP2t9j34HYy8y99f2PXL2P2DG
c4+c/QZ9M9JNNdT12aTb26yPj8ybx/X+0KyPj8ynSZpOfZjfqY+vxtSH+YX6
gKmPuZ4OE0x9wNSnXK7mKUtOBqk5YyPvnd5k29+a6/WL6S/w1GJ9lq3XmD0n
vR9are/3r+Y5002t1OsZ+FnPwH+p0k3Pzi0jVRvNz3qV9RXrUXArnb95Hv3U
Yn2TQ+evfK/W6HcpSPKHn/zhJ3/4+1xYMHzyvv2i9ygP6xfK44z7znz1OLJv
26yHH8t8Rn7MRxOeXL1XMiibY756KvMR6Z3xzJhPSA/9vk5v6scUR3yybA79
GSH4nk5vfu8pjvhj2Rz6IEIw+suMg2XHxUI/medxdjwwvv9u+vsp0LzCw6qh
vqp0XETTSnPdVFjHrt/6h8QKJj/zfVw7vhf5mecXdjyvpjo/xvcXOr/cOfM2
mHslSPIDF9PrA+59BOj5HvzH7kt7Biz2Vf9cejqlUGMv9azc2YYXi8WqYxoX
0em5z0p6MOmfeE3vPnlbiKQHMz76ufuNaHf8qfQnGHq7kAWHTnva/QWePK5T
XIZtGRz+Ud6CL48eV7LqIz/Rp8wDo+N9YweNuCjxaidq/EOxPp//rWIkPftr
8M8X7hyIzWDHO8V/fphOT3zZqRpnauz6vOPxEBl3AbvnzF/b045HR3/jz0T/
gtGP5vh7ag2YNnbVlU5vZD0JHXnQ0afO7wU66znneIZOe9WZWGTJ0FZuivqY
79jGqbqaTv2gX9Htz34UeeXa7Di6qLptx/lKY9oXfuTDT/uW1fjSV4P3bPr+
rJzzTNoTMjBlUDrZrxbd5BEQOtq2swzpv8Rl/b6sgvOnv3mg8A/Rghd2mbd6
+Cnbf8ocP7Yd7/bD3acrPbbXCXc0NseHj5T/lqZT/hSNaU/2w7QfmP7En4n+
ATM+TH3x1Fr68546BZcGyHrfqc+gMz6c+hA648Opf6DTHusvl+i3fWeQ1Ae9
Rf2hUz/ojA/WDchbXtE9S80iIdK+YNoXfuSv0HTaF35zPIQ5+jtM/ZAv8D+P
98lWBzX41cLgJOtF3dN7M57KoHL0/qzdP3mTrJYuF+7eScVZatVLanQ5yfpq
dfyDc5fDVXvNP+LT0Gl/fxWjYjT//DqT579IxZk1f55T6WceXpOoCuQZ97Bt
niSrks/T/KUKX7H21Km3fkWPG9bjXgdPHTx11Zp4cFe2/q9vWenzhIxo0Tij
7D/mHJkzxf27cLVP8/8+rfjRJ9PCFfxVr/wxqk6bGPWN5s8ekJgtt7e72lWj
xaysLp5qf8HjLdtlyqhCCgy+lm2Ch3pyIktK62r+KqLCiOMjr3uoZ7kTxv6d
K1Qd2bh84bTxHurvwIybXnwWqgqEVAwovyp1HR++5GH5mlEiz7pWZ2e9WjEi
z6t/rlkrC8eJvKFL1z66sCBR5KXMSkjX889EkTex7NKj0w5fs+Y22+E1Mja9
qtX1dtZq265ZsyfNaTm3dnrllX5jixH33dVPlbIkZ06lT7zfue7G7RlU6VrZ
m5ePT6/aDxwYkDMV3+s/r2vLr9Org0lF7i3bHK6QN7fX7ELJG8MV8n6p51f6
0qgokffDb+/ef18yRpXR8lo/d7tfLhXf1fIYD/FJ48cd25VRMR6mvdnfP2hf
RsV4mFLo/r34ixkV4wF+xgP8jAf4K+j+318q64AEl8zqke7/d02eTj03K7Oi
/9kP0f8HND/9/1bz0/+dNH8O3f8dt9V8lcE/RB3Q/T9pRcuI0eeCpf+zFrsx
rrRHiPR/l8cv31VKpdP/8dF7V0fdDpb+76Dl0f+/a3n0P/Lof+TR/8ij/xuX
G5i79NxQ6f8Lzbs0Oro5VPq/wpeLp3mm0un/pX/nOxc1L1T6f2DdrtfybAqV
/kce/Y88+r+8lkf/L9Py6H/kZckYU65m0yPWL3Vvuh/+67J1tXWn04Vb3LSq
tR94dMDQS/J9gVu/+Sf7s2LpFPwnPstwZPAX6VTi4RqLen6R2s+N1w1zSZ9R
jdb0xrn6nO3km1F9ouk1es+7n/eml1qp7QdBPoUq3gvxle+b/vhVp5+yteIZ
1z+C1e+a3rnsz/feBmYV+UFFv+7Y/LMIVVWXj/77WuMFE4Lzv24SrcZo/pJz
5kU2+SZaxevyvFta7dDbr2NEXovZ2y9NTu1vyjvri4zXvStFi71j7JnlX74M
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
30HTa//+j1X7wu7GpQY/lP0FfiO/6fMl9DX7C/Q18tDXVbU82gc67dNV09G/
ZhyScEnfYd7aO5UGRsr5F/EUOU9Dv1Ie9Cvy0K8ltTzaBzrtM1DT0RecDzHf
jOw9tnqO/p7q17E9XCoUDJbzIr53+NHfQzR/zSbffBK9JEH4aX/znfpkq6qe
f83xZc9P8NM+1TW/2f/eyuw/+54L50f0B3qY/rih5x+zvX0kfiXpaT/S0343
dXraj/MQyv3vibb/jq4RIu3HeQrtBz/td1Tz037wt7zo+s2hkonyTjLtafoP
JFuf6/FO+0Gn/QpoOudT+BtMbTVv45rPAsWfgPMn/OMaVHjiVe/PeKHX0e1N
/9LejAfOx35dtvDpvDIe6qn2R+C8m/Y24+pEyvkj52Okn6j9FUhP+fF3oPz4
M1B+6JQfOuWnfSk//UH5T9x9Flt9dbB6rsvPeTvlJz3lJz3lJz3lN99Rs+87
fWz/aJ5L2/tJ532mj+0fLePcMlrl1ukXrBu8pciWEBXvWi/n1dGu6mQB/6Fj
V4aoMTldVmX5zlWns+8r5P7I+sX027DXM877CB9bv5h+GPZ6hvJlDzlS4n7d
IClfrVzR7kPLBgl93/IVi5tWv2dBz+HrN3zO1XvWyLluKVuGZlV7NL1hXPeo
Vr9lVTGazrxhGe1r789Jn6Dbh/S/6vYh/8GfTtrm3dBPylc9tMzrzu391Aid
fpCmkx666Q/24fqP/HPo+pOe+ld4VLSXNdtT9D/zOfo92/EHw6q8jBI68yt0
9FW6hp/MOvLwtlWwRZfia0JtPfLqWeD3pXJlFYy+8tb8CfvO7as7PVHo/z1s
OSxrx0QVp9vr+YpF7fd8l6jG6vaivOwHKC/jnvJCp7zQKe/ZnVXfdLiYWVFe
8V/U5QVT3nOan/JCp7yML8pbW7fvxTfbDxb/45DoB9rtuNbPvbS9EX2cY4ZP
+87jj8m6An3P/F1L63Mw+pz+oTwH9XilPOF6vMa3vtErrNFJi+8116A8x6d5
nbIYj1E6f9Z5tA+Y9gHTHuDsOj3tY5bfR5nl95H2Y/xT3mp6fMfq8jJ+c+ry
Mn4pL/Mw5QVTXjDlBbP+Yp6Ve2R6fcB6CDrroRqaTnrmR9IzP5IeOumh0x/o
l0Rdv2jdXzGazvcfp+l8/y5Fg0/cuPJQ/IyYf6pP/75e8Oin1qTNFSqsnRIp
8xDzSzVNf1UkLT1+J6S/9PZLVfqJv/pdp4dOeuhez5YsmVjRXcbj9cou+Tqm
2Pcc+e4qaHtthwNn5kb/Eiz24ky1qtSe28KOf7UnZ/NuYZVjBKPvo3T6na99
3/iett9vIb7YfE3nuzmh7av4p4h+0uuXfzUdfxQvTWcdEVuk4/bHXR9aP+3a
cKZ1Ri+xzw5v1qNB8WqZ1dv0+Q5/svme5TM/YeZ6b39pX/KjfcX/sO6mA4WG
P7DKv3g069mGIJHHfbU4nd+icmNmnQqIFvr9z/52OdwyVr3X+WW5tfanM0Fx
kh/lJz/8C8N0fit+m/qqR/sEkdc8689tvphzw3peauSKM+/eWr2vrlHPcidb
z1t1vtajvR0XEHvuHy8yV934xE2duf18Vt4uripP0tHkuaPdxR7Ldw9/TOF6
JdtfDxA6/kDYe1seq+laKjhCvdD5D9vfIGLT3nBF/vRPrJa3LnDB21xVo9Rp
nf/pjBPnfts1SuSz/8MePCP/kYoFBsULHf+i2jp/Tz1e6WfGqxn/MYP6Ve8/
GJ/QGZ9gxud4zc/8RNxr9nsSF1vPT2D2X2Dze/JR5vdk3wuere1b5vfjo8zv
x0fKN03z07/YlxivMh/q9ofO+IJOvZOu/Tyl6D0/1VN/H9inhunvY3Ghfe4t
2vipjPr7QH+QH/qD7+PrJcemVVrtpyro78N8NyJK8lusvw/o9/T3sUTnx/dB
fpSf/Pg+yG+l/j7kHQf9fVS6USZ4jV+g6qO/jwydSlxt+GmgtN8MbV/i+3iZ
ccarCRWD5PugXnwf8PN9QOf7wN7VVH8flXX+fB/kT/8gj+/jhc6f7wP5fB/Y
w/g+oPN9kD/fB+sVxp/53m8GdUKvXxh/0Bl/YMbfSc2Pvj6ica2gmgN3z7gm
62a+H9ZDfD/gnb8u8zixNlzWuXxP0PmewH/vehTl+ypQ/fX+zrUT+U9btxZs
enDy30CVUKFxlXMVz1nPL5wvFls1VNZlyAUX7b243b9PbfxnSM+sXcqFqkh9
npzSI3yzh2+C2qzlu7btG/3dq3iVU8vPq8eD6T/srpL0/EP/sx6m/+Cn/05r
fvorg+af6DU8aGCBW7IfvvX70dzPmt60dhfKXOnf9x5qxaGkfzL9d8PqMTHX
rOrKU92p8nTdyPIRsv8NyvEuLOtnEQr+5df7+F6IjFDdNX9X/80F1zWz47zT
XqyHaB+5f6rbT96vrbT064ivQ8Uf8KuZfXefLpkg8oYN9tuXeUOi8P+0pcfx
jJsShZ/+81t6+UHtRB9F/xU/eX9rnZE+Uh7GJeUx98E2pv/w96P/kE//IZ/y
kR776lSdnv41/X/dRX/Sv+wf6F/46V/46V/4J+n+Zb9/U/dvx1ULj173C1Er
df/uu1zoVVy+EOlf+Olf+Olf+Olf3rOiPeV+t24/MO0r7/Xq/sXfj/6Vd3Bn
1f6ues4QsfcsuX7o4vy4RMEST02vV37aOfvuw2pusl4x45M9sOOjaf62Q0fE
vYqNEroZf+yBZX7XL63SDmzGK3lumeP4pexjPobNe0wfYuf5vBnf5Ln4M0Bn
f/AxjL3wY9iMR/bOyjl97X9Nbwcr73SR+XY0ei/5Q49KfhP2mVeiyqDpJYa8
ja155B8Lf7U2nTy61Hp0zPpv/F+5bk1wl/7E/kV/mvdVXWV+pT+ZXykfmP6E
n/6ETnnB9Cf2nwoOjHziqYv91PCX9xVc24HNOA0fYud5mhmPOovYX6HTfx/D
9N/HMPXhPZRPdH9Wq/ddwc/a2PHCoNOf0OlP/K/ozzdNXdWjhsEqPnOFx/+O
Oivv8hx9mi+s82zeHdki30mZPS3nVhx3zfrx58yHewW8sKp4T0qu2/ualS//
4r2lavgJf5pfQ6gqof190A9Lsk4t8023bdamf9MnTa4ZKvu3tHPgMFVd89f1
PVf7bCqeovn/mug3+/GbMOWv/bmGlfL9ZWAqjtLz7/sv55T6IrU/2C/SP3n1
frDfgX2q/pWsYh9xGd/hQf2XOaS8vMdF/br5DCt3Nj67on7zlj/PNHNjrPCf
6fDIb38V+31B+on0Mr70fI2eD9H6asPE65s8nmQW/ZQWvz1O0jM+/jHWB7GS
vuiWc6ffjY6135E+FNT/9vFHsu/nt0H7uFtf7H4o9jnsAWGzhj95ejJS9vns
5+trfnn/Q/OT/vKWiOqX1r0ROhj6991WNmlquSj2y/jjoA9Gud7o0OSCi+qh
9QF09sPg4E3vVru0DxQ7HfMn8mnvoa/bLk58664mdP60So/oADWzaoZyJdN7
iL0OfvbTyEffUB70DXT2y+Dfu0R59NkbL+VhfkY+/Ud56lbbcKxIdLyapcsT
8d2cFRsLu6pj7h41Io94Kb4v1j9lPn82pEDlLKre3ZU994Skrt+etpp+fkIW
tfuTiw2S3TxUl53d07mnrlcmaP8h1i/jG/8Vf7mXlzq+omLwp//lEPmMb+R/
lnf63ZD1cSK/n3/Sizvn4kQ+58fIZ30zQcsv97/vcr+Fv9LFhPP5L73eb7E+
oz68RzrixaNeMwb7SXnQD9D5nvGH4numPugD8kMfkB/1Q94/v4XfPHQ89XvR
+fG9Qs997ZbP1Z4HxA6Ffyj3O/APZT1o+ofacWrm6v0z/qHYl9GPC7+JfHv4
K1/VTevHdnkWVfEv6avQh/i7oA/ven731bLIDFJf6NQXOu1FeWkvymvqPx+Z
n2bo8qL/KC/6Tsqr9R3lTfM7SJTysB6nPHx/pEffsX5F3zGfo++Yv/leSI++
8zLWy7GSHn1Helet77AjoMeudv4+tpKbv3yn7PfRd/Cj765ofvQF/KTfVTbn
X2v/ChA6GPqOf16dWboiUPQd/iWy/vl9QrOl7wNF30FH34HRd+g5fpFPe1cf
f+r92F+D1USt784X/6NKtgnBUj740XfIl/WVLg/6Djr6Doy+oxzoO+TTf5Sn
ntZ3lAd91zV03tc+L0JEP7AfQN8VztTrxqVpwaLv7ucaW7fTb8Gi7/BPQd+J
P4vWd8hHHyAffYd89B3yL+8t1Lb8kLPyfi/6Cnl8b+TP90b+fK/45/C9cj+p
+9C+xxs9CJN9E/rpRy2f8Yo9mvEIZpwyH2O/Aq/8dVvr6c1CxF7I+Y/z3Xfs
dcgHI5/xj3ww8rGfNBhzq/vywkGqZtDzMkfvHrOyVuoyoEHuIKUqumZ9MONf
a+PF4G9r505QtTQ9bEvDO4sSElQJTTfPdx8Lxn7tpJvnuTYmrgD4gqabcTFe
fhAf1Ek397UfxuN20tmffyw+qJPOL+uBSz9U73Iu5ZnF/PuDnh+Yf6vfKPRF
eN3XQv/rfI9zPfO+Ejr6GnnHKoTmy38hm8znP2r9DX9K/G9RO55nF3q5ltEZ
sy6z6fTnjsxXv1xrZVT0Z9M6g+qe+TGjoj+h05/Q6S/ejQGb99ptOv3lxOY9
Z5tuxgHNovvdjod4wUGnv8CejvjQTjr99bF4iE46/Ym+u6L7E/3SWfcn+qWq
7k/o23R/Qqc/kUd/wk9/wk9/Qqc/oWMnZH/QZ8HwKXHl78j9hvUTjh75pbD9
bvvbsO0D+9zNKP4MMyIX3Tvi5iP+DMXqv2pSsUEmtfPNuIUXxz+yJvZ7m3Pq
2ExqSPajI/Zff2SV25Q1vnnPzOpt/Zzd4ifY8X1Ne0uE7FduNpuQzmVkhMOe
E+bQB2EOfRAm3/er10mNo2bGSPqMjbNUajwqRvw1Hk8/1Grl2Bjx1zi/JEep
MTdi1H5d/pXdZndt+TRGDdblz7b7z88ndoxV74zyf6iPsM849YnTPuT0v3Ha
h0x76HPRXw8d+sxd0536xWkfcvrrOO1DJW5+su7ZWQ9FvP8pZ0b0abjKQy0q
ujEyd+P31q2Z7QeM3++mPndpkv/YsrfW52pvbI86XuK/M+7LixsTSnqJf0r/
6/Xu7H0aJPxmPKh3gtkvTT22pO7mvVHyPsDjQ7uGj98aJfkP6bP1QPPSUSq/
ljf5es3VU+Ojxd9j5fzJk8pFRYu/x6HhR2ZeHpkg/Ix31oc/6/HO+pDxDma8
c34+XY93zs8L6fG+OWhorS8K+qsJery3v5jks6Kiv2K8+7RfUq7cOjveq2mP
ipD1KuPdtHeFOfRlmENf2nTGO+kZ7/hHMN4p/zk93rfq8jPeKT/j3Sz/h/oa
+9VDh751d9jPSjr8uWo67GfUB3kf0/fmu522vnXaz5z+X077mdLjnfj4U/V4
L9RqzMPybQLVTT3eJ5/cuG7lmwBVQI93/EkY7/iT9NPjHX7qg30NzHp5mh7v
5M94J3/G+yQtj/GOvxDjHX8hxjv8rJdd3pf/9njiNeu2Xi9jn2K9C72/Xu9C
f5x84so3Fe9bHSrO/76kRzr1MPPQX7zm37fYn5/aPyNvuYyRqr2mB2cOip8W
HCn799I6/zPtTubO+6mvIn/2i+R/WtPJHzr579z8pEm2gFDJn/U2+UMnf9bL
sRfKpyS63RP75ITs497GDLlnTZznsyEo+35ra/nDndWVCLHHZRz77Pi2RxFq
uKZPiu98dNkm7HVLrBp6fnbV7bVZz8+0F/Mt9K/0fAv9a52e9tik01Pfuzo9
dNJDj521vUDU8f0W78piH2E/Erd/7ImCNYLU470DF7jVDxV7BvTsr9sGTi6S
IPSZ1xZuGV8lUejjijXNlS05RNWsNrfvkUZ3rHYdDgYcH5io0udon921yR3r
mcsv5Zfc8lA79PzI9zJUz4/MD8zv+yeW3dLmYJTapfkZ36wHGN/Mp5zvmutp
GzvpzniK0MM0Tqf3++y72d9gf8MfB/8U9Jlp7/NX7TQ/83P0kUrFRse4ib1i
tLYHbtT2CtJn1fYD8mc/hTz8c/BPMd9LseMtwY/+In/sHeSPvUPuZ2p7FfYy
7FXYy7BHsf/DHsS6BXvQOO2fgj0IfsbLXZfcTz57mVkxXrL+mH3a5lT8Wo8X
5sdperwwvzBemF8O6PGyRfMzXuBnvMBPf3/s/RUn3RkP0knPoMcL9gvGC/YL
xgv+GowX017iL/YOxsv0t3vL7ZoTZNu3tD2F8UL6cD1eyJ/xgjzGC/kzXkjP
eIGf8UL+jJeaOn/GC+npf/a19H+S9reg/9nf/5YUkjn97uOWh9YP7P85Lynr
M+5h29dBcl7709KQzYcuBql7wf3/Glb6quP9jFvW9GyJP5/+JquqofXP8ml3
olf/kiDpK9xdmq5lvwR1X6fnu+K8gvXoXr2+Z36O0uv7A8ML/LEmd7D6MuTt
84iyT6yFY3KP+rJ3sCr6JHjXzycfWyHanka/0w8NHOcbYObjAzo/5uMInV+n
hlvenvojQSmd3+WLhR+EH02Q/CZpexn5YS9D/sf871k/s75kff2lXo+2a/zk
Xcjy97L/Yv3MeCnp8MevqeWx3kMe+6FvtTzWh4u1PL7/0vUbrtlb0U3WN2ly
3dQM3Z9lNB39EJzcxqdYKh6rx0+Y1heMH+zNjB/Ohxk/x3+4NvDCo0ySX9q+
OLNi/KCPsG8hj/GEPMbTCS2P8YQ9mPUe6+fxejyxfj6ox1PDRlE3y8zxV4yn
qccTwqcPSV0f6/Ek70Ho8XTVYT8GM57Ij/GEPzPjqZHOj/FEfowneS9Cjyfk
f+y+BOvT8no8sX4tqsfTzdz/LdzZO1D2N6xPP3Z/AnmMJ+Qxnq5reYwn5DGe
cu+sNqjZOvsdzDS7cZCMp880nfEUMrxO3vBUjD8K67m4TJvuuFULUsOvjfnk
1Ot9Fv4l0LNFvs/et3CCGqrpfIf4m6J/way3OB9jfQUmPf5wpAezHmW99bte
j7IeYz0KnfXoE01nPYw9lfWwpe2lrIfrazrr4eKajv2O9Tz2O9br2O+gY7+D
TvmpL+vpI813vvAek07onJ9Bb/581/KU1RlUvF6fwk9/wU9/NSt2d8+GlRmk
PciP9jiq00MnPfRmOj/Wu+RH/8NP/zfV+T3U7Yv9kvbFfin7DU2nfaHTvuxH
aF/2K7QvdNoXesHhByI3TvNQcw9b6/4qe8M6u2H8w1wbotRsjfEfZb1byvG+
5H0HHX9P836X7U/kpFf3UrPbjvRTab8uak3YjlerTsaqGhoPOnxz2bIR/4m/
4Is3LfZ3DbttNb4xNzashod6uDG/tSBruPgHrl/S6W7OVhEKOvXrn+OE6/eP
fRX166cx9WM9Vtbx/l+Kgy7++BpTv4/Ra+j6pdUrUOoHHqLrh//bK12/ohm6
fjliY7DUD/oGXb9imv5/xwu2/bmc8YKd/lesp0L0/Pj62NYRxf/IpJYXWbNg
ZHV3dXDEPz6HX8WoFRr/3/GCbX8jZ7xgp3/QRPLT+pP8Wn7e++fSRYIlv1Ya
Yw8fqP1jYioNvNHzUqDyuz0hfmnm21a2LVcji7kmCP4076JsVb3td56Zl/D/
mPNZ943zguKEzvoVOvkN0/sP1uuDNIb+pz6vhr5U41hdvml/3Jp+fX5mRfnA
uXX5mL/k3Ut9XjtXlw865YNO/sf0+jhL2KgN5V7dsJJPuoyKavjE2lSgQbmp
zW5Z7IeLrKhdqUxUhLqi6cu75Nn6WdUI2S/31/ZI9m8bts96tGHtTevUzXxb
vkrdH27Q9kno2N+xt2I/hF6t7KQfVhWOUKTHPggdeyD3LUN0+ctWjs605w9/
tVWXn/0W5Ye+Qpcf+gBdfvYT63X5X2Qoln526n6F8kOn/NjPbunyQ6f8pKf8
0Ck/6fFXI74i/mpXmgbPKZ/3+gf+oKxX1jr8RVlfQ6+tMe8REK9vgveSFW2m
JKpL2r+xuM6f+Hatdf7Vd+/vnWmZfa/8Y/6JzvWYcz1F/vjjkT/+eJyfl9Tz
PefdnKfi73TtpxsFbn57zcLf6IrGfIfcd/bMuLrS4Pg3+pzAQ+ywx+5Gryz9
/+9Dr99eLDEAu6qHxBf+Rae/231SzSNBOYROfOF/dPq6j9z2jZ0SJ3TKz3xK
+cH4E+Ffgj8R/iXUb2zGPs3WFvMVfyow9eM+9KsMafX7MlP0/CyLgqV+XUev
HpA9lT5Z1w869Tuu06fo+kGnfqSvp+sHvZV+D/Yn/T70syrJdfr+ddnCHmba
1x9avPfaS/OfOpnDOlg/XOxnjI/9mr+els/7uY+1fOwnpn3LXw3S8uE/qeXD
b9qj7POGh47zNs6nzPsP9n3mmo7zHuf5Bfb8j91HZvxvC43/ZeyXD61HAyfd
nrnBU5VffXh99s6RCvy3pg+u12FmlfYhQgfzXecr/KxxnuuXrbpt67o2COWc
4KrFOUoeTX/m6n9sXLMc6guNNxw8vOiT6XHCv6xk7c9a1YhTn2s68mM3b881
dGomVUfLP9pu2KpD/r5yTgMd+XEar9fy4Uc+9L49T+Tc0cxP7LeHavpsu7g9
VvYH6IOLWt/F9rm/ofXx+xbrOVP/uagLEc0rtYmIlPWd6f/uIvePsQfizzZa
z7/kV03rt5w6P9ZT5Me+l/ygO98rHtDFe0pYfLByW7trVu1M/1lVjsV3zzAv
Qb1dk4ahb9jZKP0C90wK+nqNaR/2Bwd1+4Arru49pEJPP/FPwH8H/ZKvU9P2
0UdiZX2P/00TTc9VLalR58hnFv3POTTjqZKWX1fvv5CP/r3a76fFdRdmk/GT
1s/ZZLyRf2OdnvyL6PRVzvi+nTElQPQl38XId+NbNfzTQ30+cGFilW/ihZ6m
d+LVcE1P1OVnfFF+xiPlg075oFfU+aPPZJ6akNIoV3Kwyq/zh07+/2h6ufl/
Dku/+JLVuX7biYHeHmp7yfqtGhUKV+Dyml6mdN2nQycECx3M9+Uzc0/vjqn1
4Xui/nxPGTWd72eEppM+y7eD23yRWh7xK9HlIz100lN+34q93Ur+6aVqafuk
X87ttzMVi1Z1NIaO/Qn6PY3/6rAgLKJjZtkffblq5Ipd7WIFQ2d/AR3c5c7l
X86ecBN76Hdjz1Yp8FWUYOjYt6CDiY+P/zzx8cF8h2vabcl0NXX9jf0IfG/i
a++sf1yTecr5O0m/zwFedPrcH1avEMHPZg6ccHFduGC+fzDvcYAvu/n1mV41
8QM9sjHf2PbrUtfflA882cg/zFG+MIf8MEf+YRIfsY+O/1kwKGflFxluWK/K
NGn0rvA5i3hSxBPdVm1/4wbuEeqlppOeeH9f6PTrg45lDx/uI/GooJMeenQe
/w0rp7ip3mGHby8vedUiXjvxxff6bW1yJiJUndicMKBLpmTr15HJmR6fDVa7
9HsBlaocL17/v2BVcGLH/ZvK3rBqNY8PXVQoSvXV8ojXTvzvBzNcGrSdmahO
ank1zwfm6/4uQd4fyL81Y4VFLomqgJZndb5b6E2SnzpQt+TFkwMfWrmOhu55
/TpW7dN4Vfelhd/97qI+7x+TnLmpi/qpa5XCb9flUAU0rqzj4RPf+9t3Q1b7
BV2xRpa7OXtU6n62wrWZLertPWLxnkDQ7s7ls399zIopsanLjIvuyjdX9wdl
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
53iqXVr/P/wu9MuLh31Ubz2ffPtD1dYbr/kq7D0/ZNhWcZoKVm80XuLb4JJ3
5RDVV/N3jGteoaBLtPpcy3+dLnuW+S+j1HYtP32+xCI/7krVv5o/fvVT908r
xqrXWt6+OsU2p5xKUHn6pJV/99T+RyutTFCuZdPoVyKrTXErlLo+0+nvjp91
ulyFRLHDu02fPfd1mXvW+yLHv76U8FT8eMvr9XSLzkdC2r4OFr8K7Igv9l3b
tyfdDavFq4KPd48mHvVtx/lNirWh6YZ9U25HKORn2HJoZ1zuaNVYyy9RzXvd
Kl87/uqh0/fC/3ZLVHe1/L/GbZ176VSCyEdu7+oFWrm9e2K1fhw2av1F4k89
sf49WrNStjUXZZ3uPA9jP0L6wd/vLftvY+JRPbGC2r4sXDxTuDLThznWbdEO
ebb/jPM+p/M8y+k/4/RP99D9kS/H2trBEanzwsuj/zWsH6TA4Q9+6bixYIic
r5jnYa5qo25v+MsHZJiyuHiC4Cm/3GrW4NNESW896NgutJunKh/5OqXgBE91
8EaRksWbuKufymwYdm6Tp2L8r13Z4XSL4ukU47+p3s+znlin6awn2O8z/nto
eYx/8puWpcTugfeiBPcd0+nVoTZRws/3Qf58H+TP+oT8WZ+QP98D8vgeyA/7
LPXdq9dL0Hfs7plpUFtXieNT+MCQKhvb+Qnm+2d91Up//9hjsc8in/VVBS3/
7d5+S2fcySHy/uyVXL3B3ljBfP+sx+L09498ykd8Cfqrl16v0V/H9HqN8sNP
/2zQ8ugf6kP54Kc/kE9/IJ/yw0/7I5/2R767Hu8+ySf/enrWX+4FsF9D/+AH
j/6p2+Rnr7tXfRX652p8mQXfXMgs3wP2IfQP8tE/7P/QP8hH/9TS8tE/yEf/
LP6kY+k+x/zVD1r/DDl84auSm/zVMa1/zPNu+7wc/UP6oVr/kB794zwvd95f
M+XZ/m0ejvvHzvNwp3+b875Det0fk7751XI/HaC6a/0DRv9wjmLqxyDRP/Cj
f8DoH9Kjf/LOn5ljcsMQ0T/7Cvfp8H2HEBnPrTvWn7g8T6iMZ+xp6B/o6B/o
nfX4Rh7jm/zQP2D0D/yMd+Qz3pGP/oGO/oHO+Ece45/8mL/Zj6CP4Ecfwd9S
r0/wG9uuv38w3zcY/YM89A/y3ujvW/zg9PcLZr0ARt+wfiA/MPpC4lVqeeBF
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
jDdd6+40lV8g+DtNN292OJlOXRE8/MoIP7sn32/PuprOyj9Oq+ENFwY4T6zr
rGaLf1v+2Or4gSa44mvVttfemwb3nY7LfcImNXfkHTDKT8sbPc8jKkcffw23
HlZlV3kT/j/JB9EpqkXnf/r5KTvJL3Eo99S9NXv7q3/3jO6Uv98BI3u9ARvO
9PNXs6alfF2xaYqRMalx0nYTP5smHou7VE0wfs3fF9/rdJDm3zn24/MlJrib
lD+dVPj1ht3BarHUdzhfdOHBJ4JVOqnveLMOOdbcC1LHJR7o85hrB90fBKnp
0p+Nzr8s53wvVPfn9bjW66Z/zqjoT96f4v2Q0Q+ODZvcNVzLE9JsYZ82JSOs
3rs14/NuavNznIl+jfRX2PSZMbs6h6sL0l/dpvz8FW8qP1Hwwzacu1KidIS6
JXj9Hozwq1zt3r0H5SJ0/1nmC0gyEk7ZdrjXOlzNlP7MOMp1+C0TXFn6M1Xu
mx2W/qyXtXO5HxW533TU+LvKNOPHjlhVde780i+TzhqnlvXKVPjea6Nm1tYt
Xrs9NTa/jBpsrHRT3Cee9DmkgM8yd71/YTs84VCN7e56/2JTWN7e4T9DVA0p
nzA5fsz/zbeaW8p3qbV6h12RSF3+TMELDaaUiNTlS/xXvGvlNXb6/pPO61qp
drajY1OMGulqzA0O91YnfKfufTcsxUhZXaHg6tkemn7ekK5Ok4uGaZj3GSm/
Lfh0L5fwaF0+7cEPn9v0itT0zZ3mdXDOYqOmRu1sVnjHd+Naat74Brlt9H0p
zrPTbbB1tn//3Sgu8rK/8V7kAea9Ad7vCBR/LOv/d97+1ZgfnPfinWmBen6N
DIgbPtBkL6nfzvdNmVrzQ3X9nI+7SP1zpb3UR3uA4dvGJ/3zjzt/GYFjTzwY
8Ouz0a7Mx+cO+38ZU6PXH66TxkYd2TPxi1MhG5V5QrcY1y6/tF/AvF5l6GXP
nl5mOw8//Gvg21ULuN0Iy6Tgn7uZW0PvqaGaf/W2njl/DQjV8wj5yeBPf8Hv
St2G1et+dlDtNp4c4ZjWQV2tne18liBHVX9NxsiEDg4K+/zbvjupee8nzG1Z
1Vbn+65SaeSeo01t1Z5BNif6ZXfW8wvnKdhL4EJ2/9193sFZv79bdvMwW3uT
PW5ZM92keWWc1Ze61467mOjBv1hpv/K9yR7/LXhr/sCs95gPgJkvgImP4z5Z
nj0niw3s7a/x2GPgIS97D7h0Lkzrxy7bq8ajroZp/WDv0E/3S46TrzwM1fpZ
9Kx04JunoWqv6Af7gvzYH+Ag/yotCnUI1+3PUHpo+wEm+4Z+xmQLmHfARA9+
pM2DqX1N9g39WPMHpj3YV2DsLzDxfehn+YcRfxWvbF5PFz3w43CxpBgNXzjb
2uHZ6Yc6v3tr95W9Ds5M1nBsu0e9Pl60V7eLZ2zuVdlZHc4waMyby/aqt51q
V6K5s6pcZuvsjAcd1eZC3z+N6+qs4gvcj153zlFVm9zwR/mgNHr8/Y7bcFF9
d28IejrYU+ub+Yj7f4lOF3v0Ns1f1M98B3ylS3CafsPDtDw/MhwaV3hEmJZn
YczEamVtw9UWkSdmWfKWVQ7hWh76G3nievTZ8e5ipJaH9pMvHv0At9vmEd9n
TrJx50S2tRsyp9P5o8Z/Obo4PlM6nb8goe5fRsL9dDqfEvkX8J/iQx1PXL7l
ovOofgspc3Zifnd1W/wl3oNi/FM//wsw/wsw/hL5cfGXhkfU//HXDZO84i+B
x18Cb80fmP0Q7AFw2ndLctl2c1c1QtqXf/QpncJ/Yn8E/+lehUol1+x0VdvE
f+oq9/H5X6mP/xkY/2mC6Bf/Cf3iP92V/mC8UJ7xBIy/RP/hL9F/+Es7hT/j
k/7DX6L/8I/ov/PiH9F//J9aHvmfgfmfgfGP6B/8I/oH/+il4PGPRgjemj8w
/YW9Aj6XWOFT/+yRqrr0H/4S/Ye/dF/6D3+J/AvYE+rD3gCTb4v+I98W/ddx
44tRMSZ6+u+k+Fevdtx62TPKQ+FfkY9kovhXnC/gX3G+gH9FefyrZVIe/4ry
+FeULyb+Cvc7mc83tyv48XVeL1VT/KufN0YEFsnjpT6KPwM9/gYw8zXlt4t/
RXn8Eejxr941rWZ3Zp+3uiL+lWW+elvlMeR+/L6z3qqQyMv5wxeRBzhM/Cva
gX9V1zP8e7NK3gr/Cjz+FfXjX+k8S+JfUf8caS/1pZP2AONfrZi7IrLfQNP6
VfyrFW3uPNw3yEfhX73+0C7adr2Pihb/in1R/Ku89cZtTphtft8cfvhXwPhX
8Me/gj/+Ffzxr+BPf8EP/0q9HtFx0HQ/dUX8q4T43HvqH/fT89vvuOQA7V/x
3gf+1fM64RN2xwRo+0m8h3XeK/wr3g/HvyqhYlIq5g3Q/hV4/Cvw1vyYHyz3
O9NqmPkFGP+K+7DYY/D4U+gDfwp9ML+iD/wp9IE/hT6wR8iLvQLGn6K9+FO0
F38KPP4UeGt+2FvaAx4Yew3sV2jRroP7kyVvXYD2h/rl39RgRMEA7Q+Rrwh/
6FGeRVFH4gK0P5TvzvlVYQsCtP+DfnoPyhN+e7yf3h9mvkH/zF/6faB9vYee
OBVk3g+3S/c184kgNaxI3Po4j0DlPTzLJcOEZz8Zfwl58ZeQF38JefGXkBf/
CHkPf3P/7n4tRu+b1/KtOfTogoeGzv8n/sDs903yLKxy1mB+mS7wlb6V7sel
phh54o/cHrXlhY4bfiHn9+cqXj1T+W4GlVvw5KMmPmBvRMVJE3Ob7LFdybnx
nU3r3cI+LW9NSq/Xq+dmd0w5n8FLrbrbdsfTS++M8aPbVPhS1kvn/2CfblrN
OyPShaUY7VeV73Z0dZTmlz/vuoYdrkdpft0f1Fv6KFOUWin8at6ofT41b5Tm
x3nJdOGH/3P0SXnVfqyj2nk/zrHbX/5qeewEr7v/OqpNgV1Pls3lr8//Cp/f
+PhJM399Hs/8S/mnzsfXFcgfq8u3Wpo8ITRzrC6f+Wef+V1LxurySaLflKVf
j3Zy9tT72pyvnxX9gke/nN/vE/0Wrpsy6Vo2L1Vd9Mt8hX63V/l+9bOjl0K/
5DdAv11fXK+oAr1UvOgXfvlEv/BDv/CrIfqFH/qFH/rtlK7cqc11/LV+b2d5
trljVX+tX86X0C/n5+i3s5RHv5RHv5RHv5TP+veNb01T3XU8xsw3AatrV43U
MHjO+8EDL2o2v3q6s+wf3DWmNju6qHKFX8b7iU/s9r26ayw6VPvDgjGs/+8a
Cw8VaVK+b6gCzz4u8XLEtxoCLxb+v+MW3dQU4e/r9fNy+8ZuCv7gFwh/8PAn
ng7+2QT+NHtUc+chPlq+kS0fN7BNjNYwePiDB7526GjCmisnDd7XJR/qh9W/
86suGOczZHDWU3r/+XFy0SqVd5r34y7UfVSmvwluOPnkrrQljmh67HPOGtuu
Ds10yhh/t6OTy6AARXnwq/5+Nyhxj73e3/weuLxJdxMcd83hzbefF43oXQfX
fOllL/bturG9c5MKeQaFaXqXxqcHB5ngckLvNzzx8rdOYZqe/4P9HMY3MOs/
/tczl5/kXr/qpkH8DesL8K3WtIgZ8TJIx+cgP+tX5A87EZmY3NxFIf/vuEhX
hfzQIz/0yA/9eZEffwn5gVNEfuJPzon8xJ8gP3jkB8//OEf2m89sjBrcpa6/
1p/x7836TYL99HgKLjJmwk1fP1Up6VLkslF3jbJNb/cb2SBI55c6/Xbd3vS1
gtT+453T56/53Di2KHR+wSpBau44R9cDl54Z/L/zpL5ur7c+36bzN1031tXy
vLpuQYyub07eNu9ezI1RVaS+aeKfMp/gTwI3sMted2ElN72/1MCh0fXTmd30
/hLnTuTDQP7f75/YqYi6rwZGPYxQ7aX8Uv8+i7rciFD1pDzx5XelPPpj/Yn+
6D/0x/+G/uLD+zSOLOOm6yc/DvpzznR31ontHgr9lZhUtu6LGR7a/lEf+qM+
9Ed96K+D1If+sO/oD7ih6A9/sqHoD38S/ZHvA/nz5CqzNu6Ir9ZfSSmP/iiP
/r5L+cjus7okf/loFK3T4kiea7Yq4VDut3lLfzFyram2znaPrboX1/5t7kUZ
Ffhj86tVO5EnkwL/0Pey+7Uhrnq/62jEisEV/nFV1WV/Cf+H/SnHkKvrt2yK
0PT9F46tUG1DhKbHP7oj9Mi3pmRNV//+vlq+ZfEVBv3s5KvlA4984JEPfw75
8OeQD38Q+aBHPuiRD/qx46otPO7qpf+/xEan+jT3j9IweMYXeGDwjH/wwOMF
T/9eEjxw5V49ln+Y7SDz6ROjWb6Bl/ruCNOwZR641D/g41Yw+XX/X+EqUv/v
fR93Rf3A1Mc69ZQVfMwKhv//K2yZJyrVsIZZv/4v+Frq7c8F4ty1vrdm3rB4
TJi7ynAmNi7rLDv14L63vd0aN9kfsFd2SYFtK0ZEavrUReNrNAs0re+FvqzH
kywDvkVoems5rb/I87/gZJGP/t4m8s39d3sV71u+Wr6EjHljcxT0U/YiH/TI
Bz3yQe+y6NiPH6fd9Xw6cd/UzD9KR2oYPPMVeGDyHzNfkP8YOHutabU3p/dS
t8vFFLrQ3E4tVi8v1wmKUncFpjz2kvLA0VL+5878xx4d9FULpPwvgVm/l5J8
D6z/y8v5JPg3VufbhkXew7TynleSMXR02sVtXqZTc+V8lPVweeHPeloJf/Cv
rM5bi1vkNQtX7wX/qvffU/wrRaj5wr+WffTDeVtjzfej++8ZNWl7rPavLPOG
PzO4jwJs2Z6XGg4UvOX7Ls8M7qsEWOFLSHngIAv+qcapsj332YxJMY7kWzar
/JBPButD9q9YH3aIeuix8eA3M/78/iO9ynzVePan4BdXpGOR8Ycy6vUm+1XQ
F56bcVzetKFmfGiPsoFbzHjLPJWphuW7bKmGvxXesHiXjfNVMz7Xy+gFblGf
jEUj3SMcOnw3gufsW9ii3Rfj4NXe9xIbfbfKi5eq48CBrfGW77z9ibfMQ5f6
Rz59a7w1jD6t8+X/Lzz51f8XPvLp2d0l1mZUtH/hpbzfaxbLpGg/739ayhOp
YWs8+db/F574TmDr/P3WeGu4m7z3RLwX+ZDJv2yZb8xB/Qi7nX53OhcNW8a7
/En/fOrtYr1M9qCqR7E2lUx43q/hPR7el4Ke/Mrka7bMb+agXBZe77SuZsQf
8WzUb00/cnf9PsEme0H9vHdD/Zyvcd5HPmDii+8Z79IeeGtvFc+cVudv4bxr
bYGca9e3NZ9HQ3//n1Ydthxhf9aMt/5CP/B9sxYX96VTpSQemfOjXiJfwvXa
IwK2B+v452GtF6zLPj5Ml6f9yMd5zhqRz/r817FH0eFZSkVo+azf07Km71Bz
l91mFaHlg458BswfZ5wGBDT49ed5n2U8lusfeOYPzouoH/7MH/C3Po+yjA9y
/QPP/NFB+FM/96CYH4At8/V5/kEPf2DmB2s85a3p+Q9/rdx/vX9eL3VC5gf2
t3xlfmB/q63MD+CDZX4Ajz2CXwWZH6C/JfMD9MwP4O/I/ADe2i9MsXq/ws8K
X0LmB+AgKzzzQ4+ER5t/rvVWQTI//FtpUIs8q8zvJ0Nvqbf0f+At86L+ibfM
k5j+j/czrPHWMPq0fh/jf+GZH/4XnvmB9jM/0H7su6U8kRq2xjM//C889t76
fY7/hbeGmR+I52R+IJ86/wN45gdgS3v5Jz3zQ96MB25FmPDMD/Pl/S3mB+iZ
HzpK/fxP4JkfrONVLfPimumZH/JJ/cwP1I/9tz7vIt8T9v/epp0Da5X98zwM
+89+oaXdD/yDHvvPfQDsP+cr2H/Od7D/1udPyIf9Rz7r8ynsP/JZv2doTY/9
R75Z0V3Pb9gVq65sO+M7+mmAzp9KflTyp5If9d8PX674tXmm7x/0nHJrUsWU
J8YxiZcsF/Oo4P7xL4z3/e61j/n40Lj2+XSX6AzPDd4z/L582Ztps24ZCyL+
802OvWV0K5B7fb3gO8a/dz7HRjW8Z2Ty+y+hZ3ZHHd9fsKTXmVWFnDVcf1bV
7U87Oar5Up77J5Q/bh+Up/BnBx3vT/zbV7lP0PND/vgd/s6K+xFfA3rdrOzi
ovmnL3PtzUA/Nw3vblWjuJHNRd9PoL9LyvqG8R8n8aPW9yuuHSyU4pbkqhaJ
vI9rPm/X2tFN9RN59bwl93FPT/COy5/TQ68f2U/c8+lZ/qum9rCf+F3aw/qX
/Q7u51uujwK1PMAnBV5VMSLn7SohGt/mTtNjZUJNsPSnbaIqumVqiPoo/em9
rnH4olYh+n5I714llg77FqTbN1D53/nPO1j1lfb5hFSp1/Cm+X3S5NbRt2Ka
mu9zLPm+7eqOl2FqrpTnPhD9OWDmqk+nz4WpedKfnC9zn2XN1DfDXtQJV0nS
P6dvGmEXa0Zo/pNjAlbMv2KGv23s2cetUYTuT/6PMtKf2JPy0p/gj0l5u/L/
RZc8FqGWirwj1s4rUzcxQvURebl//Ub60/ja+vupRpG6P9mfTJD+ZH/SxuV3
e9ifoD/Jp6DzJFit3/7/76f87/so2Y3wJ80q4nfbqdwnknapS04aHtixRcyO
eQ76PcvWeZrXaLDaSb/PwvsqvHdvOd5trfxOO5Wv0JrpRQs7a3+e/2GZnF8+
kf+B88vR7q36BHz01fSn+sbe3xThp9cTOUeV71j6P18VfG5sn00P7VWGDVlG
1Lntq9/nZL+b98oY75brHTM8uNnkvwo7B+n1hTW+7ornD5KWhun2zBp19drZ
sub7Ny83fe2eNSFM6yu65a4StYqGKz/RF+/LoC/L+0y2f9znmb1s3MRKTc3r
H8Yb+mK8FRF9XZh/+fHosTGa/l3NAnOvLIlRB0Vfy5KPNsvULkZlEH3N7Vjw
VeygGJUg+mK/Hn1h39ln/0fsO/F5ZcS++4z7nqNsU3eFfef+DPZ9XO6vM/yO
uyrs++fIIQuO9HZT2Hf4Y9+Bse+Ux75THvvOfRzsO/d9sO/cX8K+wx/7Dox9
h956fYN9J17R+v4T4xl5se/Iq9cRkk/hlNh39vew78fX7At7Z2oP9p32YN/Z
T54o9t1y/RGo5bGGse86j5LYd/oT++4r/Yl9pz+x77QP+077sO/wx74DY9/H
SnnsO+Wx7/ulP7HvtB/7Tv9g3+GPfQfGvkNvvZ7EvtOf1vfD+N9oL//bJ5EX
+35Z+hP7Tn9i349Jf2Lfr0l7sO/0J/ad/ixltf7aYnVfzHp9Yn1fDPuu81uK
fQfGvvPerbbv8v4S9p33lyz3h8z7zfDDvuOP8z8QP4F9J35ilNh3fT9Y7Dvr
Eez77B9PWtcZ6qftO+/3Yt95X5DxbrleMcPYd9YH1njsO+3BvgNj39FXlNh3
9IV9R1+W+1m+f9y3w75TP+MNfTHe0Bf2HXrsO+sn7Psc0dccse/oC/uOvmYs
GLv2Wv3TOj/YqmO1zxxZccaYI/vxOdZ/zjp84CkjTvb3l/XJ4m37xl7f16pY
sWqU/XlHc75RuW9tI+9XEf/mKPfLSg1NSLMgyTRvyf21yP696nS76Kgc5f7a
ptYx5aKGO6s9V/qcT2k80iBern65gZcfOZ02iJfrI/fZHrkXHvq+h6uuf9zd
xtM/1nLX8Osr5xfW6+Sqmkt93Pd2l/o4D20i/DkP/Uf4M75/R69NKcZ6rq/I
B76Y1Fd/RJuE/BXc1SZ5f6xjsTQZnTu76/t1vu/qlVsS56z9v9bXkqvtuuCq
330h3i9a9Ld1acfUWbuCdXs+bn35eu+4MA03ffZP930O5vtz3Cd3kPLE89lK
/Y0LVsvWysnkX4g+kj7uNxo4hquUxr/1Ufjt2m/luoWrC9I+4v+qiX6I/xsi
+inb4O2YIhvM9/k2TujjUTQ6UsN/ufolTl0XodpKfdxndxP9c76M/jlfRv/8
L7/1v6YY69UfSb/lA59X6gv/UjRgbESkKiL6Xxm1rOv+bJHKQ9p/sUZC0dYt
w7X+V5ypVyLb0Qit//xn8/m1L/hW5yEjH9yijHdT7T2fGavlPRLyWrOO+CDv
m+FXp2vvtPH76ldGlJzX/9NwpBEe88rYIef1i13OLXw80/zuyUmL9Rjnb4/+
OO/ivQ/qj3LxOhfZ0VNx35D9tR+1PV7tLfnYWFij8PSp1Tz1+uF63Mac1xZ4
an7k+6N9rZtdvJ6UM4PGk99uoeDPynsr1E++1TfS/swRc3ps2R2kdqVvVShp
7Fv9PtqOgemLPuj5zlj5vpvf0ytBsq/3Tp+3oC/iF9AX8Qvoi/4+JfoCThF5
gP1Eft5DQd5M87J4TToeqaqLvtiPQ1839+/rUX5npNZXn92pB9vdNa+3yF84
W/TBPHurTP6o3MtfGbXz/lUun0d6LX+RkTlWnFqcXstf1TNjwpGl3hrffk/B
ejm8vDWe8274FchV7uzMWVGaPnODwj/u34tSi4R+S8bcTndbRKuegj/4ofiV
aYHRGm+5DuN8L62+P2k5vlI1/Pt+xtf/cZ4XpmH0nUX4We43mfHwsz4f6yj7
3wPqlncbe/mX4S/739x/7D2zTsIhm686/oZ7nM88FlRId8dW1b9T9Ni6Cr+M
SumnhgTmt1NBJZ+0a5PFRscjPC7d2nV9O1tVesma3QMz2ut11qy6NtfHTrZX
77f6Dji/xFbHJww4ljmunJOtXn9xn6JL1JnaX2/Z6Xt3vJdNvDHyE2+M/Pr+
reQPov+JH6L/aR/vnyF/EdnPhz/nvfD/lFjfLtsSc/wR/iD66TXlWamafUNV
RdHPpcdzh800+YfwH7Gy6Ku2L0K1fuhf9HNy6MrRm1JDtX6yjepQbGJiqNYP
9z26in54j22w6If46YEiP/HTyK/vF4t+tsp4Rj+MZ9rH+23IX/5BhRFjS9jp
9X94Tq+ETXPs9PrfacTpqYM7OOt+y9T6Q+8vLZx1PIf1eSfnVcRXg6c8/sub
8lWcZn1Po/BfyE+E/0L+oV4lE7y8M/rreD/evyNvMn5cssTvMf9zHtjk/Nax
i0LDVIi0r1aL6IA1BcP0et39i49Hxg7m+6A+uZqe2N0uXLfP+jyV87Ij0j7r
+6T4B6+lffgHtA//gPb9VfBnHufQWN0+3t+jfeTjvyXt43002pd1x+gTh/bY
6/uV3E8sXStTi7+i0+j7iZzH4n9yfwz/Exj/c4b/GY/CRlp9/4L7ZPhn1F8t
aOaCAjXd9Xko/iT88N+478d9wyXNDzmNjUyjwlNauzft7KflrzusTKMcg8I0
zH092sN9PdqDP0d9+HPA+HO0B3+O9uDvzJX2hN46Xv10VKRuD/4Z/PCHaA/3
72jP/Im1c68/EaPl5/yc+g959Ovqrx4Z3OfccvVZjvvT8ANc9P9RMn2RJU3K
p9X/R5pVla73fJhW/x9vVniXr184rb4PMyBs3KZ2ien0fRju++G/ww//HX74
75THf+f+pvW5PP77a6nfcr5Lp/MlEs/KPsH5mZfahVZz1fn3iG+1Pi93XPrz
Tt6R7jqeGn+f/QBLf99V/+/ol/MgYM+J3Uv9PBms7896tA2bM/NysObP/1pK
9MP/in74X9E3/nx/0Rf+PPrGX0ff+Ovww19H3/jr6Ns63gB/HX1b3z8lXyH6
/m03ItQZ0Tf5C9G3dfxA5f1hS07lidT6wL9H35b+vau2P+g3r/j7+j0b8fcP
5ttT43srD4W/T15w/P068p4ofszZB3aqeDlPFSv+/jdb75R7+T3VNvH3ba4F
D/ha2vOP/UJg6/cAkee5+Pvg8fe5v4p/Nstu1Pn2m90V/j77Sfj78MPfp32t
xN8Hj79/QPD4+9SPv897qvj7RRsW/ZKyxVO/R9p3++Pe2197qlXi7//2Ezz1
+Tn6ui/+Pvo6Kv4++rLejwNGHuv4C/x98Pj7L0Vf+J8zRV83xN9HX/j78MPf
3yf6wJ+L3X/i3NKynqqO+PvIX1j8feSvIv4e+Hjx98Dj/8CvoPj70MeKvw89
/j74Q+Ifgbc8R+A+b1p9n9fyPCa9hn1mr9n7Or33/4jPCNMw+oaf5XmFGQ8/
63gH4iE7vOzeMXSEjyIekvu4+PvEq+PvD87Y9fyQQb6qnvj7mxfGFxqz1lcF
iL9PfC/+/oY2n0cWD/XT+qhXasmMw/X9tL9PvG9/8ffZj8PfL5M5TdLXX+Y8
9FUlvyv+PvLj7yM/7SRfIv4+8fj4+7Svhfj7yE/8Dvzx9+GPv095/H30g7+P
fhLF34c//j76oX/RD/4++skq/j76wd8vK/rB368s+sHfR378feRnvKMf/H30
g79P+/aKv4/85cTfZz84TPx99jfx97nPi79PfLZ1/Ar+PvcFwVMef4b7s/gz
3J/FnyF+An+f+yX4+7yLgr+fKvdN8O/Zr8W/pz3498iDf097rONh8O9pj/X9
ZvyFodIe/AXag79Ae/DvaQ/+Pe3Bv/8m7SE/KvWRD5X7lOTL4v51TtlfBs4m
6wHuE7MeWH8g942wZQF6PUD8C/488TNVxZ8nvqWV+OuNyw/NXnppgPbX4Y+/
Doy/Tn3469SHv50s9eFvU1/Iv9lupZ6N0fdh8Kfhj/88V+474z8T3z620utT
5wem6Puf+KMz5H4afsym2v3WxXa9buCP/h63163y450x8EfhH3rap/WXPn5q
kdSPPsDjb84SPP4m+KIHfpV7czCD3j/FfyM/HP7bXJEP/w35LM/fzhj4b/BH
f0ulfvQHPr5xvwXVq9io6ecbtt7fy1Etd5tzK/rIL4PzavLJcH6P/w3+yasD
XlOWheryJeslDR8yOlTjyWdSRcrjT4Kn/7i/tVX6j/US49Haf4cefULPeJou
9KOl//Ff6S/8f/oLf5f+gB79QY/+oEd/dX5WbXyrkr9aKfrjPAj9Eb+H/sCj
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
fKaznBdxPrNKzotm3N1Zb+P3Vwbr1ZsHHg0enc9F20viLlJkf4x4ZfJREj9P
+aztGhqT74Vo+PCIuelCm0RofrzHeUf4EY8MP+KPKd/CaV4H5yw2akG+8+X3
jvtoJKfmjW+Q20bfA8EeRK8bsfh9tY9GZEDc8IFzQzW9ve+bMrXmh2p67AH0
84PzXrwzLVDbv0DxY8LkPPqTmuU99rVp/l3qleB500Z9Xfj4fFiCo94PrJGu
xtzgcG+d7475d5ztk05Nb9mosh7ns9oU9dX0p6LTdF7kGq52Cb+x+4IzOv0K
0/htwad7uYRHa37M1/DLuSDtgf45YjQ9+303JP9ardlLojt6OGv7y//He1H8
f+daHP6SdpKz4v+Lql9t4LyJ5veuoO/m/tZY/I+/htlPJN/bvT2n3l+rZbb3
/C/Q879QH/8L9Vnmr3DW63fgDs9Lll18NNkATrJ72Gb4JXsdL0b7Vn7xPL2q
bzrdvhafj2x8uSWdbp+LbaHMDbamU9iXQx4Pim0zXFRVsS/ED1Tc8u+IuL4m
v77C8viSDs7q3QibngHdPPV5bqMFA7/OauSp68PeNJf6sDeuUl/n2I/Pl5wO
0u+9lvQPdrgzPEzLj77gh76QH30hP/YF+bEvyJ+nS7OO4ecitfyODcIfpT0V
qeXf9ah5TIX9kbo+7I2WX+wN8p8Se26dD439iIZ1l6muXdx1vJelfXVVlvbV
Vb8HbZ3vC34ts1X8Gpg9UvOztHeuytLeuarpYr/YH8N+4S9gv2rL/jf2i/xa
3K+gPPYLGPsFP+xXNeGH/YIf9ovy2K+tD3y/Z/vgpW6J/cJPxn7NODh0SpFH
XipK7Bf02C/osV/QzxP7ZemPmONfsF/tnmZxcvrlo1LFfrHfj/0ifw/2q8bM
6c3Xm+jLiP2CHvsFvzFiv8Bjv+CH/YJfDrFf0GO/eN8Z+4X/UTVTh1GHJtjq
/Tz+7/fHh66wqx+gbOX/zlj61LPT9cz+P/RdxX4BY7/IZ4P9or5mGYtX2vAh
VNPzP1If/yP1MX6hn5B16JFhicnGUvvIo51bByjiNYiPIF6D+AjsGfFe2J/D
uz80zegdoO0P8SKdTl1fGj7BnPce+8J9CuwL/HKLPYAf9oD4Ev5f8kscnrjB
4fK2YL0/xf8Inv+bdSrvj7M/w/8KnvfCwVOe/YfTUp79BMqDpzz4tp/HGhO6
PzU4X95xcFFKwranhoNXXLPEXa91/Prliu0aFRn7wWiUt02p8aEe6uEVm3Fh
DT8Y7VqFtB3w2l1dvBhXpGTRD4bjuvwhHXOF6PPqqmVnddtcKETZCz/9/oPw
a/lg99fQ+pHqgfB7nDNzmfmVItUF4afvl7hnqrQn4YdxOTqsdbsIe1Vp6MiQ
pKc/jOMf4lXv2vaq6agSnbal+anvY0L/eXWexpvD/VRloX/rWe/UzqKmcSn0
93ze5i/j4qeuPs29p1x3Wx2f2VDKl2y2xv5a/TBVUcrv8y6+q2HrMF0f9+eg
Hxm/+1qdJTGa3iFTlYnJG2I0/Y/QoKMLZ5jW21JfC9E/589bRf/rCmX9VLet
Of51cLtiJc9s8VKNRf9lK4W7HVvppdC/zditX84u9FIOon/4oX/4oX/4oX/4
oX/4of+I5Mx7s/3yVldF/80+l36Xx8VHof9lCZscs3r76Htt0H8R/UOP/qFH
/1/SFU2zuIKv1j/l0X9TKY/+KY/+oUf/0KN/6NH/Z6kvZ7tDfb8usFHTNy9I
57nATi1/eGFGn8s2qtzdOw5H9tipa/8l/rUnIVRNE/z2qlc8Qo6FqvKCnzs4
76pFe2z0/7j13LdpLUzlv3ZPfTgwyEmt8X066mca03rtZYtWWTo5qYodstis
Peyp6feVPZb21A5PTV86/ILHv/M9Nf37TzkuRx0I1fSF0zWv6meqH/pPwY0q
Fb8Uqt4I/eZKBbNcSjG/vx1f2HHj/ZeR6pvQb4hJt3n3nUj1Suhp/5XOXTc6
3vVVS6X9G5ymrGv6xle3H/w2aT/4OdJ+7MkWaf/oCwvmFV/gr1ZL+x3GX7qZ
/oS/qiTth36/tB/6MtJ+6FOk/dDTfuhpv73Q037oaT/0G6X90JOfgvhf5g/s
c8aV8y64DrNXmc512xyQ/5rBfAC+loq7bdMtTOOZb1mfeT4cGd/LJUCvv45G
nmi+wiFAZZPzypdfV2fr/Mxfxwe3anfj+YM3/mrP8c7p89d8bsTvbOOy/6O/
mj/O0fXApWcG86vlfpydtqeX5P98JPaU/xP7zP+VJPRK/q/HQs//Bf2E0W0q
fCnrpePtfu/beun4OtvhCYdqbHfX57k1b9Q+n5o3StP/3qeM0vRnCl5oMKVE
pKZH3/in6PvmiCntF8S66vkXPPoGj77xJ9E3/uIR0XeEnOeib+KtW4u+nTLd
nXViu4dC38aksnVfzPDQ/ozl/pmdtp8XRd/lxH6eEH1jP9E39OgbevQN/UTR
N/F26Jv4OjvRN35lLdE39Ogb+rOib+izTegW49rll0E8GPmJiEer0dYz568B
oTpejHxCxJcxHzG/NpT5iPm1vcxHzK/MN42EvoXMN1WEnvkGetYbrH/pL/IX
8H9kLrrKI8d4O91f706Wqu6y3k6dfrtub/paQRp/bFHo/IJVglSK4Fl/wD+n
6IP4LfRBvBf6AI8+wKMP5p96og/mO/TB/IM+oEcf0KMP6NEH/jT64L48+gjN
92nTtKu+Wh/D+x2uMfSJr9YHePQBHn3An/nA/fn06PUez41VMh+UyTu5+K1p
zwzmA0/BMx/ECb55++I7bT6mGDmqVE10ymen401v5yn5raGPnb4fQX/+N3Lq
kKJ3MijoiSeFnvsR0ONfs97HnwZmPmY9zHxc4PGEwz0zu+r5WHWMKn0myUXP
v+CZf8Ez/8KP+Qd65p+SQs98k1/wzLelBZ9L9Dt35bP5j5d7qA2i38d9Vi3N
M9JDz7fzBJ8g+gXfQvS7dG+ct+1aX63fbxsPrcw611fZXvutX8YH+oUe/UIf
KPqFHv2y3kG/wOiX/Vz0+/ZE7b43il4z0G9J23S9Ri5IMk7umTQg99y3xhvB
386RMCM191ujjODRP+XRP3j0T33oH3r0Hyf0FRo93XL8rwyK+i4UStnZJ0cG
VU7w9M9zwdM/tQU/+Mt9vwGJnnr8H9t1Y9Q+k3yM7zNTpm4r9jVS49+9n/j6
polfU8F/mj2qufMQH32e32/PHsdbW7x1PBDvb194Fb6pdBkHlf/8+pcr33uL
XXBQfcf9vDcpl8luF3s7YuUKB9XibfU4+5zmdT3n2PV9Ztgs6eyg6l8t+rPy
Gx/t7z3+sfBDjm8+2j9sHjbj9b++vtqfHNnycQPbxGgt36keNtlfto/W8vE+
NvLF/Oy96OKYaC3fyUZhweVWR2v59rqfrjJwVbSWb271x8Prj49W9US+wnZq
9bI0MVq+gb7dIqe7x2j5isV0DNsTHKP91xMyXvi/GC/8j/QvePqX/2+Q9B//
zwHpv0fy/9B//H9vpf9eCZ7+Ix6gr/Qf8VT0X4/xW4Zk2uKn++/2icZHTh/z
U32k/97nm9Ox+kM/1Vz6j/xu9N/O0I5rzp3w0/2Hv0r/4a/Sf/jD9B/ynZT+
Qz76D/noP+Sj/1JEPvoP+ei/BJGP/kM++g/56D/8af4f1lP8P6yn0D/4FNG/
IXjKs944IeVZb1Ae/Hspv1bwjbI/S4ia7qACL0y9XKTnE6PspWx3a7VxUFeC
D+QYteKp8aB5o4Dy28NUiOAbV8x+P3FNmMZTPmNYu7Rjfrkryrvn+9B0fkUP
RflMgqc8+Kwbaowb7e2n9z9Y3zrK/seSjhW7HJoTo/GsR50FfyXbwjcXNrgp
r8KZFnYoY/J/RjQ8sfimm4qInvZX/S926tC9tI83fY9QnoIv/6VQSHSaSI3P
JvWz/r8v9bP+p37w1L9e8ElSv++WTal58/rp+udn7lAli5ufrt9H8NS/QPBZ
d7QJaTvES50T+1C6ps+2j0O9tH0gLgL7FZ5SOyF3jShtT7KrdcO+1IjS9FV/
TKqcsVOUpvfe8uLqs/3uqvalj8XrBTup6vYZQr+oSA1TP/8f9TO+qZ//j/qh
zyH1Q0/90FN/AZsMJ1ebxj/1A/foN+pxp+ue6nmJMj6lfG8YOS4Wed30iqea
dS+2RLXbycagzKt2ZP7qqfJNzZ8cVfeWERW0r9z5BB9VSOBytVpn2PYjUr2W
8hEDjcXZv0eqGVK+UtZPw9O7m/x7oV8QMbhyq1fRqrAVv019f8zy6+WowAMj
36etZ2YsHeaqkK9SXNpGR/u7KuQbcGeMx90zrgp+AwVGPsojX0Upj3yUXyj1
D7Ti9+jSok+jKvlr+YDXt7av2257rOp0rOCgG20Tjcz790TZV3XR6+f1+VfW
yl/cRb2T+N7xs+LndyrtokpLfO+B4sUKL2/korLK+rpOucnd9/39fwo77/Ce
r/f/Z0eIiMiUIfsdVBU1Yr2OCiliplpixCgfeyta1Kjao2jN2pvam9hVewS1
t1CzkhBSJN9cV+7HyfV++eX6/ZXrzvPc97nPfc55v+5zzn3uk/ce+Jv7DbLr
twvT8cEb3g9terV9mFLC/z6i79vILmGqrPCz3mtb+W65r9Y5qAGNuwX/F1hI
x1ccXn429s4nhZTl1tu3L27Zq/hCRveQsEKqYat2DxJ9HNSSmJnLa/oVUgEB
J5bZfemg14MJIq/rmurlh7YI0/I+ZHvtrdg6TEWJvPZXUx2OtgzT8rZZxsY3
/CZMBYq86LSZFTc8sNfne1tjs9rufmSvXjv2ajLuprMqHj92UMkJIRofsupu
rWc5dIbg2Jf1MvYl3hn7Eu+MfVlPY1/4se+vwo994ce+xFdj3+qbPQ5bHnlr
+xL/gH0XjVkQOXCEt7Zv+Zhm8/+Y763tOzd87Pusrd7avtEiD/siD/siD/si
D/siD/tyHoF9f/ZrmXzwR19tX3DsO1bw/ceKON7f6KT3d7Ys7zfyVJKT2iP7
O0l1Jh4addxJLZD9HY9iO29XqVpENbh0IXzZuDsGv8f+8r3i9/iSfK/2Fujc
vVKNUC0/c//wE31UqNot8t89OpLQtnaolt/U3/3exMRwFSfy+T0PEfn8nl8Q
+UkFg8a9j3DW43OK1yu7naWc9XiuNqfkqaEJoRp/6X97zdpWoRo/IO1nv4X2
s99C+9lvof3dQ4e0CY8prL9HfG9pP99b2o982o982o982o982h8s8ml/YZFP
+xk/tJ/xQfvBaT+4X88V4/etPGXUl3jkage23Jo25rR+r4D3Nljf8B4H7wtX
XfRpme87Oqtag9eG7Hx+xZgc7e/msMNf5ytqHHkhNCqHHju53I/x9zYZvHeB
PN7DQN68fT0r3sjBa4q8Iu0THUfNu2pY38+/YXA/P7XLs9BTja7r+/3kc+Qe
O/nyyC/uXPlFhdrjfNQekce5026RN76z13S3nj463o98jcgjHx75w93L+8WU
aB6l9oq83HVolNoj8s4f/yT9p9goLc86D8vH8YG5cXJh+cb3uYs9iE/BHtXl
/nC62IN4kTOS75v9TPaP2L84s2BJ5PdVvdX8hg3rTE6yVTVDZz4uVSXnd+rE
0DExu2xVvc5tXz5ul7NuGLD4XVd7O6XtJ/Vjv2pSP/aj/nlNfyz+YG9xVSY5
o02tmzbqgrrf59yx4mpGieUph/bbKPK7ox/7VzdFv/RO/ZOqrrdo/dZangUV
+8Oi9dtUr+mSfgctWj/6g3gb+gP96A/0azVz1JIPJez0fhvj2X2fW5MYByfV
6EFo9do/Ouvv09I9hzw++Ibo8oxXyi86W2rImT558S1v/5feLzbRTdNDPSbU
q97aTX//eK+QcbChTY8dJb7P8evWHi3yJM5ZTXh56+ezUeGav/S8n/a65tDw
814J/N/WuTKm8BmL5mf+sj/E/CUvA+0Nnj+kxWbDVb9HQ3nmJ+VpL+WZn9b5
IW4Y5GPIkPFI/CXzk31J5if54xlfyGN8/SDyGF/IY34ij/lJfnjGA/IYD8hj
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
Hz/2gsbe+eHYOz8cezM/9om9mR/YG7yf2Bsce4Njb3DsDY69wb/p59rTpfoj
g/zKF74e0Xx0o0cG+ZXbHapuefuq0EfvHZrpWuI/QcebcPxE6OaCtxoaVene
ON5RSjPuVKhWqvPnhVX5qVumVWybpueHdb533uPJo/eb8G1W9fmpJMG/3ZMy
cqhLgPpP2ptW+dW+k4UCVDtpr/X4yKv/uKm+8yb8uvxOQ18QPDw2dUu1KWEf
vfdopr8Q+0E3M+FbpD3QXwu+tOK6ypXSw7S+P93f+LnPrTBVzmQ/63w2eb83
3DcuYsIdZVya+S/dTOznucdBzueydf5h9pOWZBX5xibCSe+HWl7F+vl5emsc
vz96/NoSy3fY6vmIPGj2waETTTjnatBtTDj1QVv/bn+Mc487P5zz5fz0M+Nm
eeC2bruPHtofottLPmDq+9z74f4axUP1fuYi96OVCs6zaPyf5dX2zVxnUVXE
fo1k/pKv+5zMX/J1J8r8Nb8Hmd/7kPnh5PU04y1l/ub+rhVVzN8W/zVymxhV
VLff+j0CP32/JT/cur48vKPMX9rL/KW9lEef/Ooz49x7MuPMX/N7mPm9j5kf
TnvM+BKZv9TH/DXbzzqf0cf5Asw4fpuZ/2+Zv7nx9Z46vzX7ucxf9nOZv+DM
36jrb6LP9cjLp4486zzNnvni+Kn54dRnnZfOK1+cuIP8cM6f89PPjJvlgdvJ
/EVf5i/1MX+xH/MXnPmL/einSfuz7zdt9MDYI/4178nhP08QvKv4z+DwvwuI
OT21opuCn/eU4AeHH3xEzWejrrV+YZC/qPWD9E/W/PzCIB9SN+VRq1OxF8Yr
WS+mJe2pWC/yhTFZ1oP476wH8d+jZb2K//5M1oP4749kPYj/3krWg4Ffvmt2
Loef/AX/bF287LfnATq/0rLV9+acSwvQ+ZQiB3Z+/78HAXq9+veyd98feRig
16usB9CP9YAh+rEeeCL6sR5IEf1YD7QW/Wb8c2df3xx+9MM/o/++E/+M/sH/
Ah8o/hf4lx0HXff9xUZFL99TNH6/o7qww+NUpVk2KsX9x7hyR/Pip6sKXlbi
p8Hb/pt9p/a2YFVN8JFHItuc3B6sHghO/DTyiZ+Gn/7LzaPkotdfLr4js6vU
ctHrr9pV1v27ZYCLXn9VruKwbf09F73++qHGnYQFO1wU+xfIY/+ioMhj/wJ5
7F8gj/2LoSKP/kMe/Yd+9B/y6D/k0X/ox/4F8ti/QD/2L5DH/gXy2L9AP/qf
+UX/M7/of3D6HzxW+j/qcXb5lX18dP9nL2jfxHuAjxoo/V9ScPo/S3DszXoX
ey+U9S72Zr2LvcfLehd7s//35fKH9u2+9tLxK5M2LneLzPndIl9KoZSQdVMS
c37XZL2fsG1SmfJtvPR6n/GIvoxH9I2V8Uh7w2U80l76h/bQP7SH/qE99A/t
oX9oz2ddvdaVqW7R7Ul+MWDTtGiLbo+HSwWbP5VF719E9/3nwG+GRbencIOV
2w5f8lGfyfsdfD/xt5tENhw+rYijXq/wfQAPbrft+N2LIRpvOuFN+PW3N406
9co0Caxuo/0pa3/TxeSvfoxb+5d5+PbdRQKClrnp+MndWzJW/ZSQ8zt/237/
yKZ2qmD86Go7f3BTBfeeOhxRxk5V/PG/6r2KuOv9s6TlM5zG2/or9MNfQb75
Pff8cPQz41UdI8s5Vg3X+v1wOPHiAku41q/xU7tdT8uGa/0sXy88tnV2uNZv
msRrcb8vTOK19Puf0l+8B3JF+gv/qqn0F/4V/QVOf4E3k/76dE+VZq4b8t4D
t/YvXEz+yce4tT+Rh++Q/jou8XR7pL/inJaN37fLS/fXLwMKTJq20kv3F/t5
9FdZ0Q97I9/8vnl+OPqZcfoL/egv9KO/0I/+Qr8T/dyjj5/30vFWr8ePSfl9
q5e6PuDx+KT7D4x9/v2GD9vnpbwnrNh/c/IDo1PV0s3q/ZfT7szf7g+zvafX
c5y/QBtW+w1+qowJ95P4bujSJpz7OdCpcs4GbW/CfUzyHAVPbbym7r0hFt2+
sdcfzI/rblFXpX3dw1t1rd7Honykffu3VI4PnWJRdtI+/G3ecyNu0Wnzu56h
/6QbFcWf3CN4blyiRTkLzv4J60nWX1knLvocTMnW+wPgrC+yBWe+xMn7PLSP
81Fo633Nj3Hrfc48nP4nXoz+bzxh3/YnOeOc/l9wtsyRfnXcFP2f8LTk6YQl
efvhnF9Zr7/d88WJH84P5/6Q9X6CW764WR44/U/76H/aR//TPvq/hbSP/id+
g/53s19cx2liUUX/E39D/4MnSP+zHqH/4+r5vOw5wVPR/+D0Pzj9v1neD6J9
rPOg0Ss/nPNbM04+aPzv7NNTD87p7qUGiP9Nfuib4n9zPnlb/G/OJ78V/xv/
hPUA/kiGrE/wRyaK/0++aeqf9OHxhBN1LSpS6if/9Eupn/NP1iecfyZI/fgT
1I//kCr14z9MlfpHZxz7I9kpzbhV11LlXHs7tavb9uwNSwMVNP43+cTxvy1f
OK9Ossvzv8kvjv/N+TL+N+fL+IPIwx+MFHn4g8jDH0Qe/iDn2fjfyMP/Rj/8
b+ThfyMP/xv98O+Qh3+Hfvh3yMO/Qx7+HfrVE/+Z+OWL4j8T79zzz3cNtx50
1/cf2Eea5TmhqP8QV5Uo/upr4cdfJf75i8wS5y+nhmv+E25LzkW/C9f8faR/
P+yqeDTloJfaLP2bJfTEuV8vbXLquX7v9uTbJb+6bnlu4M+67k2LHb77uYE/
O+ezNQ6n7j43OI8qvzF8fLGzzw382ZGyXsefbSvrdfzZ7rJexz9Pl/U6/mw3
mw1dxlwP0P51+UlvH7a+EqD967k/fRHY4GqA9q9L97968fNbAdq/LnG4y583
c/jRh/U5+rA+Rx/W5+hzWdbn6EP/EQ9P/xEPP3pP56nXDrGPf1XfC0utVvbJ
h53XDN7j3C/5melvytPfGVKe/r4r9dHf86S+zOuBbzc1C9T8BZxD3wzsFKj5
ed9zm9RXW8YH5Rkf6Ffu2E2fCVc99fr8u36l3efc8NTrc97HJb/r8v/ctx/6
EKnL/3W2cvn62ZG6vH5/V8ozvphPp2R8MT8ZX8wnxhfzifHFfGI/iPtJ7AeR
75f9oJJD98x57F5Apcr4Cu60IyA9w1nzk58WfvLfws/5OPycj/P7Tv2TZf1J
/fzeUz+/99TP94b1Pd8b9gv43rC+53vD+p7vDet79KE91I/+1I/+zC/6g/nF
7xvzi/5gftEfzC/6g/mFPZhf4WIP5leU2IP9L+wBP/rDT35g+AtIe+CnPXzv
qJ/1M/3B94/+4PtXQurn+0t/8P2lP/j+0h98f+kPvr/s36AP7aF++oP6iccY
Kb8f/H7z+8Hvt0V+P8i/zPynPPOf8sz//lL+M5nf7Hcwv9nvYH6T/3WZzG/K
M78pz/ymfMHxR0sVi83zc4u2GmOM3RquaV+rdUmmYb0u4nwvD7de52QaPiac
95mhid/LDyfeMD+cc4/Pyvk8TRtho4I/nZs+46a7anbku5KDW9ioIgvO+sw7
n+PXbrgzd3tbG/0+XDkpP7/Mv0v/yg5X8VJ+ZopLpZOZ4bp8/+Tfr04b+UTf
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
Rx/iC46GLh1yaNwFA/3A+V6DUx6c7+/vttVu9G7jqX+PW80yZm/bH6lpcH6P
waGRT30nhEb+44vLKn9TuKgavKjveocc3HbkqzqrfSLUEKETTtyetXaap3p7
/dmJ5p84ql3vin4XfzVS00+E/9jDBFubHHnwQ8M/7qfZU6MsPpofOtZpv/10
xfsSD42gK0VLh7YP0/Sd0id6NY8qJHnL7dVPiy86FmsVpmn4f0t+0TNsn5uC
Hxr+3Lzi3pofuufWne28fZx1/tybjerVuBTsrPPdrqzd5IvDX4dqPKbbgMzy
LUNVI8HhJ58r/ORzhR+8tvCDD+4w9ef22/xV1L72jfa8mmy4rPIpk5VD3/n1
84LFOy43yEfLfCCfLPS3PZ2jGvRyU++7qm/nt3dWjeI+i3jUzk05XYu/0mWH
s7Krm/aXa5yb9kdWTX0W03y0t/bHUlLDBkz7JFzzLyrZq3/lkuGav/CqoBs2
4Xnxse3azo5blZx3/oN+zA/0g0a/CQ2+uHGylq/Wb6p9nPfmHr5aH9ZP6EN5
9KE83611KSfmPj54x5idFPdv3PBgBQ0++mHG7oHNCitwaPIc8n3l9zv3/++M
uWPnVL0w5uP3tsHhN7/PnMtXTMFvfu8ZnN8X5EGDkw+Z7y/5jaHB+b6AQzOf
h5evP+vav08M5uMwocF37vL+LzXn9wYcmvcAOL8m/z50guD6PRLBoUdPOzKx
ZpfzOj/HKKHRr92rta3PXvVSF4qP9b1czlbtdR/cImWYRSULnSj466WdKj0u
6aVxaOyde1/jle4faPK203/k7YPmvUhz/5OXHXnQyKM/kQeNPPN9UvRBfu7v
WYaOS6V+3jM1jzfK5+4/5eU/4L1Sa/39tL7Ux74V9aEf9ZnHJ+WpD5z6oHPn
aZ5/mhs3kkeDUx7cPF9y9fig2wsNzjsV4NC5fshd7W/nvjObd94ITn3g0Nbr
3Ez9fiI0OOXBoRnf+B98/83jHX8A/P8dP5eh+8+6/X66P6BpP/pxfoF+vKcG
zv4/+CihQwd+f+XMr0XVyo5dm28pYKcCmyZ6p7SK0LT1foGj6f6To+ZPPPb3
V9/86qX5oSlPXlJo8rVwP6L5rPVrKx+01fchoMErd8j8cU5fL41D/9Fi/7j6
9x1Ux/2layW6pRg7njWNO3c8RHUSGjw1YGr4jE5uChwafTjftfZP7fPFOY/M
L/4R3Ppec6ZRy3T+vsWEs7+U3/m6Gd9qde/XQ9U2nS9vNuHw53d+bMat98Ey
Det9o0zDjJOPF5r3gfPDrffBPExx6B7KjMNvfT/e8v/B3xiTZ0VlLrj/2hj9
U+LmgiUzjF1BvxVJvfraqHEtue75PzKM+DErh4Tdfm1wX57yVdxu2NRcF6Qo
v/L+2+W9TwcpyiO/T/UeXVJcPNQYkV9tgfOLIc4eqprIv/tm4rijBTz0fXzK
R4v8qlJ+hcinfPqkDt0u/OCtPog/NizwTPcxo7yVo/hjjm3iEx+dsWi8QYRL
O5Xjj4GnCT/+E/xTxH/i/JD38zgvhAbnfThw6IiKPxu91tsq/xar6iw/9tK4
tNS+6pz3waq40OAzPpn0LvKwuwKHdnob29XrUCG1MPrRs0XXnxkHnx3d3utK
Ifn9e25M8RzgMHpkmFos+N7zF77xGxumcfgPfNj3V99P3NUB4W9e99LGazHu
Cn5w+MF/9hj5+ZH67qqQbZ9Nq5Js1NmFHY4kbg/XNLiHzzW75Bw/Bxz6u8yC
lTqnphqslwY+PXr3qwWBev00WHDWP98JDt22zpTHjSv5qvTE6DOz3HP8VaG9
xiTHhkTmxbeT7+3Inwf3JtZ6YuAvne90o4GlW4D2nyifex6b93vNefifwp8h
/hP8GVb+lJ/quCOu1sZoH33OyO8x90Whwfk9Boe2Ps+0099v6/1pF72+BYf+
P75wcT8=
       "], {{{
          EdgeForm[], 
          LABColor[
          0.2201404609521648, 0.2265706398796136, -0.4911752875612678], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxFm3l4ldW1xj/IRCAJCeAAJEAiCZCEk5OBAJlOknOOgOIIWsWhdahYx3tb
bZ1uRevVqogDWnu1V59ab6+ts9ALOGtlUlHbSq9WFK/V9qq1KqDFWm3fX97F
0z++Z+/ss7+91157De9a60vtiWcfftbwJEmOKkySArXXlyXJ30YlSWFRkuwq
T5KReqbot1o9dXpOHpYkBxW4f+Iwt7XRv7skSSo0v1m/j5ueJGP1lOrv9fot
rTnPqC3Tuq3qn6G9zq9LkulVSTJGc6o0t1JPsfobRdCchiS5T+2KfJKUa+y6
GUmyQ22Jnol6/4rhXpN1pgwmyc8nJ8lktUeVu7+1NEl6RiTJbK0zQnsu0Jle
qUySS0Xbz0q8ZqP60/Wsmaoxrff7dq2l8cfTHlsb4+uiv1b9L/T73/TsU+Qx
futTf51+e3iq+XCOzvXTyT77jAKP363f13YkyUWa292UJC9p3izR/6LadRr/
rsb7NL58uMe/pXO9lEmSD6o1R+2fqt0/Q7+N1tzOmDN/WpLMbTDPKmp0Lj0L
RoqXFZqn5yvl/r1Lz8maf7zeO1bP/OFuj9OzPTFfjo/xRXrnDtG/STysLfI8
5vSO8DojNfZ+tWmCnn215z56DtO+rbkk2VabJG058ws+Hq4zbssmyS0af13t
XP32tvpdak+dbvqgLRG9f9fe47X+PP32kebMV/u4xpaVeC/2ZO/+oOFMjalJ
ijVvneaX0Gr+uZr/df1Wrr8f03iF2rc08RSN7aX5W7TXS1O0t+RiYtb9CVmv
936ca5PasdonEzyDPyfpTPtqrfVac3zOcjSlyrLEXfP+N4f/kz5o23vQ/Nxr
0PIGDacjb9WmqVdzD9BaO7TmgWoX6/cjeTTnj+Jdn/q/UrsjJV5qr69qnSeK
LQPIUd1Akvxa5z2qUbrZ4D5yu1z9q/XcMilJ3pVMP6/xnZ1JcrDGflNimZyl
fkZ30Fpgna/Wmou15qDswPWa8139PVf95eqfp/4jmrOl3nJ8ld69Us9KrX9k
tcc367yri63j6P2dhV7/OI3/STRs0TqfiIZ9RfNN6j/brL91rpslO1/TuWp1
vkmjbEOwP0eXW5e/ovVfqPc+MwZM/9E67xvNtjvTggc/i7M/IfperLdecT81
o3xHb6fd/2aL6X0hzrJ30LNZ623s0Tua823N+WPa9JyjflGRbR028Nhqr/9S
YhuITWT8kanWd+zBeK35Q625RWu+rPZePfdo/Di9+1K913ig3jIBzdwL7w8U
mfd12re9wOeDH9xX2VTfJ7KJveB8/ZLb12W7JolXj4nep/XbGOyM6Hp0qteE
notkl5rEi/Hl1rv+6baz25rNtymid5vO0KX3NgzzOR4J27Wh3nJ4qc77RL3n
XKj+qKm+f/bc3GOazxOvtmq9B0pswzkf8o4dGJK7kL3Hu8QP9d9stt53SCe/
DJuJDmFLn9Kc+zXnbc353/3cZ03oejR49fJ+XgfeIqfcXbog7idk4BzJytka
u67DZ20Mnu+S7P1Asne8ZO819S9W/z90jn/R/NM1Z4XmT4x7fEE0TJF+bpGe
1qq9qMB6mtE6beLtpbX2nx8PWsa+JT7M0d28j51R26PnQ/V7s7bbyDy29Aa9
8/dRli98Gj4Sv4ZvXKk1S8vMb+4UnndHn7u6Sbw/aap1uzN8AzbhM9F8tWzO
brXv5D1nR6fvEJvGPf5ssv07+pUXTZ+Itv2z9j+sg39pDXrQZXxpZ/jTQtn7
Ij2X6fcnxePvT7NcvCdfVazxd9VO7LRM3tknu6yxEXqu0PzSBs8/Tfzr1bmv
mGZetxR5HnNYuzjWX1Juvw6dyD46sLrEvmhu+KMdg9bzhbrD54u9b3fQdkXs
xR2y/g26r52D1utzW8xL5PfCwD/cIxhoa6V5eIL2vUDvtxX5rsfWuH+7+ss0
3l5kv1lT4/6d6n8uvi/Xu39Ve/MM46Lp6i8Qfz8Tnw/I2lavDfzwYW+S/Bt+
r19ypt+uEQ1bspaNK2stH/dXeTwpMx7C99QOGNew19dF5xsl9if4uM1Zv7tJ
bUr7zNSzSD58QHT219iWw8vN1eYnuvJi2KVnqz2O72vWnCb8uN79ZbV5BW+f
yppXT2ZtR7eEfW6tMA65ttBrbIp15ojuZ6rsRzIhh/i3AY1vrLKvwZ6wx0Oi
J6fxTRq/OOayDnL7TLXnQEO35qzXnPMLjXuG8A84QfJXqv77alMhr8gSdzdO
z3WFPhN/c4+VuouqGp+RtjLo/0DydJjWP0byMrXT+PCBPt//2FhnotoJyBUY
odr2/WLJxaPdtk9bZkp+q+3Dztf4tmKvAw/gG+P4oIe7LQsbNb+9wmsiS9U1
3oP1x9SYPmiDz5VB/y6dc7T6O9Vem7e8IXdX1VpukB/G8K/NYbcWh+1qr7Oc
IGuMHaHnFfG5psh/0/+F1hwnfk1oNW37BD1gPvoHFZqvewVPvhQd49X/IuPf
9435tOOjXyR+Fuv9c8Tjv2b87mcZyyE8xG5/0KZ7knyX5n3usSGH8GNcyPP+
Ok9Nof0LbXX0y0VnmZ7Dde7v6Xz3VVmvkZGK4GEu9BxbDm4hFsHmrexz/0a1
S6fb7oFhsGGlYaN2zkqSYaL/rJRlAXlCh9cHrsIfgSmQveuGe43ZsQ5rgouY
N7rB73KPtM2xzrxpfof10N2akIcxDT4/Z2dskp6VhebZsSF7jE2O8Wadu1x0
nhS2qibGV+fNz311p4X9nl/Qb96MDv5UNXjvO4MG7MjFWuPRQu8F/mG9mTEO
LgVfdMY91ASevKXP47eGL8DWY4fR7RtKHPfMrbQt4G/80q6w+cSExIZg+tmy
Ne/JfnZmjW9/NMmY8kKd7Ti1i4Y7RiRWJH7Bb4yLOPToWJN49vwWYxUwC78R
qxJjzB6wLZzda1zxm/2MJY6V/t8oHn6sux4Tse3CArfjog8t+CfeHx3xbF7j
jeHXiVmbi+xfOS9YE/kAC/9P2ut/lHJshN3D/mF7GEcGVmput2heWuC4jvhO
zRDGPrbAPvrEAuMC8NuKEsc33Pvo2PeliMHTgc/BVL/dzzizo8C/E5MuLrf+
oDvYT/AHMnxBoW0tZzlpguNhYuH2St8Td/Sq7qetyrR+nrGcLpKs3ae731tn
uVdt0m+7Nkzte8JSl8kGbUjbtoADsSdzNL5a/a0zLPPIIjbx44xtwOF57wev
wZeLxK8Nmv9V+JR1f59Gx+vQiV84El+j8W+UmMebyi2D2GTsMf7oYM15rdg6
/qsp1h/4OC/rPMLKFvNnR+QiHtMzX+OXiH9LJCcrdcY/p4z3V8bdFTc5Juzu
d5yFHUI/lhV6f+QBerFH0P+dFuNYYpH/nGTZQq7QGzAcusPdYN9E6tB5oI04
HtwNpiUnsLnCmPbbJbajXxtpPXk4bfxJ7IW9Zk98wQd11kP4slbj2VHWra6s
abu+xXsiG5wdO8Le4B9i05tjX+Jn9Akcvynlfe+RvT+qzPqbDX4t1ZyvDTfN
vAe25344C+s+3es8zuRWywVxArLxy17nI2o1fo1o6tP8u1uNzcED4IIV0zx+
lvbJ1vhd7NWKmN+iM6V11qUjTQfyjBweMdJ47/Ny2+RZlbYRyyKngMwhb7sa
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
/A00ecR/1Zx/AEdHGKg=
             "]], 
            PolygonBox[CompressedData["
1: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
L2iORixjDLig0XdTPYN6B9VI1UrpHAQ+Q3/WkuEeK3ukY0KxoRwY6l0DVQt7
Mj/BWlvcWDmgCf5jCed+5aTj4JIGx5Ji+kP83ZZwrtadOJFwDlEu6cf4DBwh
Xib09hm0s5du9e718xldwZV825PlHupt+NfHXKuUI9eBZ6Z8N1rweT37T6Xc
S7zEfjNV65OWpR5uJvi6lHsvxfiPS5wDlQvVcxxOOkcpV+nOVygXYmMW/JPQ
Nwh516Zc+xTjPyxxj65evYn91UDbDxuvBC9jz30T7rnUeylHn4k75yj3KKfl
sr4j6t57Hv3iGvrFraXureWTx+vcs6t3z8aGz+EfAs+bhfaJfPNiqXXpjv6p
zjVItUgxXqjzibrXVk92a7FzqHKpZAxN+M2it4veVF8BV8e9F+2hCvwj4rvw
Mt/RFvrbXrozEfdA6oXeTzgWVXNUe6bFXeu/yZgOrkw4F+gNVQW+o9y9oWrw
WWJzRsq5TjlOuS5S5bdZkeK5yjVTtVNvrCvgf4H5LM4iF33PgzeW+WwGM98A
zko6N+sNorfIZHg6C/1makq4x1Wvqx55bMI9vXp75eSLcZ+BzkI903Z895+o
3ybqyRcUO8YUa7pjtei6r9x3W2+gcQm/wfQW+79O5gUxv33Uo6lXy2dP0W72
aQH48Zh7pUz28Bj4qQq/XdRTL0RfO/F1J/hbrJ8Hf4GNg/PsgxxoZ8Tt6yXQ
XGB9fKN9oTfd1jL3MOplcuD5L7T1jfad3kA7WO9V416sJ/Oe4NsrnUuXMJ8P
3lXqt6B6yqeJr/2VplXPpd7rQLF7ab2xsrFnf7F7T72J+jNvQefRXMdMT/z1
Dey5rbtr6JusXVvlu6pvWpucci1TT6TeqJlvN3e3jFbor6ry20vftNa30f8d
qIefi/8uxb1X+Ui++qjUtUY1qpzc9GjMvlYPMAre6dg0IM9vpGngw1HXir3D
qAEpD2Gd2fXFftPpbaeerBXaKxPO/XoD6C2wqNxvN/X07Y0+E53NLejsAP+k
3LGtGrWL+/RJzGermnIa3Bn3XZdNHeBJcf/3oBhQLDxZ4bee3jTfx56/4YPf
4YvLoW+H9kyZa5Vq+hz0v17q/z705lnP+S2sdO3UfwqLwB9EXbv1n4j+G3mv
zGevmrIa+z6Ou3arJ5yMfy7EnbulU7rPxbw31ex28Lm4bVHOVO7UG09vPf0n
0Qr+H9CS2D0=
             "]]}]}, {
          EdgeForm[], 
          LABColor[
          0.37778586216942833`, 0.18834181635655953`, -0.46805695408263304`], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxFnHd4VVXWxg9FkJLQW4AUkNSbkJ7cBJJccgNYUGxjFyt2dEadGRUsYB27
YhfBLo5dUT+dGTsqKvaCXRx7G6XZ/d4f7/Lxj/Psc/fdZ5+91157lXetfYr2
OXy7Od2TJFndO0l6qPxtSJKsHJ8kJblJ8vygJBk7MEm27Z8kVxYnySJd8/ol
yb45SfKT/ttb5ftdSTJrsyT569QkGTcqSZ7T8/v3TZL7G5PkUPX5aW2SXD4h
SS7TdcToJJmq5y5Tf3uqzey+bj9LA/i0UHVqv7uuD9Tvd2o3UOUj7UkyfdMk
eVfvWZXvMbyu8qJSjXET9dlT/+n3EtW/ne/3HFOQJH/v5naM+yndzxjie8Z/
VypJ/qb33NKQJIXpJKnrpfdVJEmvkiTZRNfJRUnyYFWSzNT4/qWyVuP4QeOp
Ubmj+lmsfk7o57pPc1xP3ZKof03vv1vjOrqHx8R/L2sMa4Ylyfmqn6b5vqt3
vKPrTN0vKDYtoMOYliR5YniS5Kk8piNJvhwsOjYnyWMa85ka8/tNeo/GuFjX
9iM0B7XbQeUK/b9K/b2p6y+J21B/Sk+/p0M0v0b06qO1Wqr1naL//qVn5qvP
K1tcd5OujOqfyCTJ1prDIyoXt7jtv9X2etH2yFFuU6Ry+iCP+xWtz6V6x7Xq
f1aux8EY3p2cJC/qv0Gi8wbR95oBSXKh+uuj637NsbfKJ9XveRrDUt0vj/vP
Ncc1ar9E7fcX//w4ynM9Vn1uoXZf6dnpKt/oI3pqzIdrjo8HfW5Q/S9qv7Pa
n6T2u/Nb7XdtMQ0YG3Soyfp3W7V4oMTvKtHvohL/LtX9NuKNcXp2e5VvdybJ
2VqfhvIkyfb0Gl2s37exBrq6VHfLYK/X9lrrJC9JuuV57zwrOk1R/1vp/tgC
8+djan+mxvAPNV2nsU3UWm9Qu9Pq9S694wXx1PAarafun9X9UN0/0pokac35
tcokOUfPnq9nf9azVXrnwqHeC+u7fH+g2mzQXLtrDPtonEPU7h3x+Z6i0/ix
2pNqc5fa36P3bq1+6kXnc5tcnxbt12vfvaL3rlO52UD3s0N/lz3ifo344UbR
v1z9dFc/O6quh8px6v8y9XOb6s9p8n1ThflrabS/Tu0Oljz4e5t4RO95VHug
Gj5Q/Z9VP0/130kmHKi62boOVptfRJ8Dc8x3V/a3nJml63Htye00xxcHeayM
7VKN7RJdB6mvu2O/X9DivfBu7IcZGuehI7Xuot97Uc9+7Kv176PrzCLz4zvB
M83igw7RsJv6yxvl9yLHXhfP/6p3H6qxrRSfnKX2z6qsyPGalqus7bC8OEPr
+5jWsVXruEprNEPr9eU48ZrKD9VurdqMgB6i+xbaOx+ofkpP75eFGtt/oLPW
q0Hr1ZZrXoQPx4mPD1VZKH6Zrmc+VZ9bqOyhOT+nMc/UmN9Q+0RzPVL9T+1n
+t2nZ2YXmP4V3S2P2dP8Vywa3Ci+rRStDimwPLtCbT6QHDtH723T/S2i8eei
xWC1Wa82i1R/l/j/O93fO0brpN8TNaaT1PZg8eybGssHos9HavN/muPzavOA
ytc0pldzLB/5f3W02UlrNFzXK+K5iePdP30O0zxez/FztP0w2n8sui/hvtO0
/zjH9P+nxvmpxjmgv+n22RDvhxcGmW/hGfjlaI17jvppLje9t6xLkgmi7f9p
nGdKx21T6XXZSXzdUm7ab6c2Kd3PhZaaY7Ha/1vtz5rqdzIe3ntai3n5Bq3F
b5rzGxpXnvZ1q8bzyRCv05Ch1sHdROvmrOeVUX8PSJ8epWfv1LNbDjcd2Ld/
Vtmo39peyXrtlzVax4PV7kG1P0HlA2r/Uo73GGt2sHj4H+p7frnXmH0ED1SL
tlfr/yW6TpfO+oeuSrU7SeUCXRW6PyPf/6Fb0eWnR5vnx9tmYNx/0lr117VS
63Ww9tav4kMNbyOPHam2l3e3TEG2jNTc79P9StHq/nbLucFa1xUqO/ubD1aJ
JleLB39RP+O1Z04Q//+mNmdIJ57YYnthkeY4VHUv53iu95eaHodpriu1vtv1
txxepnqpv+TAtPctdsgyjadNff8dfae5v6R5vKgr0ToMG+qyu8Z9GDJ4qNfl
KGRz1A+Pdtx/3OXf60T7dvU5N+T8iypv7+n5X1ZkXYku+UCDvFRz21N7+b2J
sguQN+LbLbTuMzS2L9r9ziHx3u4p78dD1P6jLv+3Ru9KZ02vDvHJXbJXpmtu
d6u8U/O4Q9dU6adRo2x7IS8z/Tx/5r5COn5bjW+5ytcKrcsfFc1v0F44apSf
LRZtf9N8butnmUcfPL9c423SexdLNl6rtZimtg9rjCsLrffvUz99N/M4+O/E
Yj+LrC4psXyp6m8e7D7UfAhtoFFvtVuq+T8o3rip3XILuiO7aiU/88SDp2nM
N+i/+9Tm+navZ7ehntdmosWRKseXW25hAyC7Vmtswzax3NxHfDBR9bNVPq12
lap7Wn1eq3Fdrethybke+r2X+HwTlc/Knjlf8+pQ++1F8x3UX2On1xWbBN5+
Wr9P1/ifjPI0Xb+KbsvVfxl2Ssb6HzvgXD1XrbkM01xOzXgvHxP109T/FprP
Z5pXL9H0Zq37ohbz1LHBV+gc+BK985PqftR1UV/bhot0LdX439V8h25iHbKm
wHL5ArXZQf3vrfF2apwPhh14Zo31JzIEm+GvBZaH7IueWsNNdJVpD47U+xL1
+2DIAWxuZAL6/NLQuf00n4NFt/4Zt/2twO23EF++oj4Kpnjcx2lPfqv6PnWm
w5Zl6kPPXzHB/MP/c6PNW/rvG5XDxP+56neO+h+gcrZk8oVa9zmttp+Q+59p
fp+V+PlD9J5lWoNskeXVjVrHLTXPOj23dIDvJbKSYer/fZXf6pn+zGG0f1+r
8iqN55rRni/9HKtx1Gl/1Ogq1XxW69kfVDdCY9uguWyuMWzT7nWjDbzI/u4q
8liwe6DXMW3uryv63E/v3rfU67dSz/5TNJ/X3TbR5eFDtav+J/W5ufijl/Z/
Rnuyd6N1ws49rH+b9HxjiXmI/YEuhv8aoh5beqz0zhhdZaLPt0Xu8009W6i6
Al3Vqi8UHVvUR1r7qVhzatDYE/HPMfl+B/3TH/fY6ZO0vk+KHsO0vhdqHsXi
vTk9vf7dCs2f+BE3x7zgHeYFP39e4rVm3W7QGm2hdamttPznHj1yntqeO8Fr
g42LrfuXVtuX2Jn/6rIuR6e/yFDrLCtman32nuIxrK+yjYut++8u77nLYgyL
Jnith/X1utXG2iEbF0X9J6LFQaLNHO3pJaW+/xu6P8926p+0Bruqfhdd8zWX
ewZbZ+3bzTr21wLr2ZNL3B6bFln6ZMhT7KlrimxT0f/FpW7Dc7/FHqcOH/gA
1R9cZ9nWrvH8oP3QR7TJF1/NlswdN9B0uEgyaw8R8MK0ZSiyFJ2F7co+ZH+l
cv0f9V9Wu83RyK1ogw76r+r34Z3l3lvUs7/21rtG610r9K7984wRbKf2S0f4
f/Y2e+q8WDv8I7CFHTXu+S2+P0ty6CvR+Utde/UxfkDbHVXOSdvOOTTt/che
xKe+cpLX6G2t6UH6r1ZtDkh7DWnHel032ve0R65cqau/6m8d6D3M/h0XfgO0
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
E3u+0H4LPst7ncYD31L592pjtUvwOTTnR8AwtEYnTrCeQl8dU23s9eqsbRMw
FOyTpMN4O7g7seB5YW8/1OX4Qgd2+BT7eFerz1Wljq8RZ2O8Owz2OGdUOh69
g8Z/t/p/dYDtw2a99ymNc7TaD2ywrbS6yXEL+ieucfRU778lKeMU4BV7Ntnu
xeYFP5wfti72MPx+UrF5BOyUe959nOZ77ASPiXVHtjMXcJy7RjjuNiH8l181
rs8mey7MCXmADcv+BaNYUGIMYd4E23XYfRNSptv5tdbjxBeR84+K5i26X6m9
c1dg6cVqM0Vrs0brNVXlaj3XCtah/x5v9f3zav/WAD+7e2KeYJ6fJ8ZAFvw+
3xz/5p66+XF/SNZ2yUEqu6vPBzBr2+xPYLtgt2C/cI+fwbP0A2YCX98e8Vls
QGxBsOi7I0ZQUmt8mnrsw7wG23pfYoOnvL6X1XpNTo3x4H+cGv4IuuKC0BcN
mv9nokO60/4eeNud3UxT7Ghs98XjHUtr7G4dyD3Yzeedxnw+67TNe2PYvcSc
iD3dKL4t0Vg2U19dufYJ/hO6vkz1E1Q/TfVbVjvuu13WcWmw7o37utV0+K3F
+4D4GbGzF9rdzy71jldhj93cbnwA34i4D34Svha/2WPYg6mIgaPb4S1scfzj
B7qZHtAFeQhvH1hgXx7fq1f4aMhGfHJkxasZt7mj0nH4B0MX4wseEM/ix/Ec
+O2v7R7/0nrHkYj9EPfBrgHLw+Z8VXQ8X3R4Eflf7fhuffaPvYQMJLa/V47H
8J8u66HJgSPOHOx9dNpo4yD4PzP0/Fr1s3XW8S3ao7O6qo2fbq76zavtd22j
+2nV9ve20v1MXet1v63KoyfYhuYdxENOjH193mjjOPgbxCXYl+w7aIUOYb9B
V2wUfg9hbxFzzvE+Zd7w9Np20+Qm0adRfH5Nidscm29fkVwK8gt4nnpkOf4b
8nxuvn1L8ieIxeErEo9rUD9Xlfj+lXbbfi+3m18eDGzkJNG6VXM8odOyDxm4
e4VxXTBd7Mjx+u917ZESlf26rI827fK+IQcIPUg8DbuL2BvzBNNj7umM/2tW
WTzAcSxiPd9WhK8v/T++2jb4c+p/VKd1yViV34jG/yu2L4xdxj320PqIh7A/
iUXfFrKCGDdrzPoSbwWbA5c7Me37kanAafJNz/n5jpUiB45P2z/+UTQ7S3Xn
5BsXGlXjmPXP7fajt4w+9wO/1HwK+nltibsQo92I3YadAx2OjvoZOW6LLAV7
YM1YL+TEfYHzf6v5fVfsGE+SMq5G/sJhbfajRkvXLZjkuODJKrfWfx8hV8EV
u6z3+6ucW+I8L/YJMp6cDOyBBSFf4dHL28y774u3s6EL0AktRY4FIUOIcRC7
YP/urfbb636QxlBUbf/pCbV/L2veP7rK/PB1sXmiKeRqQ2Bu38Q6vpX1vjy8
yuNizuSLHBA48CEqdyr1PmdurDfPooOvLbUdxd76qtjvIp5XOsC5EcQieTf/
kZdWHjILPoR/vyyOeGmz4z7Ef7YWLYr6Wfdhe64ttj3IPsdXRp7gs2MPox/g
sdXDjJmfnW9eQV8Qf1sbMbh0hzHNlg7r/GMmOLfsOfXzbInvKbGlsE8+03Of
Fxv/hX8/iP77tdrW6tPqd58VPLn3SOddYIdjT9Af/awt8JgYD/jPZ9FnWca5
Ae+Jp1bovU+XeG6Hpx23PLXcdEX2w7N5GeOYW2b9zjOjz9+aPffXtHdHZBxP
mp613ce7iB//0uwck/7lfg/2DTTcbaTzGdALvVpt8/RUOVj8tETjHjrF8fy/
RuyyT4dzkvp2OGcJX39AjvctMVLwupyM+eLqlOtujvqrUs4xINcAbOXMoNuI
GucbfKe9/LLG+YjaP1zhfmcMNw5C/Jh6sMEDtM8+HGD+YK8+HPXEdPAJwbWw
77D50AX4htTjz9zX7Lgn8c97mz22ZXrXycX2KchHYZ+dFHkaW9bYT9tK5Y0p
55yQe7I0Zd/kdN1vXmNfa4sa94GtTzv2Pff4C8STwb3R9+snGLfAvwQbQt+D
jz0Q8j8VcS1iU7TfO237rqDMcTD0Gb/fy3e+JnGVevIR8ozdkQP1xTjnDbbW
OI/wS/UxJ+O2B7ebD88PLBI7BnumrtWym/gm9hV8Qzt0T1fKcZtn1E+T+txN
fb6aNjYBRlHTan2FnCK3oSz6gT+rNLY982xXv9To/JyXGx1bYD+C27HP4FV4
FnsRu3FvrcvacudyFemdJ6XND6ekHUfCtyNOROwFDHpjbsUQ59sSX3ul0blJ
r6p8Ps97mP0Lzd4Oul0YsbxL0h7vfTF3/Efa4SdCP+hJPAD8cFxgiNhr2ITY
bPhs6GT8rs1qnCtV2eF4AvIa/H9qru3N0bqKa5zvWq02y6Qb/qf+t+/ye1g/
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
             "]], 
            PolygonBox[CompressedData["
1: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
             "]]}]}, {
          EdgeForm[], 
          LABColor[
          0.45873070016418355`, 0.24555950667757923`, -0.19248272358802765`], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxFnHecVdX19g+9DQxMnwFmpM0wFabPvdNhhgQsCNgLJKDSFIwiCAEUULBE
EFTAgtGgoCCCvwjYYkU0xkpTBHuNsZtYo3mfL8/Omz/uZ++7zz67rr3Ks9Y+
/SbOHDujbRRF8zpFUTulAzOiaJB+X3WIoo69o6iTfqd3iaL1JVG0OyeKyodF
0bqBfpbROYpWpUTRoT6q0z6KXi6OoiLVfb85iib0jKI5Of5PGzckuZ2bBzo9
qPr7+kbRfv2yO+qdVOe/SY6iq/TuR12j6EO1v0b1T1P911S/rdq5Lsn/9xW4
zxOrNVa9e1Dv/l5jeUvvTtfzA5rMiMQo+rvavltzuVR1dqrOa8qvU50Rar+N
6l3bK4o6JETRjG5R9GVTFB2brfaU/qjfScr/pLS/+vodi1QWRdeofhvVn6T6
t6qd+aGdLapzivofqPFcqfKLwvg7p3uezPFalX+t8s9VnpGmfG+3+7qeH9Iv
T3W+DnMZpPy3qS7/XmvyYbPX8wOlzdWe6zClf1Jb56juxWonrSqKfq26pXXq
T/2+ofZ36P/+hii6Xemler5J9c9T/bmq/5rqzcmMosNKby3Summ+CWq/k8b2
hd6dpjqrtIZJml9fvZNT4LKfS6Poea3BXfoN0bMctXu82m9WO220RgtESw+o
vXqNb47G2aD0QqVfqO9vtGf7tafd9V6Cfiugk7AmvdK9FqzDIZVP0fO92seR
GsN3KtusvXtba7JXdfrwv1LviR7uUTpOfdym/DDlWzXff2tsLUp7qZ22audh
bV9aT/f7pPIbNb6Zmm+i5nuBxvaR+v9KY9sz0PXZ06NE8+uUdhTN/6I5X6B5
bdV7+QVev6c177fCeJjnD1lR9Bf9RuqdZI1nmMpSlN6RG0U3qd009XGr8tcp
30H5RTpnNyj/ovpdprPzrMpWav1+lWK6h+a/Ldc4NO8f1eevU9xOW/3/RuV9
lP6g8vu0bmtVXtLJ6Y36paqt9bluh3yb3i6n7p9Uvlr5Xiq/Pddj6Kb8ZRku
f1n9fqT2D7aJohfyo+h+vXOLyhvU/jsq36I9WaN+r9KYX9B7N2rMh1S+WeXX
q/yePNeHP9yZ6zNPflOex8d4eL4ulN+hdL1+M9XfyBTXhz+83sXlhzXPsTGd
LdHlOKUb1OatKs/Uu3/sIfrTmTyguqNSXN5O9ftorxeKrkZpzH9V/WdUflMX
93Wnfmv07lPlpuv9hTrXmsvLKnu5QjSp/F7l9yp/j/a3RutyQP836r279LtF
+SzR2SWit96V5oFHdfE+naT93qDyY1S+UnVbunhdvhNdPJjl/+w/NMI6rtC7
fbp4LwcX+Bw/LrpqURsNGeZdb+j5Br3zRgePgfxcrdXQBP8n/1C5z8cMzWWb
8h8qf7podme525iu8vuV/0L5iSr/NWclw+/cWOv8jZr3kASvEXuxqJvXjXOx
o5t5K3z1gTz3yzo8ozZztYbvqv2ntFa1auegym+o9fjXqM0deW6TNd/azWeb
c/0cfSVYRrxVa161RnO/uEX70l/zajF/+KW3ecQGncdnxQMrhnndDkrujGvv
fumzncZxsHsULdGeP9/e9A7dQ2/w5J97my9ThixBjmzWmo9RW321b2+Kztup
/Ymd3d9Pau/fWodx4mtTNbZhGttw8aJcPduodXu0t3nT96r3hGjzxSTnWVv4
1bXiM9s05ufVZpXG/H2WeQR7f1N9FJ2sNnPV5h2SMZ+Jh6xXuj7B+TF6P1H8
61vVnywedQd8TPNd0NVyp00fy54m9Z+j9E6Np1eD+zhP9W8uMw1Dy0lan7Hq
a2GS2/su0GEPzXm+9mPnENUt8FqOrTbNQ+8/qM0yreFUjedSrdEd+k1SeQ/9
3tJatc/x/515pgno4boynyPO0/hEP7slnHHoYH2gX8qh5zNVZ3ueaYMz276P
z+3dWotv1O9dSrtpPKM0/ouT/D714QkPam1f0hhqtLYJGvc8zeX+IaZNxrMh
1N0R2t+Y4DYnaG1/bnBfwzTvAeq3o/LrO5nubpVMvDDB9HFxB/Nh6OYz5LPo
4XXR2DLVfUHlc8VbdmdZtq3V83dUvll11qeYjjqzFqq/uJv5zxrV+aCD66AH
zetgXtdP/W5Uv7PU738aPJ5WjW0FfXWzHFqtd1er/t16d476fSrLcut1ncF7
9OwGzntv6z2fdDQvfLSL+eHjos+vghytUf7kbtYD4Leb88yH4c3w6NMH+ne3
8rt0Tp8SjR7U+u9Sep7G+Uam5esV+vUMMn2p8l2DDEV+8S7n7lm9c1jv/lVp
hfod2836yrlqZ5/a+UHv/VXz7KR0U6PWXHyki/b77Wq3sSm0c5r2fm2CeSX7
xV6N02+q6t6nPX1Rc1yv8uO6Wq/gvCwI+d+3eH3nK/0izfoM+sD/DY6iQrX7
F/H5/6g8PegG/1Kb72sdx6r9M/X85gTz974l3sMOordhDR57s9JrpBNMlC7R
QefupkS3A09sp/9Pa+5bNPdRau/Ent6PMwd6zZ/T2k5U2e9zrEc9muLnVZrv
lLh1xxPV/sMqf0jlZSp/VOehu/p6TOnR6ab5P6uvi+LWn05tsI5AffSEEep3
XE//36E5fhJ04hqt+cca216NLa78J+iJyu9Wvh1ypdFnaGc4R/OHR9EjGsci
7csFyj+o/ELlt0jOfaY12qR0dLr5yaNqv1TvnK19WZhiWUafV2ptl0KnGtet
ouFPmj33vytdhg2g8ttUvrfY6/GxyndqHMM07+80vz9rv4aorScqvH73BLrl
fG8PvGWn5rg7yfSPjkEd1vtB6CHHcuEhdIMcn98H1f5wtfGL2n9V52i93rte
5yjSnqarrSbpG+tV3iS53F1r85qenafHG1Q+Wudv2qAoOkH/pyqdEvKJouue
maY9aDAx5PuLtiegy0ieHFY7s1T3frWzpM7yH51umtb+IsnN5zWmB2vMix9S
+qnq52sM/5E+1lY89myt00yl/1J5hco7FdiOYQzYMoyHsR1IcDo1jC1vsPP7
Vb5P7T6J3aX0abWzTm1uUfuviRYGZZrHvqjyu1S+Pd+8lrnQ34Mq1+Oon8b/
pGT3LHQk7dshZFqmefujqrNI73bWOK+rs36EPpujdTgNvaPecgYZhvw6UGNZ
/qrSx/XuVXq3i959SHkNN4rFLOeRwcjf00UHzdBVqXnX6UEHfkn0ubyf2oSG
+ziPzXZ2hd+brP6nVVg3/IP2+bwK85LrlK9V/jbpk29KjhxVYVpuUnnfCp+z
cuyaFOt26HU35zrfVuPqqzXI1u9j9dGa4//Qc1fRUVflT1J+YoXnelah9/pA
L9NhP837ZLXzczvzdvLIm5c1lxUa/12ay4l6t0JlV5Ra9xmvOsuxeVudf7PV
NH9m0NWx+VgTePimZJfDc95Vvd8o/06r5depA63rTIYmevmMPNLH/UJTb2db
N8JGeCfbsh/bYWCq323T3hgAba7UeK7o6LmzDgdLLM/fE2/5m96ZmWgddKfS
TyXbDil/H/JK+VfAHHq4XMscjRMvaxX/OgFZ3cN1RLrREvU7S/8Pqv5H9ZaD
HysdWeq1ZY17Bl0Inegx0dNWvXOn5vv3esvrT5QeXWp6gC7O1fPz1eZL+n+y
3hmpfk9RmqYOJ2VaLjAuxof+cFht7tY7m9Tm79XO9SqfozPSmG6bhPOJbUg5
tuqSUssE9OVdqveUnq+pN3ZxYw/b+z2Cvofet7jU5fPzfRbn9PB5PHaIMYRH
66zPMB7WKlXjnJhpucY6sV7okOiT5Fm3+aW2d7B70KPbZFq/bRlivGW72tyi
Oq/onVUV1nn+k2EcY3WJ9d5fV1mHOSfResy0QtsX2BnICnQ+zj78/OxE83Rw
I9pBd9pY6P3HFkHHZgzY/qRtQ566Uab7vanQtgw2zW79n5zo/8dpnc7SpI5V
1QHiaZMGedyklO9JsC6Ofo6Ns7zQ9FWoeXVR210zbeOzRicl+hn6dJdQvq3U
PHJ1hff79ETTKrx5duDPNxa6rLjC8gddlj2C10wcZIzovEL3j32GTEI3Y70Y
46QwftKJIY+twBjg9dgva4PNjm45MOByo3KcR4ecqXZrwIrUz/nKn6iyJaKZ
C0KeMmQRuhEyqHvQjciD7ZyRYX3ocIPrTCk3BrJ3oGkJLGRPyO8L5WBnz4lv
PDvQeumdteYxp+rdP+j3vvrdpzFsrXX79yqdrfJWjbNDkdugrR7djAUdGOjz
Va60Qr/p0hvO6+v87fB30W8/yfT2yqdmu9454qn3a92PUnmp9mp7heuUKX9O
guU9fGxhrfHMyySbmlNse2N3oyfS93/XZH8Yw6thPDzfVGt+eXq5y3jWR2Pu
Kb2nQW31Unp5D4/hR+3LUtV7UXP/q+Z+Wbn1jFeLvYZHbDalrzYYf/xtuWlw
XSh/sti67RuSdzvU70SNebvSp4ute36g8sfqjCGOK/dZIc95QZeBLpEjO+qM
nx6jOrO72n6mDueJcs7UrK62h4+cr0T3hc6KfnRhhtetivdVZ576/6aL88iy
epXPV36xyr8SzXXUPgyWXF7azfSALTA1wXNnPNAK9MMc31Bfl6j8GfW7pNx7
tE/trNTvVfQAzfF91bm0p89XRbn1xIvEJ2vLbffMrrecYpy0Qzor5H/q4rFx
Lq5Xm6+jK6jNubWWy/OLTVPlga56DdBe6lem/btb4x+s8r9pv/OU5g607fdd
sOc5wyOTnMeu/6ar/5OnLu+crP4GhXefVjutSdZ90XvRf8lz9rH5BgeMq0Bp
/kCXfdzV71CfMp6dojYv0By2al1OqTRfhs9dM1Rrn2D8Gn2vbYKxaXjOSsni
G3t5DNcpf0svzyuqd/kzQ8wH4XnHI7v0f5TeW6/nnepd/6UhHmN+WJO46t+q
8tdVvq2b82A4E2vN17vUmA/CD09Um5NqLVt6qPxs0Uep6OQcpYO0P8t6ub+d
3axrgSndp3f7au4leneA9qoqyXKiG7iQ+F9XpRdrHbZrHSZVmi/Dn1dqHboW
WYeYpeezxTeqsWO13tNitjmnx2yLYJOwTshV+kLm9sqwDQg+AM4B3sG69skw
XSBrUjNsd4BjzIzZfj5f6aIU1wcb2abx9FGd4lL3XxXGcET+J1kHQOdJT7Ie
0VZy/yJsyw6mM+gGnGG75NrcJNsY7D1zB+ek7OJQnljktuZpvrd287vs9Y8a
x++Yi9q7TvriRu39qkaPhTHN6ut1SkuyjpCZ7Wfnaz6XpHh9sNeSdSaSBngP
KuA/YGvq607NbZfmc0epZSW6NnIKXCivr3Hjw9KbzlW7ORp3vzTrVMd1tA6C
LoK87Vnp+fRSOr235S/lU/A5pLp+B+mrx3c0Dsl4twUdcUOi/Qvo/aeq3/O0
XjngsWl+NlzlS6us754at/3922xji52STbtjVec18e6LNOaTmzyn81VnpOby
aH/xSfHKK9TXXRpfFXqMeHY3vTu+o7HWLurrj4l+hk8FPftX6qtrjfX4zjXW
oy/PMh45U/NapPIzVL9M67Klm2U2uhs6HPpFSZp1Wuo8UO93dyrNEZ211bOB
Sqv1S1a+TulK2Xt1mn+i5vF0pef9O40zW7Jnu9brNyprSPfeIXfRy9Zn2f8z
WfMuSjaW9Cf1MRU9udU6IDwI/gNtgu1Dn0fp7L2kti6rMwb5S5rtWvYY3R7b
uG+jeWJ2o/VT8vDGxxL8/9og35HtyG50pduy7L9Cl6XOMUOsM+NLAeugPvIe
Xo3sXqC+72lnjJj9PFxrHPTzNNPjtVqTuOp115psrDdt/CL+kFhjW6V7jbEd
cB18TL8M9nnpXGk9HJ8a2Av23Ty1u0l9ZTR6TTKVDmm0/P9O/a8q8PND2ov3
9O7ITvbxYSucnG08CZ3xNx3NE3eKrhbr2RLRQzzsI/uZqf3aojGcWGkbBbwQ
XYI5HZPtM3ZxD/sA0Kux19FrwbqxP8Bi0Yuyw/o/XmfbETr8LOw7e867yDv0
ZvTMc5ptsw4otv55QZ7lCvYca4U9uDnVOis48Ftazx169wV0be3hgGTjOGDq
D6bZVligMawCl260Dk8ZsgHccXagAdYmSvf6cO45i8iheXrnWr07V2mPmPfn
PekX/bXHr6j+9ZpXD42xe55tUnBL+kI/A9OaFegWHxnyD36IfYWd9XS+sS50
Huqx53dl2d82uNF66LdVLqcM/nk5+Lzo+s1a21Z7g76KLxCdt5/soffrjUcc
U2pMEGwwu8R19wQ9OVfvtskzngzNQ+/YCNjH2MnoVOj70C+8dIPaPFdj+1l0
+5/BPocJlcY5J6ea54xNcZ3szsZjOItgMtiI+Mxo/9Awj5f5vd3J9hh9Haf1
/zLNOCg+AHxS6F6Dko3NoW/hn8CPif4EVnRhnmUtcgHMCxwJfXh/0JN3qa8Z
R2mdlbbPtt1Hf+8EfGeU1mew2mmbZ3z7avW9M8v41yjlR6a579VV5idgBpeK
Lz8gOlvUZLuWcTPmqiDHkFmcG2QF2O9fEsy/oAF0IvAL6GRnsfX7V5tts64O
+PvoNK8Le9A98IdeSh8pMJ7xCfpmo9t5Bn9vvf20N6h8bg/rxNi2G9JsF2Pz
4ONG5vI+Psm7Eu2XPLrEaa86+4TfyDY/K6yy7+ZqPb8hzXl8rhsCbrVL/fat
c1/jS8yD4EU76xyjQKzC4WGW02Ar6EusM3ob+iy+JXxMg5XuS7Q/6J6As9Im
9IAOsLiHdRVwY84Pfmr0qGt0thv0/rnN9lcP0lr2zLJsQwfvHORdgtKNMesn
iaLVd6ocx/Gu0ufE00v6aW2Gmy6Whv43NzhmgNiB8mxjOPCrJ1KM8z+gvfmz
zv272R7PtnRjT+BOK7UOd2p9rm207548uNnDBU4/1h4lZxlbA2PrV2X/13it
2fnN3oOZzdbvwBTQ8TalG+cC49oabLZ9qrNH46/R+Bdo/Kdpj05NMw1tj9mf
lqn5Tmu2PThV6YBqy1z0powq+63OUL97asyzHxdPm9fDtgp0iO+dOAD6/VWV
aQmsBSybs4z+U5LsPrF/wP6hYzAY1mzXf31AIZaDmI7V9Y4DIR5kffAt3tYS
RSl1bvO4EsfDLEy13oCOPLmPfTN9qq2fHNS8f6qxTDtQaNwOnxc0xlxfy7ac
BF9E/0FO9Q+6CjpLRp1l1tiS4LvuYt0Jeb6gh2U6dAeuAaaBvX+Z6K1CbcWy
jdEhgzjv0Cj0eX+T+ct2pT2T7UcCX0YvHBPkyBNVfvZKpfFO9ECw0O7JtjeQ
x+jgOwL+iO6H/oM9gk5HjAcY6w0F1jW+jpmOlmXZ74eNuzT44y7obRmP/vZw
ves8pHS7zuQE8cMdSlOT7WcDy95d5f/7K60Xo9+CN4K7wbuGa81XxExjTSOk
j9Rbp15TbhnLOeGMgIHh44ZukS/o/9gBL2vvztU6jtX6LI9Zx/tHpe2VmX3s
87sr+FVvFz3Mj1mOf1BpnPNAwDeqh5mvH9IZPVXP87JDLEiifbv4SLbXWC/Y
XugYKWKlvtR701W/MNv8EIyK/cUex455L9u2DPsP3wUf3p3m/WaviT0hBoUz
ztngjPAuPtU1oZ3ravzeLeq3cphl7AGN88kU++ke7mTaeSb4ZO8I+i167oYa
09rderen1nwb2EGD/aTEjjA24h0WBV9tvzqPYXKJbWt4Mtge5ww7FppZELP8
ahxhvfjE7EBvedZX8Gs+Kb4wOkfnVWlLT2NG6Hn0g890azv7+Kr62mdHTA54
O/5jfF/dQh3idsDe8bnjs2Kd7ifOracxMnRBaLNnKIf3rBGNPqN1e0Z9j9UY
nm22/EGXRgYN1N5Vo8812f9IHn8xPtjVva0/EUfUJsRLEMsEJo8/EbwD3oyu
RUwOmDn+S2J+Ooa4Qfxvm4MPDnuWNQZPgC6hz0/xG6Y4LgR95vkW+4ZfaLHv
9+7gjz4pxTEo2HrnlTktF489p8zvlRU7/m5zovnviy32Vb+ktH+T17Zfk3Ul
9gd96f1c0y06OzbrUem2aQ5I51sKXiSamaB3Fund3xY6DmFhX68rMRWUI1e6
pNtXiw3wWYVxPPC8fWpnidqZB+2VGdN6Sc+/rDCmB7Y3Q787wbFqva4jwtoe
6m18ljaxL/hP/nnR21Wisy+Vntnk8ZxRaBuXmD/sotvKjIe9WGF8C38ucu5z
rfUQPf+i0jGS8EKwF2gTnkIdsDdkJmOdlOGYObBB8ABoGT2DuC38TMSFfTHY
PvKvKiyrmQM0gX4Nv0CffqXaKTFu4H/oDowPekSu0Oa9WdZRsDmfb3bMw021
xu//0ts4HH5s8BRsw7x0xwBgs4Mr0h7+uX/rjN+q8r1FUfTPZMeU8D8/0B+0
lxuwOui2S5Pz46stizlz6HnEtnCuOGvwJdIjvHig4xuISdiTbCyCGM7D2o8F
2pfHYvYHIhuxr8AzWUv8iCtj5mM5RY4Pye3rvtif43O8/t+E/WWfW1Ksi6OH
zwx6C3GFTze7/q5mxyvBUxh3SpNxmGSlTSnW79Ht0/R/vvpIVfpDsuMn/qRx
XxKznp6h8STGXHagyHoMMh6cG7wcPoH+R6wCfvl1xCc0WweYrvTdZGO+y4I+
jV6NbomvY0dvY5+Xxlw+tNH+2229retwfm5Xfo/qP9Hg+q/n2/YklgX7E5uX
WCvs3rE6SymilQ2tWq8G08Y7+Y6r/D7EVkGn43JMV39rduzNatHSIw3u94Dq
71R+k/Iv5dv/TB79+7lmv/tX+GSyfQnI2hmBb/6u2Tx7WODJFZWOSa4V/09q
8p72ImapyfQ2odryFTn7YaV58/DAn/EdfxtisVhLMAfoZoFo+8tUy7K5yr+Z
an2YmGpi5dbq/QzOvsaWrnSc1iRN7WxudYwJ+CY4BjKQGB3kIPYPdtADOoOL
c43TwS+eyrRewJ5WVTpOu05z6aNnvdMdU0scLnY6eO8/BjsW5/MKY6LgC+Ci
xAJv6ex2sM2w0cCOsCGwJdDfwHvK02wDE2NASrwjPDsn4FQjqo2n/kpplGxf
KrZTUrrjW8BuiDEA0yAGF7qGf+LfBFdGnzuCZZeaP7xaZKx1Tl/bMoxrThhb
aqtxmbRW46OMk+fE/uAXoS9k2qgg18DPqtPc92PhvB/knFYbN22t9vuzQ18X
FXtNLhLt9W41ttin1TGkxKgRv4lfhVgBzsuqmHWdskbzQvAWbLakap/nf9WZ
dw0Kvgl42uDgO0CXnRCwJnQZcH94HbGT6Fj4WsEFwReJgSeWllhPdNBtmY7J
RAYTB4TPCLwGPgcmg28P/yxtgOlfNMI0NHuEefz9WdYL36h3/lnRyMI0Y9ng
1fg2u+UZdwLPgNfD57dnOqYUuT4BnQy8qdq+AtYGvBVMlBRff1LQ2dDdaC8h
z7yTlP/oZvN0Hv6PuwBKP6gKsfNKl1VbR5xe7xgZ9DNwjKXVtjmnqDy12jz3
uzrjYJwbbPn1idYxwGzRWcBPiYkB88AHBO5GrD59wUOR5dDkTO3/xzpTuSr/
e6UxladTzc+hCWhjtuocrPZ6EE/9eoNtFjBs7CHsImyl/+8TTfa55138/ujU
0Ch6FTYH/iMwgpHJ3hN0v701xqnAq8Ykm6bgt8Q1w/vAaLAjieHDlnwv19gC
uAv3MrDlkaHYw9jF24qN684OcftnZjjOHj8ya5s72D6pfVWuc6DEmCRtY5/v
qHGf4EPgT/emWk4RO4xsYKzgObPCHQr4FPwKnHlPlcv3l9jXhy8cuwAMkzgA
aA0fH2vFmg3SuwPTHZOND+icEJM2Ntf/8QcRbw6eSCzZy8m2AbnnAO5/BP+X
PnVCrv1D+IZIp4WY2LNCm2Ch2G1T+hpXp87kkKfu1JB/KNN2Njyc984O716o
vs7RPK7ON46PXT69zHIDvJXYLOLWiaPl3OKzAk/Eb3VH4IG02X+w1wEsl30g
3gvsjrWY0dfYJr6N3FDOevEOfkP8RzMCjTGuSWFs2DdnhfyUMHfmAo4/PbQJ
Tkhf7D8Yd/8wBmwveDJ62oQ08zdswpIQnwTmObne8u2TKsuWkixjQGBJYEpZ
Kv/nUI/7vlLbuPR9pN+49e9pSq/I9P5Aez/Ejek80Ohx5YaxEZcPLRyr9Ith
tnfB9bk3gqwbrjRb9vZviZlsNgZJvBH8BxuPtfhRbS0Rrz5O+cVK52vd8rMs
cyuazGfgN/Ba/D7wW2LwwE6Jx9ulg3usxrYxbv62JPiG0DOx8dA1F1S47irN
+xnVH6P6m+K2nekXPStL4xyvce5stj1xJE5Vfc2ssR9thtLyRq/7ao1zcYZ1
IfSWrsH+JF73Bj0brzrXx4yn8i6YKnyUuCgwCvCKc4NvjnjmRaGd39X4+R8K
jefQDvt7UcBokbPg1lNDm9MbzWPhtcTtTgnlQ7Os9zAHYg6Qizniw5/Veszo
cdgW2J/YF18PNZ3dW+p7XZeEdQbTujTk/1Dj9b+adWgyn4ffg1/ilyPOgTbw
y0D/4JOjAha9vMZ7vqbQfBR+Cu6BnxQsAL6xO9/8dVWZ6RS7kP/YzdjPvw72
98hQDrZAzDBrjmwBL0a+EAcNjkk5PJI8fBKsiThrYiqSkK2q16ve+susoGNs
iXmd741ZfoKpEoPSvsrP2yn9utJn+qtKt0nsDu1mVnlczOPZfL9HDAu4Jno5
MmJG4KMVQW4gP8CQ+1f5+XP51t/HhPqsHWcEXsFcmRvzerTGfP4vNY5pB6dA
ByZ+Dj/WGzWW4chz9ISLtQaDs2zrJWjOW9VON6WHaoIMVTpG87g007wRmUo5
vjDKFoXyt8J9J7AS9vnSsNfEAuJve1ztlDbaH3BZzDjrEYy3g/kQ+je8aHbc
OuicuGUVc8FPt6nQmBLYEpgp2OmFWsO9Q4zBLxxuLI82/y2+0bPVvPDrsoB7
ZFrvWldoXAt8C3z3tIAzN4U4c+LNHxEfaNIY1sWNx4DLYIeO0rokYvso3ddo
/YmYi6kx69tTsEnz7Wuf2+DYVuIurh1uO4M7h4OCPx1dDEwA/AYcB5lYwt2E
dOsHn+lMXqkxbxpifoyvHH47NmA42AjEiBAfsljtV+fbX3Jqqe1D7ETigsBn
wWn3KP1Jba5VOz8qHa45nK31OVjnmKZpoT6YKdjpgUrr3+jh4KrgCcwdTGFG
LJQr/bbONEEcUF6+fainlNrmYE3AjrGT8PvCt7lniQ6H35GzeUU4d0M19y3p
/s/9H+4BtVQZ9+ecDKgy3SJH0T+jWvsqHmp0jBfxXRPLjZ/gP0Pn5L4ROiW0
gkxIDrEW5Mf1N99HpwNTQ69Dbyc+ABmBTfhl2C/0FvYInO3Poo0K9XudaGO6
5ny2+k2r813Sr0L9R/KtU65sMJ9ZGnjRVaW2s65WepbWbqj6mhSzbCI/Pvga
iEsGf+4e8xgSoLFG2ybYKMRisQ/wVe7yojtmBz819in45Kosx4yJ1I+kbUP+
n3U+V8SCoZtxttE/eM59VPQx7ilxv6Bvlc8uOAA4KlgA+bUFTlND+YCY3+Pe
6mjRVZLKj6u3PCKGA93uAvU3XWuVpf4/rjPf+NMQxxGAK3G/AsyHswb+WRRz
PPe/Co0XgdWCvRCLAdbD+HZX2nZNVHv5MY//60Lfk+Bd4sCJsYI/YKMhF7ij
yDnH1ueOK/FCYHGMmTMwBqxe7x6v9Ae1u0bj/L7OMp08MnJFvmNo5jRYn3oz
tINMJD4GnXJrOKvYMz/WuM4PNY73YkyxCmNsxGHAe4kVI2asusL3XN8KbdbG
jHtxN7p/vn3PJ5c6roG7zTxDZzgy5o72f3Ovihin1fmOiZnfYB8ucULoFc0x
v9tGtLyn0TYq9z7BKXcGvrQ2y/cyOGpr8+2DWdjgsuRQzh0w9m11qW0vfNv4
tf82xH6SWcMtpyjHFwnts1/EbP+9t2OG8P0vqvSdvtH5PqvE7hBTy10f8Fbq
oa+gt3AueV4e6tyocxhHdsTNa+B1YB2cUephSx6reV6vMe+PWT9DT1sTM85F
v/gLud8M3dAmODp2CjEP3BUjTwwhd3Hw2+I7QDciD7Y5t9hxbHNqvfbY86w/
mDp57PpL4sZ51hV57J+Hvh6vcNzbBXr33krT7GX55kfgC9AtchH5CK1xXxzb
6cj98Lh55r/jlqnI1stjxvK4m4PfiLMEbgaOMbvS5aPyzWd5F5wMHAo86kPJ
zR+DPo9eD7+jHNwDHG5TuJsABkeb76n+Lfn2DXIHhTgTYr/AsOCLHZPtV8XO
Y8z4+/Dj4SOE1vADlqT7ObyP2C90wYRk5/Fjcg+c59doPCv1K1X9+4rMSxJC
HdqmnPY5A8S0oSvTf4cwhoJiz/WnuLFLdGPikzvEfZepY9x3wPAvXJxvTBmM
kNijU4Yanzy7xb4B6sBvp+t/T8mRaUq3lthHhq/sgRL79fDvgW2BpyHviMUh
Jof7CdzxYn/xAZ0Zd/nlRcZ/wYHxiXK2uHuGbwiMNKG/x4HMH5diHQA9An0C
XO+0FOc5v+gdp4X85Jbwbovl4ejAl9rFfVetfdzYMnNBbwAnPCm0ubrIPriP
pUedNtTPp7Z4XMeEsWHPQduvRr4Xx3wXaA1XF3iNuct+dNzxMAuLjF8QY8Id
iTPi9uedHrd/iDUiPvyWEfZ7dK513S9D/dP1/p3Kfyo6v67Ad4O4E39K3OeV
WHJwXmQlz7B1OTenavwj4j6LxNGD8TcHGnikwvGpM2odJ0289BTN8R9V5jfj
yxxfTqz1uSq/eYTvCrSrNX5fH/rC58Vc8HuB6TBu4vlHxR1nNjLu+CPy2OX4
e5gv9ABWvS3c9yFmhzvvxO0Qawl/w//Bvb/j020/LKuxvLmixrJwdCiv6mdM
EtpCt1wX/EfYtdTBP7Kz1j6nB8DqM42VgGlMqLR9d2WNY1SwAfGRgeFh0xPn
A6ZCfc48sZz4h9Cz8WeAyX1Y5lgY/Nn4sguqnM9XeqXmPxj7OuwhOh739J7P
d12+hQCODJ78UZXvOA0KmBL+K2gU3Zbn9MtdMjCnXLD7yGWDQ/nefPvGuSdx
eYb9XNhB22qNo91Xa//hkbuuGsNnxfYh4kvEHiAWBN845wB7kHNGHDIxT2Af
Xxbbd4kPExtsQJB9yHBkH3Lh3nzbRtz5Gx6+lcE3M4r6OXYO+QFPwkZDB06X
zvSw+vpgiHGwcbnGtpBdrCl3+aICYzncU6zRWl2iZ0/EPEd0+2Vhfx4Oe4Td
iL14U5ltLXBV4lvwT5aEfPfgP0dn3pFvzJX7iJ/Xuj38hPgt4UH4aLij/FqQ
s0vjAfcrsj+YWFjk+7dx2zL/ituWohy/A99iwZ+H3oJc3xF0AOibcuKNFxU7
Nn2++j+50n6Rk5RODP7U3wY6RV8Hf1gRtxxZHjd+iW8ZDPNm/a/HRihy2+Rp
v02wHbAhOhfYR839TnDlHwK2zBkGH+ZZXrFxnH+qvY61jpfqgB9Z7f5B6/9i
zN9hYQ5r4o4nhT9wxpl3Y1gTsCj4Jv5TxogfnLuRbwQfEWNeHHf57Wrv9nzH
s3BHkzMwMNA59hg2Gn6ZP8aM0d0Wc9wY8uP+Mttu+G+IR8VHC678Ztn/fELE
LnJf/FBoZ0SVY0pag+1FnvODfcF3dcCmOY+Mg+8B8f+fAa/GpuN7Mqzf262e
y6K4YwxzwhyxgaAH1hEsCn0UPCol33P6crDvWPYJvrCkfMuTT1W+TDy3ULJp
aYvlTN8ga6hPXb6nQHwtMvveMsc+orehsyEnxwZZCY0nBdvw3DLHDbYvsq+D
PLgw/nN8LWBQbYtML9x/HVTkMu4udywyLXPXCh2X8/78EOv98GveuTDcJeFO
CecCmco7M8Od4qs0v1sKbK+NGGG/O/G7xO6urXN+fJF9hvgOoYNxJY7vIuYL
Pauun+PsFw13/lKlfy6z7kBcFT4r4hRZB+KewPrB+WlvV2gT3fzxDOvnE0oc
r0gsJDEbxCqB2xKvRB65TAwl/tsi0Umferfz6RDHhnF3AP8g+gKxO+ALx9c7
RnBMvXUe5BOyCTz1kSB38HXj18Snyd0FvleC/5Wzvj3Edg+tM//jTvPccD+F
eypNdZYh3PmuCjoleiAxsMwd2++/9mqr1vmbQj/nji8+YXzD0A049NOZHgM2
CHoStkNdvuMIT9MZ/K7QZdwFhCdtDXHVP9c4duQXpVNKHMtETBPtPRXaTNf/
HVrnMSFumVhndAN8QOSJIUYOgNkR8wbuC/5LfBRrge+BtSKOhr1hX+YO9b2G
fzT7ngdxM+Cj71TrnCl/usbbu9QY7I56x/7jT8KX9Cq2kPjG6CLHnREXiwy+
eKj34KNmyx5kEPIAjJU22QP0PnBXdD/icjem+X4vNsErKbY1Po+5/Ey1v7za
5e9VGFPFTwxevULle1T+cYXtDPLYGtAac0QffC1m3ybfAwBz7ZXq/f4iZv2I
+/19Sh0z+GC97XPWDcycOTFH7iofXe+Y2mPqHSdOPB/nFjwInkAMA/ETxLgT
23zkftkg23F8iwHaXay0qMi4LN8CAXOEvvaBR5bZVuC+wpo6t3N8kf2N+Jh5
h+84YENeorSiyHKA++7ob2Aa6GbofQuD7gcmjK8I/wtn7oYwF+7mIbeviTmm
BnmEPUpMHLoesgvbAVzlyDcr6q2b/D7mc8Y3xfBp4nsaG/AfdIHdGdZ5mos8
Fu7lEzuyIewvthU+Mewp7DPoGXsNHxT4PngvtFbV03rCi8nmBfCBlFbXwZ+Q
XG+fdEq9/ZbQJHzv+zK/+12Z42SJw0DfBMNFx+xVYP8SeChYaFar8/isdtY4
luWBGs8HXAvd60e9W612fgj8Hl5PnAN24f9l2E48FO7aXaL93N9sH+t8rUHP
mO+x9FLao+5/MebgUMQCgX2dUGl5dm6NaZC+0FHRIYj/QRfF3qFNzvuqIpfx
LYT5Fb4/vXyo6QK9EJ0wu85YLphu/zrzH/gQ+0OePUqtMxYEJsSdEvyytDWj
1DGKx6v8vXzHEXBH8HC+74hwjxC/Zf/gwwUzYY3RFVkz6AGfC35peBN8CfnA
eJARfHPiyD2ZDr5bzT0X+iXuBL8UGD02MjF1fYOPgPagjcw6vwtOPLXU8ZlH
Kz+t3nYW9hY+eHxvYPTgmMwFXwNrTX18AcRsggeCRaB/EHuGjkEMFfFJ2PfE
yuHrAjfqXu/Yix5K39P8V2g+7yp9a4jxrmuGm49yLpBF4BMj+vkZ9g/xcGB0
K4a7fPlw9008OXwGm414WuwL/MPINng17W0MZw3bgvrEoRGLwRiQb72DbxEf
Y3KdafLYEvuxTwj6/+gSx5MTV/6Oxr1cdd6udawMcUhHcPVa6498Q4WxXB7G
syzIFPLQ/xk9redgu1CPWDtiUmgTmYZ+AbYCrlJcbt2Q7/DtqvV9/IPF3tMx
gU7woRK/x16BdRDPgz37WrNjGpcUOY4A3QO+erjM+hrfwbq6yPvGN0LeL7Ne
yfcmD9U5toj7snzvBlxua6XtZdpED2E9wJjgRcSjse/ovuhLxM8hc3PLbaPw
vTdofELYl8JyzxFMemC52wHLvyPoHoOCjk1b6EjEdNMm/9nDxWHfiQUivp39
3RJ0CPrNCX5t/NuU3xVogLbXh/ZPqTYvfaXRd7yJsRhQ53hhbIp7Au6HLxX7
9IWY7/O0sJ61jsci3pCYefgOvps5LcZ/J4mfDK+2v/wJzf3Uasf57G00Xz4n
+A6Qb9RHxhGbjR8EmkLmQ3vYucS6oaOiq3I3cUUYD3KK2FxkFXg1WDr3CRur
7VN8rMD2NfXZb55Rzjn6usC411zt+9Ban+fSWuuP88P6MI5HAz42r8U6/VlD
fUcEHRJ5/LDWZJ7WpFJrMq3G/obpNfbFfB3uGfLtSTCElSF2gDY5L8SOovuB
FfFNFZ5Df8w1PfhQiNXBJ4ftQnwv9/rwmXIXGSyA9SFGY0qIUeH+FvEZ+JWO
3G0NPjv8JMShwsNS4/6GXVrc3xfg2wInKH083zF8axtkgxAvqjrDiuwH4u4P
vJvYfe5PwdPLau1zLVeaHPd3x1KU9qyxr5v7Vdwzxo/OOW0X5sD44YnEThDD
8FWB8ew5FeZ1Dwd8m9hY6A09hHWcH9atba1tWzAwvk+Gbx3sApq9KtAtOvG2
4KPEX81c0H84KwvDWeCuEvIOuUd5cX8/wxf9cKCTq1pcfmWL7xAx/t0hnues
EF8E/kF8ILoX/n/oATvtu6BLnNDqb/gsD3RI/MaqsNfQOXuEfvuPauuWvyl0
PCf+SDByvtPB9zqmlvu+A9/xYR+2aEyjVeeeFmNyxASAvxFHwv5vbbGewL7D
84k5vSSMk/g+YgVp584QVwTNQ9/Q+Yn1vofPXY4EnfELGuw3wd/VqTZ8J3SE
ZW+v8F0F4ugYGz7V2bVeS2JXfwj6z4mtvi+CLoddD41znxw6J2YMnyO+Stbj
yrAmXeK+D9M57u9c8F2LY5X2iXv8veMeA+uADtCt5n/3w5ALtI98eTzmOMXq
It8xXRVob3Sx/3P3FFuNuWOrwgew9+EFHQLe0rXJ380FH2Avjy02P+LONLga
tAgdwvvgaSfU265ChwGLxb8AD0Su3ddi/++2Ft+dZY6cM/Qw5rG5xTTFmLE9
WJNxgR/+P1iWZ1E=
             "]], 
            PolygonBox[CompressedData["
1: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
GdM52j69fPsq7OkC65Vx56oBV+Q7T/sV2qHAF9ERxyIdg8qEvyUZzlV/wH2o
pfhQoXOVyjEr16wYmGJhsvnvY/3uKZZFnYHO4pYMy7Zs4kHAV1o49yeaRNs2
bMS1rN2e+7EV+PNi28ITwPkl8JWW1r3yudPRD7+3tO5UzCiN9qkM+0Z6o56D
vt1Jzj+rpuF4tt9svd16c/X2Hip27Odt+g8UW8Yka9rzIuyTdaXOJXXjjNaX
WqYkW+/Tv5D+39ARnyaY5ivAO6B5E3AJ+LYD/81vnyX4t3J5zoEpF6Y7Mgf+
TCq0LlQNhGohZMPIlpFOmMTYDdBbHlxrK7A+cJcM1zp8DP8j2V/PfOuu4ey5
F3DvFNtyemP01vRJce5GMinZfBJ6CmNcg7QL+SrN9FzlPI+Dr2+KczG6U7pb
IcmuVfrH5pQ/m+5cwHj697GfM60MKwaqWKhiMorNDKC9EXgL3+BY6yDpojnJ
9mUVQ9lK300pzu3oDuou7i12rO8Aa+wB7pfi3Lh0hHTF2RzzQjr5HHD/FOtO
xVAUSzkFPffEOueo3OMXxZadQawZB7/Diizr8pmqAVctsqwrJlAFuHeGY5/D
kM8bgKcXOjapmLJiy4qZKnaqmqPr0EW7852bv8zXpY19JvlOqpl4hb0eSXet
gmh6M88xLdm2yjn/mOQYk2JN3+v9Bl7MGvfVc42Tap0eTbFvP5nxO5mbkWxY
NRyq5biaa1mLkA/I3n9Jcq2GfIIhqba5ZXtLB89qZZtUtqlsXtm+N4NvNfhW
KeYF/gWKASALyeBfCPwjNKXXNk27FD9D5vMjHbOvodqyVMdq41jzhOoZklw7
JJzf621KdWysqWoGFH/Od+5XNUOl8Os8PFkEbZ9wPn9DX/dk13opplyBvV2T
69irciodgRPZc1/affiaA08odC2KckjKJVWHptxI5yDCgC8W2DaUzyvf91Rr
5+5+lH2e7z1r70n0D0h2TZpq05RzPwttHVhjZG3fkRLgTa0ca60JvSeRrbAM
+w7lkZdqqnXJsy2tmK1it02y/FY24DwaA9+aYV9ae74gWyDLtVKqkVqq95k5
VWKcQ1cu/fo2li3ljN+A3m8KbIsrxqFYxwS+WjHO8SvX/3GqfX/FsB5iP4Og
t2qsY5rJOc75KfenmNigJNfcqfZONVGZ3I9PoWkh48/SvkrfwGTzSjHF2qx1
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
bJS72ZHt//XQeqqdq1nk/61QzZNqn/4fdAYZwA==
             "]]}]}, {
          EdgeForm[], 
          LABColor[
          0.5376641714757635, 0.3220497043049495, 0.14725748750944767`], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxFnXd8lcXWhV+kEyQJIRBIaKGGk3qSE1JOGklQrwULiBS9nwULil0Rwd5A
BCsIAoqCFRQUQQVRsXfvtStYsTfAilj41pM1/u4fYebMO3327NllzdD/qFMO
PnmPKIrKOkZRa4Vv9Yyik/pH0VcdouiKjCiqTY+i0k5RlDcoitoPjaItytSr
VxTdonyJVlHUJjuKrtK31gqXZEbRXIWPKn1eXRTdkxNF8xWuGBhFY4ZE0U0q
u0XtrOwcRcPU1qZOjt/dwfUt1d+ClCh6oSiKFivsPjyK1ijPPcpzq/Icpv5U
qD+5e0bRDtXT2C+KHlR6VOOyL6vcU+rjnerf20prmxdFl+jzG0pLq3WctCf0
+3bleVN5Fqh/96qfCxUuVlqj6hmgfANiUZSSGkXrKqOoSWkjev6vLyNCnvdL
oqiT8hyYVF+L/P0OxQ9RvScp38Ri9bNKc6Q+DiyIomPToqg+1LNbbf2tv0dU
z+UKL+oSRamat0kljh+j8MFcz9v9Kv9Enue1dXkUHa1vFyrPUQqf1ViOUB3X
xKNocr3G0FtpzS53aJjzhzSW1VqbrzWWqzu6LG0tTPG8M+fvdfTYGFcvzfMI
ze23SluhcZ2q799pXHmqu9/gKBqqcKLG3V/xI9tp3VM8Fuo5XOFE/fXWGsV6
O890tXW88s9WfYsVT+r73t2jaJXaW9PBoaY/6jvY9R/SzuVyQ/2nqN7L1c8N
yntWs+PVmo+xqS5DfvpE/DTVn6b1/Ept/aw6m0WbB3aLopvVxs2ahys1D/Mr
oii/t+unjxcUuO7HGkTLHd3PTqqni2hmhupoo7Zu6BtFP2n9rtG3U1M9j3cq
T43GcpjGslr1P6V+Pqu+bVIYKzWtv5aIogNCOea8XPP5uta/Q1kUbVeZ53q6
3I5kmLMRUbS2g2l7lNoeWOq1eSnhftCf17Xm36ueJ1UuW7S2X5r7TZ9p5+rQ
1onN7k+eyp2Y6XpY34sz3Tf24GMd3PeRip+m+q7o6fm+K2lavVPhWI1xRY8o
2ql8AzX2X/W9QEzjZM1bUvPykOZtnWh1c5dAb41R9At9E/0v1Ji+VPpy/X64
0fE7hvk3ebq0iaJdTZpH5XtL+c9SnY2qc73qvEFpn3UxnV4En+hi+lkr+ixQ
3w7VPF6vPbBC6dcp3Kg+fKj40tYus11/nVX/LM3Xlfr7SPWta3Sdy9WHtY3O
013tbk13PvJ0EZ3s0zaK0jX3fw9x+hy1/2Ou9ypz+6ja+1b1dFLek0V/2xTf
S2VeL9T8qV+H6ftxSv9e6c1KH612vuli+hykOdyl38M1h7tFY7s0ni+1r68t
8RivUbihxPk7qv5xKW6LfXSZ6vypi/u3e4jHRR8v1nztUPqTKvdf9WGK+jBW
8Wy19ap4cn578xX6f7zGsqnEe+5Xlb+0nctS5yFq63TFv9C36aKri1T2d9HK
nFrHHxIt7aP9c4LyNKiO+0Uf+2gtVivcoroWqtze4kX7K23fnubxK0RjJysU
K4xOSnN+0peoL/v1NB0uU56TlKYpj35RO+9k+PdHqnOp0g5Qnb8q/f0M1/WO
2m6nsX0p2vlJFbdX+cGinX6ar/ZKv0u87nzxgXu6+9vB2icnatwTtNZHqOwM
9f9whblF7ssq9f/SXk5nH03nTOhu3s0ZtW/o51nq/4xsnz/ruuq38n+r9NNF
G09rj7QW/YxSvacp/QCFjTrDrlH5s9Xu7eI1a1TvueJHE/VtuvJMUHhQief8
QIX3dXVZ5n9mrdtalWeeND30bXSJ2z1EYYHG/EWfKDpD63+I1mWy0huV/qjK
rFHeHeIbderDXPXhLPXhMK3v2aHPs8UHLst2Ps6N+9S3s9W3Q0ucZ4zCNRr3
eM3nZLXfpLqOVvin2txa7fEfmTBt7dY8rVCdBYpH8BbR9vHDPefp9aaBrwNP
flxhG81Ts9rdqP5shLcr7JZh+oB3/yZG9esAn6MFWpsUrdG5ousThjstQ3Uu
04JsVT/Xqp+jtL7pWr/9Fd6u9C+U/rDS7y0xX7pP4Y+qb8cA96lwpPuwSnNy
purfS/Xfr/rvUL3bNRd3KnxDfbpefdmufm7o6LWtV/yEZvd5oOZ4hObwGdW3
VOMt1Vw+JZpZrLznq/5y/W7SGl6gPj2pPJerrSbx9ebA278Q7T0K/9H3zfr+
iP6ug8ZES4O1Dilqb3WJedr90GzSbe1Q/v+q7J0q20PzcZ7aKlFbDWrrtw5u
6wHV005rsZB+ix/OFW1cqr5epHF1bu8+dlD6L1rHFxSvKTQPhZf2Vf37ay7n
ZOl8Ul0HKpyX5jVOqJ3h+hvYymF5iE/UmMb3M68gnKC/Q5G3VM850JDq6ak+
P6x5vmiE1+q0VPOiR9XvKVr7vcUDk+pbp47u/yilbVS7GSpzjsY+SuF69XOc
4oMUv0HxAsmqkXhETGFCf20Vf0JJwxVvN/R/acQ/1nzOHerfxOer/TaKX93Z
vDQK/P+xTNf/hcZ1hvp2jMZ4psIPNY71YY06KW9H/Q2TfDFW83Njmvs9LswD
Y79HvGiR6rpLc3+c6v9UYz5Zf/X63V15N2ofnab4FOWZrnXZs6vPR87McYqn
K8/zqqeiwvH1yl+j+UlRPCF6mz3IeZeJDiZ2dZ2vKf8K1fWraHilwi/1rYw1
6+QwEdbro0H+TXyy+rZV/TpVfw+ozB7iJ2vYs+r/YvXtbrXfYajlf/SAxizP
w6eihxEq81Kaafc9/a3V32z14SJ920vyVYXOlDGa5/s0d6+L3sYP8jwsUb8b
FL6Q5jLNqd5r3dSfo9pZNvq4jfcwe3mp5KVDNMa22V7fb4ssZ01KWB5hfyKT
0Obeod271ObdPT0/1P1bZ9c/cZDHe/Oelg3vVZ7B+r6n6P44hX9rnud1cZ3s
99Gc4yr7ofrzcQ+3ca/qn9/RMlHPVtaB0IW+1O9q1XlDT9Ntaobl/k87+nvr
0P8lmttZmtt5mttK5b9W+aepn7M1t2+nmc9yJm5VuC3y/DGP9O+Tap8ThybM
++CBizU/o5QWZVunmDXIOsZW1kRzNV11J7Rv5qndGWr3DfGwdSF9eYXntU3o
210p7ifzRn27g57SKcfjoD+7VPY/+p4v/vOX9sYvGudW7d+CkZ7nu8Xr2td4
/t9U3pcGex911pxvTvHc7WplOfCusEbZvRyvauUzh7PnLdHM3qnOzzyvDXQ2
qqPpokW+1O/LNFf/UhtVWpedmp8X9b1O/OGlgW5zQBvrtusCfdZlOf6Byk3U
9wn6e0dlRvYzj+Z8Z80f6+kz6jyNZZN+X1ps2bwp8PBfOzids++mLj7bONe2
6GxYp9+l4nVF2rNrlN5PY/mtxjx1b63dQq3dWmTmEvN0ePslCp9W2fuUPl/p
i/T3EOtb4j3GOXGw6tqqPA8rvWyEZUnaRZ7MqPFZvbvA87FvmJOtPfx7leKz
WXt4SKHn4L0wJzOV/oDSS5Vepz4/pPiQ1t7rmwPfg9aQy6Grz4p8bh+jsfys
drOU/yeFHyutpJNlwUE17j/jKO7kOflB++mafO09tbFENLOvzutX1fclEv7O
rvL8nafxHaD0n5XeUbT9L8VfUnyh8pxQ5X15jvKcrt8rtV/OULi/8nymPO2U
fz/FP1S8teKflPt8blDa8+WWz59TuEs88vfeljX/Uvhnb8uX1+vbU5qn87VX
zhUfbKO0U7VH7tM4t2uPrVJ4odI7KX2O0p9T/Hid+7dJ5qyXHlHRyfz2QLX3
p9rdU32Yp/GO1njPUd83lbvNJxS+qzI3qux7Cou0RgX6u0Rt9xFPWJnh+Wct
iMPzj+thfYG6oPki6Up/tvPZuCLD58NT5Zb/n1Q4P830CZ2OE01cqPAeyYpb
Cny21iY9L8zPR5KxP1eZ2xVvUtqCNMsSyBToW+xxdC7WmT6QD5olfWkoQ9qX
qufZcs/lMwpf1Pycjo6sMd7fbHrtp330qvr+ZrbHxryOzfa+HdrX5wc8fIX6
mqffdyrcQ3s2N9Pf2ig+KNNzsAgZW+GRBZ4P0qD5sZrD6zuYh9yv8sX6dq/C
i0Za71ijsS/vYD6L3jEnx+ciZ2KR+vLBINu+Ziv9Q8WvzHHahyEdPRx9fKNo
YE2WeSN2qgLlm9DT8tVi0Wi6xve6aOaVGvfnVYXTM93n7MjjZYysDWPjN3sk
oXrKcixPo8chZ5+ucVUobbj+4vqdCPaExeIDi+p8FvYudn3Uwxwi741Tfzqz
B1SuXn8NShuQanlrqvJkaO4e07l/kOZnnuZztvpxuNKu1B6YpL6+rnU7JtPp
mtYWXsS5f5D6Vqv6anIsl9zV4Db/Ei2cp/pfDnmQNZjbSvV1aZ5l/fnq8/xy
6/N7Kn+D2s0Un96k+Llptktgn2ijPGeKPlIS1v3+6G1d8pxq20pmqJ9npv3P
noSOBv/GNpgY7vOmTOG9w0wLJ4s+VwyzPHKc4t+oX71ybc88T3U+oXKXFtgG
STp750e1far60D5hvRg593HWT99zQtmVof70sM7Q3+Wai3OaXBd2zUOhVaWP
GW49Ht0bvfs4lR2lsoOrLfcj/4/Ut0+lr3yiv2HdPAbG0krrO1jzPUh/W9jP
YSwpNZZNoCHkk9XN1mH+LPI4skM/sYUh9yDzwIfggejah6j+OUo/WOHdSjsg
07/5Dq/EnkG+nb29X77o4Tjpie7OQ307A18l/Q/OC4UHqD+Lu1r3ZY1r1Ea6
wsfV98eG2Q60d5nPymUZ1h+31loe2qI5mZLmtUePhAbhk9DhGPVxJTZP1Z/d
zWU5Z0eHdOZ6tPbnWGR61VOjufhY9awW7d0qOuyu/G8nzDfgD5eq7uearauf
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
Mq3a9LBYdf4/SODLKw==
             "]], 
            PolygonBox[CompressedData["
1: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
             "]]}]}, {
          EdgeForm[], 
          LABColor[
          0.6306929055215543, 0.41219886579435017`, 0.547665593445758], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxNnXd8lMX69jehE1roBCEJSSB9N41serIpoqJYAUWaYgUBBfvvHAsWrDQ7
NlDsvR0rKFiwHRt20YMNLIhYwIL4Xl+u4eP7x35mdnaeac/MPXe57nszj5h1
4MzkSCRyQEok0k7p+VmRyPihkUhNUiSyoC4SOSQtElmidNOASOSlvpHI9M6R
yOODIpGv2kci5arfqvqnd/H3upxIpFuW81dGI5E/MiKRfZojkYE9I5HVnSKR
2R0ikZT2Tu/Ss0f2iER6dIxEZur7vnruHLXzrX5/bpDTGtVpUJs9svz9oeGR
yB76FKbrhyr1009jVrquRW0Oi0Q+UDo5Fomc0C0Smaj0QdUdpE+O6k/QOFIz
9bvSHzSXtZrLTM3lmRGRyPeMXU3O0/dz9anSeH5Sv1v1uX+PSKRTdiRypsrW
qM6EIZHIofpk9I9EitT/IM3tIf22U4tR0lt1lI7t4XXaR+Ub1c+P+r5A+fvV
V1uHXUOP/KCy+V39/Xvlz1O+RflX9ON8tf1qYyTyl9qKqc3VSu8d4d9L9ewG
vahm5YuUP0LznK35TlF6VdTlXQsikTvUb43y72puGRrj81r/k/X9aPWVqjWf
o3ylxp+p3x5Vvnt7//6g2jy0h9dmf31frTYXa28MadN6qM3f9Ntila/o63V6
W8+tUZ0lqjNUdW7Ve0ioXMseOVPv8wz1tVkb7EK1d0Fnj2mM3mdkqNf9OFXs
MTgSSdecpyvfU/lC5U9p0thUf6QmeZzW4lqt+XSlo1S+VnPpovKhGn8ntT9Y
e/XWRCQyWvtthdIPenuOxSp/r7f3WJ7yM/X8crUzW+mdqre/6t+ltI/W7nuN
P5PxD3GdF7VH2uJqU320KF06xGNYo/Ku1ToLavfUCvWt3//SnPrTl9o6S22+
r3Sg2tyqNoepzXv0/SCV36v0JT2T1CcSuaFSa6p23lA756psqtakp+bbQWN9
SfVOVP21Slfrc4Lya5TO0t7N1x6erfR0fcqVP0PpAO3P/vqcq2fv15pnaX3+
bu9z8qfSm7Tcp3Z22cPKV/fz98c07v30/of1dL5G+31Olp+5Xe2kqZ0/lJ+i
eU/Sp0jvJaZn5+rZh1X/O/X3o36frzYzB0YiLyvfqvxKze177Y+nlSaFc8qm
Pzg3EvlVda6O+ExuU/4aflK/07P8nbbp8x6Vz1DZTV38zL4aY1pP9xvT3okO
dd9bdC6e1Rp+o/JflV+t/E/se/W9Q2N4W+mpWqcBnb3HSzSWYzp7/28TgblZ
4/5L6Umq07ez6VP/YT5TrMMI1Z/W2TSq9zDTFsZ5sd7JGI0hXWfxLe3bH7T+
y3WGf1Nby9TmH0rfVvnPKr9D5Z8rbdF8vtNZ6JqqsWhvPNjF7/AGfb9N3/9X
bDrQTnvmigbNTWX9tI/aRIOHdfI55d2uUp/D1M6sSp/zE5RO1Rm8S+0VFXuP
XKc2l6aYlvfUeF/TM8fleX+cr5c0R+1eornkq69jVX6vys9T+UyNeYbG+m+9
2xnKH638HOV/Vj9fdDBN+Eb5/3Uwfcsa7ncNnfpW7/TSrp7j6HrRbp3ld0ST
91c+ofwBSo/UODtoXGnq93c9m6Z3P0Xf3xUBvk3zfE/pcJVv62t6mqQ1+1lz
frODafz/aW5leh/3afzJ3fUeNOZ7lU9S/kLl91N7++pTyTseKfqsZ08p1Fh0
pxyleazX2EYpP0P5L5T/Xb9/pLYXan3y9E5/0D7/TOW/DDGdvUqfnmrvTq1P
f+XXah4vDQ40VGPro7Luqv+4xvq00vNEB1p1npfr+8JanU99equ/C5U+obKr
Vf9S1Rkd7jTyLeHO5NlGreFPaucS5f/UuM9SP/2V/p/S1Sq/WuU/xk3jLq0w
feXcXanylb1NUy9Tflof06g/Nbf12h/ttY8/UrpKZX8ku36R5nWh5vWXvhco
P4+zpnynuGlre6UHsY/0Tq/T5yT195vae0T3y7+UT1bfq5Q/pY/pGLSrXdw0
MaL0Pr3HCfq8I5pZpXl9o7bPVb/bNZ+5qtu70Oee891evzXr/Q/o5Pu0i8az
TOPpDlOiPXOz+t+pvX21zsUv7B+987l6XzeqTnJ706q31cZgfU5RnYWqs0rP
HaLx36Rnb9TnBb235wf7Ppilz4thrbqpzmDVf1Rtvd/X9HmK5jNH7Vym8qfV
zonMVW0vUP2fdR9P0u+d9U6nagxL9dxOjfMvje969fOn0i+Kfb+31z5fpLV6
WnOaq7V6R/v7Vs1zndIrVP6syk9X+Veqf4nqd1D9TNHJZK1LqepN0zq+pjoX
qU6m+nlJ+Q0R70v2JzzAnC6ezxf6vko0cKU+C7Teldr/UzWXbXrvC9TuErW3
Vv0erN8P0meZztN4PdtO67BM7fSOm971j/uddAy0+iC1M0ft7FA7+2pso/UZ
lGOe6PV25os2iZZ0UVsv6/t13U1vyXfTOm3V+l6jsiu7m8auUfmhQ02beL6L
6mxRnSXd/f210CY0Dlr3SMT8RZ/O/n651ma93vdSje+HFNNs+MkDdBd2En04
ROkmvcefAt/1c4ppP7zNndBa9bM5xf1AG2n/bpXfrvKfVF7bS/tVfX2iPl6r
NC16Q+lPSv8I/M/bqvM/zflQzXlCC4ONRA5XOlafHRrDOKVf6vedYb7w1ewv
+oOf7KjPAOVv0FgPV/0bld6pz1HK36V0sp6d1Nl79DZ9P1LltysdFvcdNlzp
YTpbhw73nngvzXupP2uS4zuXPfd0uItXVZqX3c46qs4bGv+n6mOsxjQgx/To
S43zK32+1me0ptQzy7w3dPilQOO/0LPds8zn8/1M7dv3dN9FdRbOUv4j5SuU
L691/gjR5Mm9fV5EBiJTe/ts6dXv4sFpe5PaXJrm3yi/Is3PUP9PnbWLNY9b
Kk3XWTfm2Dnb68ga/q4681XnpkrzQf2yPX5420W9fW+WVjiforuug35vr8+v
7dwe7bDfYqqzQHW65Pl36sHjwONTDl2Ki34sD3QJviiWbd6I/c59xD57RGXH
aH0m6gxu0nr/3dE06kCduQP0Waq9coja+Juzon4/V52tHU1DxupsXTPM9PZP
fd/RzmcQXofv8Fq79oL264d67mH1daT6Gptu2SSabfmEe4B3iVxzW8x0foDe
zybxJVfovXxd4323Qu28leJzyR3KWTpC72WZ8ovhm7W/Xghr+rryr+mzWn31
FE1oFU3YojVfEfPd0U/t/6U1rFH5V5Vew3ZhnfPzTKdmaD+sV509VOczpYXi
CQZrTe8TT75RPO4S0dNvlH6uzwLlv1Z6cDiLnPdV6uscrc9Gna+0gT4faiIy
JvAb8B1HaF9P7ex78ciellk+17ub2tOyGbzLC3r+WLXzotL16uMS9bVB6ela
jzStx6AU39XQWW3lyLE6Ow+q7FJ9v7jCcsUlSvfJdT3qPB33ffu4aPVNUfM1
Nyhtrznfpb46KF2j/o5R/vkW39/c45cpfaa373jGOa2nZTD4rUe03g8P9/35
VG/fQ5+pvG+g1dDsV/QuPtV6Lkd2FI1o0nu9WOl/Vf6Fyh9Q+Tx9r1f5hUqz
Aw2BluzPHa/8fkr/G2gdNO/lSvN8Lyl9otI833+UzlG9map/ktJ7te+eGGI+
e4LyyzuaDz9Hv72n9Aqtw5Seln8Z8xrNezXvTvnrdMavTTPv9Zjm9+hw8z69
aszDz9KaTFSbd3c0P/+o8quGmI+ZrHyXzl7r7jXm/2eofl2W+TbeRx+t9XF6
Z2Pho1X+Q1aQjTPMv/VTnblZ5g/h4b7NNn/HPdhPl+pA5GXxJ3dpX/6qNu9R
+p7O7rv6/KS6H8bN76zRHFdLLuqq+p30/D0x8yTDis1Tw7enqXxv9XVWF/N2
6aGM+6h+sPl2+l7RxfxPqvIbs01joA+l2tOZqveAxpCcYR6mG8/re5II5sNK
12lc7+izWc9laE+m63Oj1novaFKYY9/QNnflCj2zRfO6XWl3zfcV/bZFa/a+
2jg223zgkToLzXr+za6WlY/R90+UP0RzWdDRfOSxKmtVnU9V3k1jGae1GKvP
XJV3427WZ5zods8Uy0rfIwPps0j5GXo/0/ewvuCsLMtD1GlRe6eH9g9Q+RmD
PZ6PNLaZ2eZXD1d+gj6rNMd/dzGfvFXlz2ivn6n+12peL3T1eqNveWCE9S/T
s33uN+r++0l04szw3J6qM453NNjt76kx/N7R73S8nhunz+N67u6Y+b30Ysvb
/cNdM1pz3Eefgs7WmX0Ez6H89cNM96H5m7JN/+ERK0QXbhIv+UCe1/gtlWnI
kWz139rfczq31XJ4vvpql+r9wftrn+py5OSjsq0bQi8Ef0o78Kik74R81wbn
U5T2Fh/4X+VLol6D15X/MdnrxHohd7Am1GFdZmsfzcr1vrhI5etUvk3lNySc
j0ctkyGbwVfE2vz+PopZX8XYNiY7vS/kodPse2Sqc1o9r1zNsVOqzwxnA1mU
fFTlnVMtt6K/QHYlX6LyLhpDrdrZW+ejarDvZmSGA7O8b7iT4IPhh7kH4Xfh
e+F3e+tdpeb47DV199zZJ+iA0AX1jZlXg2eDD0UOZvysN3uIvUT9bmojJcc8
wTS9yyKt3xt6GSkJy7zIvm1B98c6ow9CLzRI7c9U/ZGq/0uj9z37H/nlhFD+
TqnvcXSUyCkr9dvzYZzczZzFP1X2IPcl+0fvokLntK/uxTXoFvXeWnl3oq0P
1lruvb/WtGprV+/tVO2JDcr3VnptR7ezU21+1tXlyJvQj1+V76L6HUTrX+/1
j0xIiux2SK6/k1+Ua5kLufh7eKhsy2/cbwu7Wo7tqHbe7OV6f+kuXK5386fS
xbl+fqg+v7f4/GxHh6A9sCg8+022z9L14ftnYZzQIfKc5Tr0ISp7XGvZt83j
HxO1Hu4u3Ufru5qerQ9reJL6OzHXNOYLjWttV+/V2cjXym9SvjbDOo5XWTut
10tKOyvt2eY6+Wr/2oTrXZ0wvY2k+Myyv14K52tAm8snqH5Jm2n0J9oPk/S9
l/r5vESfXn6H6CjQBT6hMW/r6rtjl/4EHZDO3d96t5lKdw53/kmVz0x1Xd4X
91tyiuk/OheePUL9jNOnk9r+X4nPxzPhjFRovf5WOl97rzHH+nf08nl69mLR
y9kx30WzhgcdUbZ1RuztE4ZbZ4S+iDLq/BR0TOiaTopZv0c70C4+3A/3BP0k
dTjj8IMnhHZoj/zWbm5vZuj37VTLSPB/6ECmdjO/V51jfSJ6utoc6zTR5SGT
dU3zM1kazySl+2s8p2hvDdAeO0npifr0QcfXYnl6Umh/Tqb1g7tkzVSfX/h8
5EjKuE/R1SFTDgq0gnGzf/6VafqI3FUl2vWB2q9QOjrb+m503dXDLPMg7yMr
I0sjO28sd34P0ZAT2Cesr9J2A53fMMAyK/ItvMQ7qeZ9WYenm933k82+fy9X
/Xuhger3Tnj4Ad6Xm8P40akg+2ZqzC2DXadE76RLqukhcgF77qfQ1+p8y15r
y7Q/st3+2UpPy7S+lTFdr7PxoO73GxosH6ekeXzZbX5fB2n9h6juX9h1lB6s
vTdU5+Nj0cODxHvli594T/lpWZZxuHdPyrNt6n3tzzkhv1N1nh1mngB+4NJa
69/Qw/XKNJ8wN8Xp4SE/SPfHZo3//jLrW04cYb72aZ3bI3TeHk+YZj8Q6DZn
BN0KOpZ2Ws/kHPNzM3L9G+XlGs9OTfUMEejxWeYnkLsmqTxX43yt1HoVdNro
Vjg7D+zmSbIsM8I7vqm+T9YYXkP20ec70Zz9E54bc4A+c4+hx4GuXqb9cbbe
2aVK0zTfhaLzC/T5osI0vEFn/eOY6Qz0Zr7qnan6Fyrdqb2+Ylhkl+J+Nx1B
bp2U7jz05MOY73Tu9jeVr2bPBZp9cNAjfVxhHqMSeafW8j56Mvgm+KfjtOZP
DHMePoo74aAw/o6ZrkcdfiMPj/G29stpyr+q4b2ufuPqd4v6fUd9PaHnBquv
pxvNdz6j9P0K09gRUfMe6NKfSrY+nfxnxebD4MGQvbFDvpXs/T8l1XwA9yv3
/L3hrs9UWyuhu0pb1c/7Oq/v9fcaoEPmTq7Kst4Y/e82eOds57n3Vwb+E5mP
ewU6dkoX6z+5Uw7I8X2CzpxzxBlCj4ktbl2yzxo2tSe7Wi/dpjF8pv4/1edw
jblB43isq/cKe+a/8B0az6ldrG/9T1en8IezQ5/wmazPU6F8/6jvR+5J1hg9
Ob99oz2wn/q4WL+92sk8B3cle589C884rLP5YHRGx6V6v3EHnx7sfuiZ91I7
wwbaRvSJ1vVjfQ7JsL3uaD3zUVff7WcGHTf7AV6TPbD/UNtZ3lX+Qz33gT4N
GebN4MvQ3W1NN38Ab/FNsW0QG4vNA68K84VnWa+1P7iL+Y7PlB+n/Hbtqxe0
vpna/7lR3/s92nz+oQNPJjyf1UFGmJVtGQTe+HL9fnoHj61Ez7+ndkqV3qNz
c7c++2htjo/ZPt5N42mQrHq3+J7ZlT7/0IFOCeti0Mm0V74o6nfXVfXbAl/7
FndTzPcm9zD8LnzvPkpfVX/Pau+dp0nG8mxznaWyI/LMV8Nf34J9U88e22q7
GToldEmcd846/PCReZYpkDluVf0tqn+88jMqbes9XukPces90H8cFjXPO1zj
HKUxbdSe2KvNfAf8JbwHc2OOWcWm7+ioOHcn9rdeIqHP4VHzQvBEe2kd7lVf
J2E3LDJm4HuNoUOR7dc/KJ8vfmWH1nmy8nnK/6n8pFbzW/BdS5VGo5ZrUtXm
x/2sg01jP/azjjpL+cWqm5rid4c9GRmU81UeNV1P1ZjfQS+hdq7qbD5xQdj/
pVHLR8hSKCy/DnrTGTHzSn307BT9FtPzU5Veo35HqI0f1ceR+l6m8mltpsHI
tuzzrM7Wi3yvdl7WfJ7UOz230XQdmRSaXxA1nwm/+VOl9W/o4bjj4N2p01l1
hijdrvc5THPsNdBzaNE91ZzrOd1Ra3vYbUpTMqwTwUY5Hrmyq+kP5x+6An3A
tnJbKE9pc76D+pmZ8PMzlGZnmG6cpfP+ZE/vN77/VmkbBLYIdM3oLTqonSP0
TDvOv9L3Nc+TVWfsSLdFm7MTlimwGbNfX9R6vDDEetLXlL46xHpVzvO2YD/q
rOdqBnkOG3p53tj7oJH/CXOZFvqlf3RpFwcaAa3GXgO95n44MMjp0L9LQp0v
sm3HvTTYaSj/utg6JnRN45R2ajMt+77Yth/a/LzYfaK7wUbcMeo1ZC2Tle+n
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
ap2tPPvsxqpNc8HJQ/eQO8FIwQ/gq5vItn55Iu9b5+hK7dMlmucPyk9Q2coW
179JZ3ehyr9V+f4qf7LFPkdLVT6m1uUHKJ2P75bybcofVut2Dq81zYZ2c+dW
6wU+qbFUxI0vBGdYq3k39rdfA7iHvcQLPqbzO2qAsevk0X+B9wX3W4FuVvkl
yl8julevNlfq97q4cZJD+5j3SO/jPPhGeGt47Nvy7Y/ckG3dN3wt/O2t+dZ3
Mi90ntC871NNj7mTuJvWF5gngDd4s8D+13ujX+5on3nuntkt9ifnvjy5xfPG
lwPfk3O1Puu1JvW1xq+BY5vQ0fpl9GHTSmxXHdjHPBJ0aHOq6QqYLzBq4NPA
1oHhA1/HHTU22zx9Xa3bb6i1ny/l3GOr1W9fnet/1ZoeHhVoAueKPHIlNPLo
UA6Ghzz7Hx4aXnqixjZD/MS78Iy6N5/Vmv+pfTU/zzqYBUGvBVYFfRDYFfDq
m7MsN3IPcB9gJ0Dfg96HetgtsSuA0cUO+UO4L/CNwEcCneAU9fsOOvNK24uw
QfAMeiD0MOhjTulvm/6U0MaW0NfH4j1v0e8fRaxPRa+K/pVxfR/qfBfy+LGi
a0fnjg5+lz22t881enf06ujXaW95aPO/qvMLcxF9v7PV+TtabbekLjYs5JbN
gVYwp/vCvC7SmJs15pVJ/+x1fDTuG2zb8f+SnE4N+VVhzVcqXZpnWgHNuDnP
9wX3xr6N9mHaW+kBjfav2k/poD7eV2Dal6mvyei8lG8Z4PE0DzBmMG+o+1ze
336w8EP4jjwazuD/qbxK5Y8meeyJMP4Z/W07hi+nLeaJbwv9TAp9rVD5icp/
k+R0dshXBTvzo0EHPi3MFz8QdOtv6IyXlXnst+b5Dtoc7qal2hPvqZ9RBfaB
wwcVnST+bPi1jS6w/xt+cGOUv0L5daqzROl14dlrlV4ZylsL7Hcysp9937Bh
oUNG1wWW5eO+bndZpfM3V1q3A98Mz4xsgFxB/A3SniHP7/j+EfcDOZvfkDWw
seLLh74AGyW+guh0VqjdT5W/tdI8erfwbN8ax1HopzQnbrqO7gRZb90wy3vl
2n/vK1/WapmRPDIHGBD8i3/ROk5uczyCzLhjA0T7OT7AH5V+JzvFd/1S6fe2
UfnNlX7PQ2qMH8HHeae+f1Hp9za4xnuY/YuOnbgIVf0cG4H9wF5AvxqLuzwa
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
             "]], 
            PolygonBox[CompressedData["
1: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
XEmz714+7stpjqkrtn4H9L8J/EbEsO6YumsWwNNnqntOe5jb/kLfNWVDfwGc
ke39VT5b+W6vc752oe881tQXyc7xUa6PfB7pwAv57QTr6yxttijXLtl75WnK
G2VL5Hkv1Z42GXylEn0WyschX8fVNMfG5PP/K80xZcWWFWO5or1J/tZo24vv
UC5Hm3sqWYaSZSnG+7GsY57r4M/9fK9RbiYbH3h0sn1L8kHIF/FUgXOFWlD/
NPA0vnW0z6c8Hfgmzaesc4TWU36gwLjk05Jva4R8Vg3sk5JvSj4++fp0Zzya
5Jw8+XvXMMZh5D+9hWOhb4NvcKJz0JSLJhwjC+zjk69Pa/RL+fvyvFfozJ4Y
7xiAYgGKqXWnXIL592P+2cohYbzPIs7Fk09rXyT4++LalfqFyOtL5pKS7f1G
MS/FvrbRZniMc0iUS/J4umOdRdlvJqb7Dq+7/H202ROxj0u+LvXZDnz4H/+I
co6Ue/RxxG0Vk1VstjTjDwTO57eMJNv0su11B12ALi2Kda6ldPpe5j+lhWOD
ssF7w592Ley70f7YP+QcUvmX+sHvLQnOqVNspZfyryj3TnHuSCPm0Ae4Wapz
BZRTo9yapZm252ejP+8q/pbqXEzlOCnXKS7VuQDas7V3p6Q6VrWV8p2Jjvkp
9teM9oNo34T9pVxZ+3xuAR6U4vvELYx/t2hp6rVfizYn0ywDyUI5t8q91RrS
WlKOg3IdYljMOxs6B+YidZe0hso4Z/Wy4kN8C8s4J+8acEJL45YPKRH4WFPr
mmg6Jn8o+DaWcU5cUeDL6b6bPIK8MpBXegvnjsnnKN/jWxHr5o/0yU9yTFOx
TfmsZwOvTLZtKh+LfC1Dk+37VoxMsbIX8m3bj2H+XRKcg6FcDJ35vSh/Xmjf
nO7Q+wodE1ds/Cr0xYJ/dLZzP+U/VO7wm8m2XXWm6Gz5WfZolPeY48BfU/9J
Gcf8Ffs/nOzYq2JsirX1Zb84He0YnWJ1k/Icm1TO6BL204HZzqVUPoFyNRXz
U+zvL+gJQc+wZOdiKOav2P/KfPtilNOk3KaSiqc1dE6BcguK5ToWJ5ukeK55
LF7rDriZ/XV7knM1yqP/+9Ctt/KtS7ozzYlzjFSxUuW43k3fuwqc6yUfeW/g
8en2bSmHdFy6c1CVi6qcTeVurmSOc5HXH9SvBt/hiHNLFZP+XmelfGLlHfNS
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
hDdlE73WlQOpXMj/B+bptis=
             "]], 
            PolygonBox[CompressedData["
1:eJwtkskug1EUx0+kXdoYylaFJkoTi+rgaxtDY4ik2iKClVgTD2CqlYSkqguR
tEmDJ7AjBK9gWGgtiYjhAST4ndy7+OWce87/nuG7X9viSma5TkS84IZxR2QM
9gMiH60i0/hTjvFnsC89Iq8wEhZJNaPFDvSKDEKxT+QA1v0mN0ouzZ137uYD
pq7W74MnYhvEOvF9sABfxA6IeYMi7bAaFalv4W63SIm6ZYv6FbhsFDnGnsIJ
bNN3hr4Z+iZhAn/Nb2bS2QT/r4ueEXb1iHRgU+iy6HJ+U0Nr6X6657ydaQ6b
QOvhzi+6c2a7gATxZ/I5Zm7m7AGfrf2NrsS5DHvU3IU8nDFzAesm74K4rRvD
LrGvi313uo1e7z0zRw3itlfMMb11hiv4aRC5tr11hi1mqaHrRxd1jO/o9+Z9
qpAOm2+UxQ5xHoYQ+Sq6iGN6aU+dW+evwBs9joPmnfS9NgNGH8a/JX4Do+zy
2CRyFDJ9tN+kffsUtkD8jvywfmf0pxb1k8TuyRXRHMID/ojf1L21/4L+EwX6
flJvlnr/CXF1rw==
             "]]}]}, {
          EdgeForm[], 
          LABColor[
          0.7107724148848449, 0.39282266323986137`, 0.7117195994303841], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxNnXd8lUX2/y8ESAggLZBQk5BOyk0lN4WUm6JioYltRRCxYKOIiCCIiiKK
Ylvbrliwt7XurgW7a1fsDbECIvZK5/d55zO+vr8/nsxknnmmz5kz53zOuZnT
Zk44pXMkEqntEYkkKMzUnyGJkchQJZZnRiJlem7Vu1NaIpF8xU9S2L9bJHLc
XpHIvK6RSLQtEnlnRCRSrLCP0qcrfXZX583Tc52+fULl3ab0OXq/uiASuaRT
JDIyGoncOTISeUv13VYRiSwpjUQeGxyJXNoeiTydHIncovzHK/9r+v4VPdfp
mwMaIpGmIZHIgQr/mRaJbFN6SpdIZJLqOUjPq/q/YnQk8l6/SGR5VSSSpjIz
1I9fyiKRixojkZuGRiIrFPZXeprSNyv9OLWnRWWOV5lHKT5a8f0U31tPreL7
KLyxl8veR+PzTFIkcpriq9XuAvX5NfU9T+Fz6s+TSrtZfYqrLQ8MikQeUr4p
yn+o+nKAxuSglEjkQaW9q3w39PV74k/kqw0q+8LySOQI5Z+k/Pso/wPFqldj
skBj0qDnzJxI5BqFs5XvMX37heqMpTv+scppVPxpxdcr/n2fSORlxTcrfnq5
079R/vktntd5Cleo//tqjD9UeqbKztBzmfI9pfaMUXsu0XclGs93NZ4XaDx/
7ey5YBy2qPznFd9EXzQ+/1O8WekvKnxBz+War3GqZ2ym333b2enkGaU+nK5+
3auyD9f7w/S8qXe3qk1HKb5a4R9NkcjE4ZHInwrfyotEqrqrr/r275Wae9V5
scZ5Un0kslHrYIzCB1vVJo3pFZrbQ/X/UrU5S23O0Bym6zmT77MikWo9pyi+
UWO7t8KDlDdD8/6dyr5JdS3v5XKY3/tU5mbFV6rMOar3W83JjYWRyCzN9xJ9
268kEqlU+n8YA7Vni8ILlP4P9b1zXPWr3kqtn5OVf77Seyj/lB7uyzLlWdrL
5V+v72arnAzNxRLNyVzFf1Vd96quRzTOG5XnjZ6RyH8V36T4WsXvVPtf1hie
obHckR2JbNdzmsodrDoH6ZmreLr6f67GIUNhkvJdr321U20Yq/5MVhmHqn//
bPEcXKewUu18T+u5tM3zcJ72y4e0V9+eprru0Xzdo3zT9e4OhY+oz7+q7f/W
/q3XuNbpma16r1TfKzO0lxV+of05R2lfKt8E1TtV9U5WvaeojgVK76X2bOzj
+EblLdVc7NBcLNPai+j7YepLicZwQx+PIetopPL8oddLlec6ff+71sB0zeNs
lf2RxucDlXOK4h8q/q7iszSeqRrbMzS2S1Rmptp2Ztz7+PIw1yd09fi8pvIX
5kYie/T9XkpP1Z49SXnaNVffJTv8h+r+SH1RNyLnqw2n6f1+vUw7hyr/fP2/
v/7fkeg5Zn6HJrp9tC1NYzxI4zlH/+e2O/0olXdavr+7P+J+zAn5t6vefZR+
s9LTVP6svv5/suI39/X+Y28Rsr92qqwara+eFd6v0C/27ErlPT+0h7GZ2dPj
M0jlnKr/x+jdqfkO71T+aUqL02+NyScqc5XSXlF/89Tms/TtDKXdqbm4SnWV
Qf/UxztEuxZ18/NmsmkG8/pesmlcVPmWK/9TmoteosXvK32vRr9/P+T5INn/
X6l8rxZ67pjDNYpHFH9U/bpD83eg5vE2hf3bXVeFyt6iur5KNv1a2t1lUc5e
6uMxff1/F9HmZb21f1XW30Qzz+vts+th9eVW5b1ZZY5R2fvq+Uj5j9S3t/T1
OCbo26XK31v5p+nbC3r7PKQtB+j5RPn/pe8nKH63wpfU5mS9f0JtXh3KvUnh
vSrvjl4+vz7SeujXJ/yveNpgz8087ZHfFI5Wu/LVxyWKn6gxf7XU9GqR5uJU
5flV6THluU3fPqj2NPUynfhPH9OKCo3DmwpH6Zs7Wx2/qNR0iPfQ1VlJLp/x
e13vflDaYpV/cpLnmjl8Q+k/K/1spR+i+kZorKKiCYvVhl3Kc7jS9kp0PFlr
7GXVNUNtelFheXfTME17JFF5tiveRXkWaa9F1N5UxQ9Sm+t7eQ+uVV2/6tW5
qmt3oseBs+zMNn87SXUdoSdPbagcbTr6bk+v7VLV9briWg6RI1X3HtGrw1u9
1y/q5f1+mP7fofRJCnPaTS+OVJ2jdAZW5Zg+Uu/ykH+73lWqrh6ax1UjTfOh
/X0T/S37KKbvqnNM447s63n4XH05WPEGxd9U/FV986HeJ4mm/a/Sbe6qeJcG
xy8tNb1/uI/HCxrC/HLO3t7qfi1XnuIG0/qRCps1xo9rzTQN9tlF+bQ5scHx
K5V/hcZogt5fqLCiwediqcJ9tN/31rNO85DRbp7hNw1crca2i/r7mM7EPVrD
m4aJvjS5/4zDSbzXvvi32nm+1vyiCrf5zAq3m3iZ5uEOtfkhxRcq/Vg9ZRqD
rhq/u1r97VlKOyfZeZi335V+lfrzq8KTtWB36d3Bas96nW+f6lmm/1fmu87z
1Y4tJaY/0KF0xk77s0p9PEB7bJP2534KD9Hzo+KTFG4oMf8JH/qz6rhUdf2o
cI3W2Uqtl1tEgD5RPR/rOVd1XJrv+obku7yNepYrfYba9iN0Rm07oofPadY4
7aJf7LmD1bfe6u+zOpsmKz4QXlT1DlL8cs3Pco3DoYr3U/pPSh+reDfFH1X+
8Yp3V3yL0j/SPL2l+fpQ4TClX6lvL9S3Z6gNqfDmakO7+IFK7dWf6nQuKV6q
eLX6OlD5D1V7BihM03OY4qkKz64wfVii8CfN7xea3+s0v7NVZneVeWzUtIE8
ld09fj/oWZlsHgZeBPoxRd/nqp271M6BvV3XMar7fX1/t+aiu+ZieG/Xe7zS
pyv/cOXfCs+l8iqV5xKVObavw2f0rpvW4cWKf6P2f1viOr9T+HWJx36jwhTt
s/567lEb1g3UOlOYonF5ivaprC9VTprKSYAH566h9MOU/o7SH0/2/mRvdlN4
t75NS3CdtIM2XKJ1MUbxs5N9P/h8oPOtL/G6+ElrZolo0Y1Ky1batemOJ3Yx
jwDP8L3yHS96f2Jf8w7wF9A46NvQRufpKxpwtMaiSGvyda3BL0q8xn9T+Veq
Dfsrz3mUozylylNTqzXV6LMsGfqhNfGa2veOwpuSTWugM13U51v1/wlxn/nx
PqYlhVob/TQPW7VX8hXvqfiINtPFlj6meeeqjNHwnYk+7zn3x3J36OYxYnzg
LeAxZqtdCSnev+xj6HeXPqbxE/I9fos6+WzjjKtMdD/pb1eV+Zbit6v8DToY
Juv/TpqvdWrbvVqLu7Um72tyGeeEclYrPAQeuLPnvGcf81bwXz36+O7KPHTv
Y9oM3U3q43PpPdV1n+r6QXWtVbxM5T2jOp+O+t7zfNR8FfzVDtXz+SDfJfur
ruZK8wBNCrMbzS+lKt4pk0uz9wj8AXm4K9YE+nlRue+wq/uaF+N+dFNf82vc
BbkHvhvuUPBy3JVatAbuEk+bKDrQUOn00QqblDZsgNag5myH9vlt+n+XwqdF
15epnctgj+r9bZLCnXo+Vvol4v8L9NwlHreTDvtCxe9RvKvi3ZXnbuW/THtl
nNJfUvqBCivFy1fouVvfryo2LYImtSpvhtrwldqwLep7W4XWT6TUd4W7RT9n
6/9z2I/qR58e5o/hjTv4S8UTlXaUnhWKX6v0forPU3yE4g0at+4at5UatxN6
mGflTH9NZQ3XfKxUey+pd/xShS9FLWPIV53XaK+drvwpPcxHw4cPULyw0fEh
GsOP9vL6Zm1/28fthOdJb/d99keVt7mP73fwri+r3iGq63zVdWuxaTU0G9kD
PBz823n1znOM2tAY2v+81m0n0aeInkXwWVHLUUqUZ2tn86bwpdzfuMdtGe05
PD/MY1OJ53en5nel4t8ovn+9zxrOmcWdLBdAPvC9vn0zz+nwVzs1DjsyfP5e
y/rR+K0cGfivkIdzijOKM3RTF8fhDxep/jP1zFZ8L62Df2o9fFItWqP4NYq/
o3gn1feJ8qxU2i6N54mKX6F3a0UHDlB8p8r7XekzFL9U6blaRzl69tf/p6ov
b6ovBerLmylO+1P5I1XO/2e+76zn6Jmv5PP6+S6/RPHOVa5rm/Lkq7y8LNd3
jvo6R3PRrYfpBHwEtOLLLo7DB34wyHKMHhr7waMtD9msF39TmW+rjYcpPFbl
HZPlfOlpXn//1jqvL7fc5xWNZXW5015Q/KVK31lqVU5umu+T5Htd6V8rPa70
6zVHK7RfrtVeG6Wyq/Q8xJ5S+iql36P0T7WuGtTOao1JXb3Hf6Da80mZ56FW
aTE9r6uOPIVnaAzfUbyo3nzfeWF8vlA/nuhnWdN6PY/1sxypUGvyT72fXaO5
V3yn4vNqfL5XBrnKgWrrb2rzyzovbiq0rAOZB7Krab1d9pNq+xo9U1JFO4bq
LFe4WuP5P8ZN8exuzjNV8SGKP1Lr+NtFkcgDqu9UnaEPKVytZ4bityocofdZ
etrggbS2+mtMfqh2mS9kuY4LdQ5coOclfVNS5HIe1LeXqvwDNc9nq0/P6psf
tZ6eVjir2DwSvNJy1oj2+gi1Z7bKmKnnCZW5QOF8PU8p/qC+2aBv71eYMNT9
W6X2XKfyj1T5F6j8jXrXU237WuGjte7ve2rLE/21phR/XOHMWo/Hg9qzQ6Cz
yj9I4ebh4qOU53nu1LUu+27lySvyONzCvKjNw7R2xmvehyv+m9p8hOK1iucq
/QPVO1+043GV06z23JDtOPM0K/SJ/Ylc9rQky2bPU/q5eh5XHV+ojn8q/Erh
QrUhlfxFbtfA0LYMtbVEbR5O2/VUKV6g8KshnifmiDl5X2W20zelDdZTr/TO
zf5/EWOgPDdnuY4JRa73S9X78RDnIX9Ss8tcylhqzXXVHj5W4d1azw16rlL5
S1X3VI3/DI3VZRrf/onmoR9TH/dorfbT/49oL7wObxo3LYgNMP1JCTIX5NhF
MY9HVaF50XLlebir57lhgOfjqVz3Fx6Ls5AzsYf213H6dpzSjlUb7lFdr6iu
j+Oen1kDTDvmZ5i/gNc/JsO8D3w8fAd3Yd4dqP6+obBvsXkWZD60Dz6GfiBv
gWfhLgnf8t5A8zr0eZna/arqOVJtWaB2lmgcX9T7k/OdN0VldNJ6mKQ8h6uc
A2Keq0y1uSXm8U5X/AfF31Wbv1f4k573FP9RYUpvpyPTeEF1dVP4mdJf0BnW
T2v3OYWPKX2nyn9W6Zcr/p7iCxWvbfecfSiaOj5unn6CwqG9XT4yljuRUWg9
3K5wpt710hjNgi/VU6T4MoU3a6z/rjmeq0PozFzL3pHBzUOuqWeg+lmvsRup
tf1ZtekCa5D9Bt+3NtG833x9W6xvH9P4zMxxvYP1XKQ6SlXXCoWva80t0fdv
KDy3zXxkoeZ2geaoROU3q56L9H5Fqvd/SZXX1meih5X6plBpg2Omr9BZaCv1
fzLQ645+rAvxI2tM74+sMu3/I9FjN1/7IlPxUSpvnWjPB0rbHDF/zxocqfI/
6Od1wBr4SPFPFR+ueIXyfKh4ucK5RR6bMsU/V98uVh+/UFimtJ8HmqfaoP8v
U/pGhecof53eJdb4/S8hz8Rmx5fo/eruLp9ye9SafvRU+I2+v1LlbFZ4qvIN
0Ps9Ck/Xk6F4gsYtVuu7UnWt70vE6ecdmpcCzcuTgd5DN1mj27J8H/m32nBH
qeeXeT6xzHcT7ih/iN4NVt534x5jxpex/VjlxpQnTfv9GqVd3d93S8p+PJTf
R3U9qfjZ0Mky18UdCLr1YH/vjaEx66zKCs2PQAPhSbJjphVZCm8uNX2GTu9X
Y754ouZ0eq7T1yJvUZkPq8wlKut2pecMMY3uNtJyD+QfG3JMz39IcP0PhDZ8
pDXwur77Wmtgq8q/V/3cDq3W2BYi/1Ibxqu8Zak+84qr3Nb1WpN9evtuiQyb
9xeEPA/kOQ15dWnMtLEk5r3NHn9e/R2JbCPLsiPa0znVbXpU/MAMfVukPF27
OH6VyrlDd9Lju1pW8kGt98n7Ci9WGWcpvq/qLRhgmvJAV58F5yj9AOhcb99R
Twp0BHryaKF1hnOSPAcXKFyc6rmdPMTlswffq3Xf3lX4UJ7LQB7+aq3zv6Kw
YoDpDrT9ILV/gdbq21ozq2M+T26OWe47NMh+2VPsJ+LIdFOCXPdJzd0aPYcF
2TDtQz68sM10d7zW49Qiz9G2Gt+Tfko0jYb/gleCx2L/sncp83W1Y57a80bc
MmPOaeTG/UWX18Enaz4PzTbdYlyG15rfSVd4eLbrZc4WtDnP/mrDU5qzJwdb
vrw0nPPc8Z7O9Xk2Nd382tphPueWKd6q9gxS/m9E1zcNt2x9eeCtuBNGy83v
lZT7Ho+slfPsjUJ/94vG8KSo1zPrel6+9Rafa052J3stsua4f3H3QpeBzIU4
ezOt0OfUDpVxUaHX/HztizXoZjTPn4kO9yo037oy5nth/x6mUWd3872ROyNy
hH4hHV0COoUv9W3fQvO/l8VM59KUJyfBcs2dGvOxeve68r+oNf2MzpGCRsvQ
Rip8XunPK/2Barc3NbT5+7jLmRn1HfE3lTOmq2nhU3u5fUPa3bZVUd9rp4V2
bkMuqTKmKX2MxmlfxirXezpZeYYpT3m75RfrRWOe446nu8ozCiMqZ1uyZems
He7e/D8owfIJ7qJJoieJOebdkfugK2JfQP+5e3PvTiq1/g49Xu9S617Rwd5T
5vvwfM3jd2pnsr5/mrO73e2/SW2+S+U9oTzDVN4tyea94FeQcSHfgrb8qm9T
9e3flP+Skb5vcu88LMnlc9deMdJ6W/S3lP2x0rcneuwYQ9qLXOy7UOYerb0t
ydYRgANAZoe8Dr0g+sGJpd67yPVYX+jO0R09m+87/XO9vV7Qz6Gn6wnf1e7+
dI9aLoN8Bjk3usene1u+hYzwrlAm9zzugMgfou3WhX3I+IFLSLZe7L5C62rR
2R6dYRkN7b6q0Gf6ggrr86f0Nq9QUO54vsIVeiaqbbdrzB/TfE/UvP9XYUqj
748DGq1P3pBsnXJfnREn9PX/6Li+Dnquv/4nD/KrHWENoB9FTzpObe7ebtq7
h/3VbjlpRtSyUvAWyEvzo96D7EX6ukbtPLGb9UDogzILrPtBB5Sj+LxyywzO
KreuA93TId2sl0I/hV69j+p6ReUXqexZ5b6LL1T4YaH13ei94cvAezwdZHus
M/ji5HbHE6Kmo6tDOrgE+v1Cvs+Bm8LaP1HjmKiyjlP4s2jmT9mWgdKHp0If
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
             "]], 
            PolygonBox[CompressedData["
1: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
38Bc/z+ZoblJ
             "]], 
            PolygonBox[CompressedData["
1:eJwtkcsuQ1EUhhdxqaRRSaNatzAyKCeaVE8PR+I+IpEyJU2F6ISEGQ/gEsED
mBIkRp5CeQlEMBKXtFVt41vZZ/BlnbPWXmv/69+9mc3URq2I9EA9LEdFAq0i
b7ZIZUikCqMxERc+yYWofRPnEyJbQZEUcRbmIAaD8OyInIWo9YvkBkTuQFyR
y7BILXHcMt81fOdHRAqwEjWzv5gdYEYLONyZhFfbaHon7tKzA3vQEWE2s7L0
tlOvUl+gb9HTo7pKaLlBSxotJ/R003NMLKHpDxr5vkZLg2t0qt4Zdp6GU+/8
g2V8UD9euMPPXUtRo1v1V+CCGWOc+/XuKzrGM/VOd9GdPugN0puhN8m/DXly
beRWyeXo7+S+A29H3TXOmTQ+Jzxv1WM/TJFrJvqgCX7ivAv4vH0mLZPX+i1a
ttFk4UGBHfJwTi5Lro9cif9h5pW9mp5RD9XLMvoi6FtH35P3ro+OeRd9H/VQ
vdx3jfZD4hpnw/QUbbOj7nqPni7qR67xVj2eIHeF1jrXaNcd/gEIGmwl
             "]]}]}, {
          EdgeForm[], 
          LABColor[
          0.7779026995656352, 0.2639210966414834, 0.6394195054633263], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxFnXd81MX2/ldBCC0JIJAQkA5JNnWTbMqmQoIi6L2WixWk2hUFC0hHQDoq
KhaQomJHRb2CXeygqNiwg4JewC8qFlQsv+fNM75+f+xrzs5O+8xn5sw5zzln
ttuIMSdefHgkEiloFok0UnpjViRyR3Ik0r1vJHL/UZHIvfpc1yQSiZZEIvPb
RCI5Sh9T3jp9TlX+C0qf1ydPjezvEInUiG7WNBJJ7+S6aw6LRPoprdcnVfn7
2vr7Vc0jkXeVvqfPw4e57H2h/PPJbpc2/1UXiTwlunVuJPJc6KtE7Qzv7u+v
NnLec6H8wCMjkXNEZyRFIlka61yNOVtpq04e8zi131xtDlYbN+c479GQ372T
x8R43mvvMTPes5WO1ueEpk75vln5KR1Mk3+S2twouoPG2UT5Z4k+RvkRzedE
jaGtxtBcn3GiZyQikWTRV4qeK/r9o9zvyiZ+lo3hGZmjvqLviDjtF+bwl1r/
Pk3j/7WDfyOfua8N87+3renxzT2WoWE85NWFMm+3N01ZfqfcRtEbjvKc/6Lx
/FvjvFfjPEHpBM1pxy6RyCDlZ3QxXXxEJPIfPfN4/Xa75uBaje1qtbG3LBKZ
pWffr7qPlLgsdSg3WZ9uok9v4rS7PpOSnPI9rjaX1bntg9mRyBS1s0PtLFU7
P2pc+/U5XO/6j8pI5Jb0SGR2QyRS1Nn5jfVcL2sMbUW/pHReM9PM7X/1/VrG
rnk7rCoSWaW6c1W3Z45/f1G/J6dEIk+q/K9aA6fkelx3aizX6zNA7+HtQvWp
cjGVf69C60rjTdbnPJVv2snfoZl33scy1TlD435E4z9T6bVqR1sr8qraKejs
uWae6XND6Hee2p+sOdyiOUzp4jaPVZnvo+6X/pvmOG+l6Jv1+UJt3ap0rtbD
LtF99dvt+l6j9AON8++oafJmdXD5En2/UPOzp7PbWl1repXS1XV+D39o/ufX
aCwtNC6lHTIikUUaz/Vp2kMqN07lT1DbI0VfI/pC0Qf0nHepvd+VPqB3103P
slP0CtFtRb8n+s8jXfcspRfr+wuanzfiegaVSVaZt5W3vNbPskLpi3pPE0Wf
LvoMfSaJHqy+tvWKRC7TvH+j5ziinfNHqs1WoqeKniE6OdCr9DxHip4hepby
O7XzmCepv5fU/mzRI9R2u1DmTpW/vJPbv1F85lKN6UWN822Nc53GmaV6PfUy
j9P3L9grSt/VvP2qNXOf1s6D+vwperX2+ArR34o+LqY5Vt15qnuuyq9R/k/K
P0n53yl/sfIvVP4HaqeRnmmdfl+j/Azlf6r+d4ueI/pZ9Zun7ws1nlEa+8v6
zNeYz9b4n1SZmMr0VpkuepYFzIO+L9E7K9G7u1X9nVPr/DGaw8fVR5L6ulvj
3Kh2xir/P/r9OpUvVvkbkzwH48I8DGlher/W8Qea/0tF71D9xlora9TPDI3/
8bh55H+VPqLPa6LXKU1TmVdErxV9X9z85n6lf2jMy0VPEn2u2r9ZbTbSXvhS
7d8i+lu1f15eJNJG7y3SX8/Qyfn/03h2qswy0d+pTButz4Ua87Ua+9vay88q
vzrJa+IO0T808pq7XfT/NXK92/TZI/pDlX9edK3KL+/k38gf18JlkuAJGsNO
9dNJvGew6O2ip1Zr3Wiez1aZOY08rpvD2EZpz1yo+vnFmnPRV4ouFL1DY7hB
Zdbr+07RN4l+VvTYTp7PJao7TO2n6Le/9U7qRb+pvpqr39NV7hLGr6kYrvyf
ld9V+bdr/MOVv1c88DTlf638GRrbBI3tYuUvVJsnK/9z5WeofJF44E7xwKlq
/y7VHaUy+5q6z3Waw+y2HsslYTzM/ePKL1L++WrnT7XTU+3s07tbqLytWm+z
tSbf1Zq8Rmlers/hllpXC9V+p47iI2rnNPV7eUudpQWa566aW30GNvcavFX0
c3qu4/XbmSozvFT5OutbdfT8L1Ddk0TPVzpHn9/V/vp6PVOq8/eozo3qq4vo
t9TXUJUZr7xz1F6JxnW02l+vOjO0Zr5VmQ/128X67WqlV6ivYSp/lvp/Xjxz
pOizRb9Y4XHdFsY2RuVnqfyEUuctC/mlav//1OYpomcpbzZ9iV6psR2r/JdU
p5nqfqX3N0fzc7323ni9m77l4nPK+yTdv52jed4k+hjNxwQ9y2bRv+hZsjSe
paw9zf3FKvO28o/T9x7Kv4F3qvy5oo8Q/bTmZIrqvqMyv6nucer3DPU/rNRz
zfM0Zb41tgEa24v67Ra9w1uUX6vfL8qPRNprLB21Vieq7oP6/VK1PbOrn43n
aqz30rKj9+lklVmrMuNUpoXonaqbU+XzFlkQuS5F6z9NdLLSmNIifTI0thVN
LHshd7XXb91Et1O6R3t5u9bbCI0nTc/xiegzRfescd0eSm9JsmyH/PZvvdOP
VWZCK8um5O+QnHB1V/dX1dyfQvpW+QqlCdrRGKJqq1J0do3zKkM+88F35oQP
dcoOcxuxMP5BIZ/y9aF98jt08vMeONxjSQ7jYf21F32H2umitKs+fyt/SFfT
LyJn0YY+vx3u+esYaOp1CG0ub+L61GVdk0/b14U5p3yS0mb6fHq426X8WvW7
sInboh3klqRQZonWQ6STZc8/xDuWix88pvX/l+hVoteLviHJdZBzHs/zetpW
7edLCc+IPNE0tDm5wWv7VPGJa7Tmh2vNZ2vNH9R6+TTda/9TrZV1+v6J0vla
h+fpeUrU7gOZkhk0pLMkC23SbytU5g/xkzLOTp3PZ6u9v0p8tg8V/SN7WPpD
leSrh1VXyzMySXVT4z7PR6rMbpU5U2XKVWaA1vk+9ZOqdT5adJLG0l70hX10
5qnyWtVJCnt2XT/tfeVfofyHlT9cYx+ncZ7FXg3tPCMe+JHG+YjGeaXSaar7
qOg7tB+XtPVaZA2uUd7zqneP5vIX5D59eml+Z8Pjg841TTKAqkee1HNMFP0T
snuu5dyfgqybkmKZGHn4qVrXfVJpfuC9l6leXpXnn/dw4Cj314N9od80FZFn
1H7nHPe5QXWfTXY5yvwcyjO2Id39/YVGzvs5lJlc5/H3U5/rg4zdSe09Xxv2
tuiNge4hOkUPtVvz+Zjm82S9l3s0l+fpvVzL+c9+0/zcm2s5CnnqVP3WVGvm
Cw12ts7+jZr/EzXfX+u5HtM8Zur9l7fx/mGN79bzbNFzbZdMNVPlX1D5/io/
ON30gojfGe0sEf0/lX9V6baY5bWZgb910Th/1Thr1W9qGPNc9dVG9B7OcfW/
t4XPUH7jHIUeonX+SK7lN+S4awLP7Kfn+kvj3ZXueqcqHdbV45oq3vWNxvOu
fj9Jz/u3+PuHpa7DeP7QuP6jZ/hD39tqff6odzFH5Su1B69PNs2Z+pPy54mu
U/5XVV57vTTmk0Pdd7Q+lya7DOcifX6tz7/1vD+G/cK++aPKNHmcad+Gcw35
Za/osS2ctzfkT1Qfm/UOJiktUvq/0ObvVd6/+zOd903I3x/2Nfsb+YgxnKM0
V/UXqP5IzWVxZ+t1PzVWfm9/b9TUfR7Zzf020dw1TTc/fyjf4xumdZWU7t+Y
N2SHNJVfqO/tu7ku5e4T76rRnJyg975edWcpb4z4//3K76v8ywstByAP3CYe
8nsf1/9c50uPHprLdl4/F1SafjVq3fdd0fP0DHu0Bl4VPx2l35cUSQYWfUOR
x0f/yINjKz3+B9XnMWr7CdF6hZFd6m+m0sMqfKY0Cc/IWdMy3WfQvapTqe8D
Nf6L1M6fknlXKe+CIJvVqK9xohurTC/9PkF0M9HZou/O97wP1lhGBBmyTOXX
qO0CjWM1+1P5x6r8FYU+55OVPzPd/bcKY6A+7SDn8g6bd/P7fVlzsVnz8Bl6
iR5orj7tqdvNZahzRaXb+a/6+amPf/tMc5sc+kA+OTXI29ka23MZbvNP9XuD
zoBNol9SP8u0nn8XnSX+cpTOlcPai5+VWw6GLlD+Hv3+P336iV89rjn9VPRW
1f066nptVX6d8h7VZ3LEctnl7bwH1qvfx0T/qH7X6/1+J/rWNpaV26j9qiZu
e3c7y4H3JEx/pLaT1O63oj8VvUH97oOPiV6rdj4TfZPaaZRjff0lrf2DSZbF
7lE7P0Wto9+t/G0q+4E+FRr/a2Ue4x61fY7m8EnlPx317x+2M+/aq3F9FGjy
Pw51fy4z/ZbKvyU+Vq75/qPI42BO4IMfhb6oe0fCbb6h8t16uC/45+vtPP+s
0VYa3xWqn1dq3OJp5c/R9+sSns8NUc/fujCHPOv4MLf/62H9BN2Ed/t6eL/N
1OZYsDu1Oa3MZZaonY+jfpdN9Oz/CbpMD43/E+XvVX5T5d+mtT1U6+t4rc03
8iw/9ld7OyQbdkn390qNs0+690a10sp0yyr9lZ+Z7n0CTsRZxpnGuXFKup/9
Sc35yaI3KB3VxHUnHWZd6e+u1oVXtjC+xBlwvfb9ENEHmluPbtzNeMU2jW0i
edpfN2vMZ6jOII35Q+VPUP445T8Z5u5T7aO3yjy38zWeV1T+JpX/S2NYkOrx
7G7uM2VwoPupnTfUz0/FlpvuFn/YrO8N4qX1+nzSQXpcf38/V+k8Pctu5Q3S
efyT5v7BNNfvq9/r9Nmm325Vme+UnqAyDfnuZ73G0KA+++szS/NwfhN/h362
pcfDvCEHIAMgCyAnHp1uWZH5qwpz+GCl2+mc798bQhlk2Orwju6sdPkjVWap
5uBW0Te2MA4IHnh+lr9DI0MMkGzSu1soqznJ0phHqI0ZldYrpldaZ4BGv3hd
ZYYrnaj8N6Peez+WmQfC/9B3wCigzwnprEAvVt3uqnuM6v6q+ftNn24qvyXq
ffWT2vkjzby6t/KLm7scZc6rdPnlauPbMp8j12mufk9zmd16lormrk/dv9JM
/4DMU+kx3Ks5WavPFRpLC+2dNaIvEN1c9Aei7xN9uPbIcZIvHkj3c25X/gbl
91GZ1S19Bq1M8hmwOt1r+f1Qd3alMVPW9hjN8/f6vkj0I/p9iz6rVKaRzvwX
K73mN1b63KUMMsM7+n6p6LcrfS7z2yFcpaXzs1TmDfGlUr2P37WvT8j3vnlB
5Z9vabmNMxfZ+6ywp8BnFob2kemGhTJ7A8+HJx9s7+/QnOO/9bEcMDHHvLJB
vHlGjsudUmHZ5uTuxgfW1Zu+QePqk2NsE4zzkCzT3TJbnvLXKr8ZuJbmN1nP
VK/5qZd8/nB7y7hr613+WrXzlPIHiT5PdUZ0tz0DW8b3rf0d+rl6vxfeT8sc
67Snqu392u/nI4ur3/X63lZ9DVBfL6j8cyr/jcq/Xu8yrykd2t2yO3L7KUXW
8b7QOMfpOZO1l8cqXaj8l5S/qMh52Dawa3wBP9X4tyu9Lsd5a1T3E8k2T6t8
lt7LTtEbRQ8SfSrnmer2V7llKn+G0sUqf4byWyr/X/q+HVuOyueo/LAKl52j
stEU900fm1TmfpVpqjIXVbjeYpWZl2M7xo1q82zlH6Hyo5XepfzRyl8Zdx42
GMplp/g7NPoK8wBmtK+154U5wXbE/IObMHfMYab2wkj4WHfzpekF1jV2VVmX
Q65Gvv5c83Kr5uczpQO7WafTqzhUr78+Tx7uM6Ih0MeEfNqOiqcWSqb9uYlT
7AH7JesOAKcNci/riXXVMu684pCPDohsjN53tMrHQl3SwkBjT6BNbAqFqv+W
2imOu/+jw3gGKD1Wn2cON98eEOhtYKDtLWfUaQ5XtLe+/R/N81aV+7nU8ge/
3xnzWj42rOd/aw0t1Lv7mL2guRqo/PkF/n1gaJ/2loc20dfvb28M/RP1u7a9
5Yp76j3Ouaq7PsVzx7ydF8bJ+QL2xp5lX6PT8y54zp/L3eZPSk/McR5zwF5c
G/bjsBz3CX4P7tItYCmji4zZzYrbBogtEPsatjvsFsgl2MK2i56vdnLF2y9Q
+rnO2TzRF4n+QvQ9pS5zd6ltXl+JXniEbRHYJ8AsRkc9B+AZ/9gqwKv76Ozf
LR54hfj/g6Wu+4DS1/Tcr+vzvNZtD/HhV0R3Vzq0j38jH7ngVdG9mzp/SB9/
z1Sbe9XmJLV5btRzgP7dkOp2Fum3M3TuHKN5HS3ZbUTUmAnYCfYS7CJg48jz
8/QpamX++m2Qq3dlWM4nn9/nBDrzSNNXNHL+/KALzA00ZQb18W+cw9hesNPQ
d3+9vy/1bttn2faSpPxZYGVRzx/YzzMdrC/Dc1fXu8xpUduUIqKnqfz4KtMn
g7nqGU/jDNczPt/B2AI8FHssNiRk2ZbiO2NEL1b5h9uYps7IMmP9c6I+Vw/X
mNcmGevlHEFmPk786EfRg5Tu6OUyyAyNuhszhT6UF+ivVKZJd5+DpE0DzRnO
94eSjB3TZinvtMi47VS9l4T6+Er5FRXWG6D7qMwolVmhMuNVZmS920IuGKk1
/6XW/MHS0E/oa4jK36Lyl8Stc7L/7tO+Hlbv50SO+EXv4gG1f0DpGPHKzPY+
kzpoTsboXRRoTvqIvkx0seilWmenoSOI7tXgdYncCv43tJ31f3wKugR9+ase
YW4bWe8ZHspgw+8UdIrSEusqZUoTJdbDKpVGGyx7IIMM1vi+Ub0MrZnTyz3O
08pt68bmje17hNbbW3r2VxqZHq7Plu6hDaXxpv797VDmnjZ+FvbGOf0tE49W
mi+eUaBPC/aj0p764EiB7euNtj6T4NngF/DrbT31XWv8ePHnnN7OB9PAj4Az
l3or4j7vOPewj73Y1uco9nnONfKQ3bCjIb9t62ydFN10a2frleiXE8Uzs3v7
fKFv+uO8WBT3mcvZy+/RUIazgu+cF19kuD329QcZbg/9EZvAvW2NQ0xLcZuM
H90KrB4730VxY3nfa/67qMydbT2fjatMN8KmHzfGMjnudYrtAXx9Qtz0r1nG
Yle2Nf7xt/bjbaIPKr9Dimn428y4MYqrlV4ZN55zRdzvGRsr7/qGVI8HXHFM
3JjJxXGvdzBZ8Fh4PLZX+Dw4GfYsZO1L4y6zX/0uSjU2DS59Xtz0XuW/nuSz
AZyIs5f5ZC5vr45ErkLnShgbxm6LvN9YZT/TWTWrle0V6B3wvRo971WtrIMM
7GManjlafeUpb5TSL1Xvulbm8+wZ7Lroy+g75CPPwGvhufDVIapzlcp8lGU+
D49PU/kpvdw/Ost00fNaWX6GB8L/sHux37CNo7M3Fb092eXAtGgTPepo5lZ5
nQ8zD2fc9L9LZW9q5b3TRu/7ZX1fo/NnqebkSs3JK5qTlxOmyUN+PLetdSf0
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
meeznDOdmH7maVCYq4fKrEcSo39XrnX1d7R+bs+1/rlF9Ln5vqPkY5hjO/ud
4GsCz+UZ4cO7w7yhn95bbj9E7u0D+0HnZI9nVrou999gc8YOcn3wlUNOwO+O
8wFZGD7PXTnIu9zBg37Du0Y/5Z4p7pu6qsDloBnasjLr4twNALaHvQBeSr2h
YZ2g36PHMfb8mPkAd6HhQwUGgu6AnRBexNo+pqv9hLhfCTsMMhn+IylBB4YP
IHezrpD/8ZVbFfzlNgR/xT+jjpleHfLxs7sr+NohL4PjsK/xoQGXLMNXLWb5
ijvk0O8YP3OwtsE+E9s0Jyfn2vZza539HJHZwbe5q4m7ldCj8G/Gz3mx0sG5
tretVPkN+V6r6Lurgq53R53jU9eEsQ3tah8vbNLYfDj/eLbbAs62vM4+KGB8
VeD6BcZS8IEa1tV3IhDbT+wUMVTYyxYUOr5gYaF9H7DnId8uynJsQre+1l2Q
D5ANJpfZZ/MqpUUdfUcBdxWAAeObBG5AH4fWXnP70uGz8lm+75viXi3wi8sK
zK+eaLDvw/AwHnA78Dv85Y4Oe2pJne/RY002aP6HBBwPPA8fTPQP7A7cIUVs
6m/l9t0B90hTmacz7WdfUmgsjr7A4w7ZoVsa18J3CXshsgSYx4gQX4aPDJgL
+vVzmeZZcbUTrTQP4R4snoF2vs/2HXPoLBm13mPQh+4wTPdzEf/OPVbEvn5Z
7nc1M5RBLpgVZANitrBtE1Myrqvj5GljdK0xR+6PJOajJMiiT5TbH5w7L7nH
DbyleYH9spHZsQ31bPDa7d1gjJG1io0yrcgy9neFvt+Lu6fQh/unOUWGRNbd
GWjOrqUBY0Q2RUbl/rkpZfb9re9veRVMA1n36hDzxf003OsAtkL9z4IPHvdq
XJLvuwX3qb3hZfah76d2chP2rcxJ2F8bHQ27GvfiIfu10nx0r/Kde12r7MuM
Ly56Gvc9MYbWBb7Dibue0OHxr8e/nfqNO/oeA+4zwJbL+Ys9F+yWuSGWPLPK
9/L1rrJ/xIag77Uvsi75daHPPrAd/HyQWd4MmCEyJrgoPl7g8fgMYb/gfhDu
CXlJz1qX8D0eVQn7hOEb1rXEvAd+ia18WrExXuw/yLDTgxzL/VDgKdw1tbDe
8WydNSen1Nlf9LBS3xVMDCIyGb5UYDpgPsi+jI971Djbkd3hxciPrDvuCzox
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
z/Zrvu9pmxF0XdbIrcHW9q+E+Rb3IP4/qEf24g==
             "]], 
            PolygonBox[CompressedData["
1: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
vp7yNzOdS6I11N2rmI981/IJdUpwTF6xeb0Ru+d6zbR2OmPOx3mNtdbKUTpD
fUGmc5uU86Tcp93p9m3JRpKttDTPvj7R8LJiMazB0Sp+oy5TbmKa3x7KcTwb
b5tdtrt09jDtnzV3LodyTJRropx75d7PoH0X7UOoH6/iN+aaBJ9BOou0Rx6X
bZrh2Ixy0JWLPjTfY3XGJiOvyZmOzSvnT7l/n4aciyqf2SLoXcWat4r2nVUH
2dfN81tAZ5bOrquZtsVkU8q2VI6Dch10ZuwDfijd/0WRDSlbUneE7grZwOOz
/B8A/RdAPrel7NdHm9hX+iHf7oLWien+75V8whPS7WOWr1k5+pXRl6Uhx4qU
A7EE+M9Y51qu1huE+pVk/xdL/8Gaj622kvrEaOc4KdcpKsW5gfrPjP47M4r9
t6aC/5MyJNs5j8p9VEzlA9a7OvRureP/MOi/DE829Vz6z8pg/Rcj1bnKejNO
Yz3+inVupnAWh54nU52Lqzfp8wmOySg2o5hOVfi7kG7fjHI8let5OtP/HZGP
/cdMx3gU61GOwTbui6iQc2+Ub1Bd/t5c587LhpQtuTTBvlXpnHSvUci5HsqJ
agj8PTgXRPo8V677/8eUKjsHZWdL7xntHdnMsp0V09J7Um+WGcD1QrbHlBNQ
N2Sfud7fwnk00z4l+ZYk8zOs9/Jmzg2QjSNbp3e8c5GVY6lcyx7obInqjqEc
RxbD451brTfpKsb249vBSPvIv0v3GauzVjnIF3NsY8rWVIxPsT7FyBUrVw6B
cgn0HwH9V0Axv3Xwdk+yfSfKaVRuY/90/9dKc2guvdH0VtMbcwz0927hs0//
Mfy7mf9zpv+e6T9RR/VfmCaOjYuHYsxflOy7UTEuxboea+G7TDGoU+DvlWDb
Um+G3zPsw5fvSDn3E6GvNuOLor0HtRdfS3BsWTnWyrVenWBftM4AnQXKaVBu
g94EehtEpzjWpv+Q6b9kI1IdO1aMfQD6+mamc7WV0/oG8MZM54Irx3QD8LBU
x5IV43o02zEExRJE0+os+2Tlm82m/qrygZINy2ch38WJ5s6lVQ6dcunGNnHu
vPbQvcinSqL3uv7Dp//yTY13rFs+APkC/g/AGniH
             "]]}]}, {
          EdgeForm[], 
          LABColor[
          0.8450329842464256, 0.1350195300431055, 0.5671194114962684], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxFnHd4VVXWxg8qJAiaGCCkkGAJIffmJiHtJrnpNHsdAbvYEAsqomJFUIqA
IoxiBwRBmVFR0FFREGyjIoigY0ERddAZkcGuYxu/95d3+3x/3Gevu88+u+9V
3rX22e/0C4+5YLcoiqakRdHuSncNiqIl+0XRs61RtKFXFG3UL71LFB2dEUVr
ekTRISq8oz6K3lD+50o3lEZRjp5/Lfo35f2i32RV9LnyS5V/R20UvVoQRc8o
//fOUTR1b9Nf6dkhDVFUmB1FByv9Kj+KDiyKok1qY2O9y65SHXf3jqJZyr9H
5V9XPa+H/izt7/zf1e8tKref8vZQPf/r4r5R5kzVfZZ+P6iuB/R/jOhdou8s
jqKbwrtH5rrc8Rr7xnTTlN+pPnTVOy+r7oYWvzs4FkXX94yiSaKvzIqiGRrL
5l5uc36D2zogoXoKnM/75+zpMR4q+oZkFD2s8U1TOlfPt4meqj7k6N1f9X+H
2tpLZTP06xZ5rp4V/Y3eXdMeRS+pf1PLouhFlb9O+R8pXaA65uvXT+uyS2u2
Rvn7pKKoJM35PfXutVq7qaJ3U94m9fvVbPeZ9X1c9GeiD9A7r4neX+kOjTNd
9X1c6TGSH+ndzJT7k6H0jD5RtLfoqVrrXXlRdHOR14r166b8r9XOHZqHuQUe
c73mbbbKfLmH1+3mMP8DGjzmnzT2qgaPe3lJFOWJVtHo4RLvKeaH/7TZPbR7
p+bxSdV9R9J5e4V5o+z/QvmRfbwv2ZML1Zf5BX7ncv3+pvJnaK2XqS8P6/dD
J+0Tld2uZzPUt7cylfaNovdV0dea9z91jaLvtA5vKn+68rcof4ro60UfpWc3
iJ7W1+V+aDf9vdJv2l3ma6Vb9lF9e/ndT/R/nPI/Vjo9w2vGet2sOR+yp+mt
enaRynygtHd303ur/vzufreH6F1lbv8rlUnXu7tU/yyN/XH9H64Juagxim7X
2rxRGEX/VRvP6N09VW6uyvyS4fKd1NY96v9ZqrO/1n62nh+uPvRS/l2sq979
Te/OE71ZdKS9uEjlz1X5KpX/ai/X2Ull3laZn1TmBJV5R/TPok8U/Zj6c7T6
c776M0/re4bm/54Gz9cq9elTlflA8/PBXp7zpVqHB/QbsJv377Zu3sPnqV+l
nFn1rT7NZejnyQ3OP0npnUO1L9T2v7RXn9IaLwn1NOssj4fnaI8/r3ITRTfo
zI7dM/Sni882+RdomI92cfkfVUddT/ON19S3GRlum3ZfyPcZY+zTVOd87bWr
NMaLVOef9O6NKnOE+Myxoo9RnUfWRNHf4Y06X39tjqKLdX5+HyBe0dN0It1z
yTpR58wG1zND6Y36DRPdR33eIx5FFRrT16pnXbrr/4/6eddQn8WdGvudKr9Y
/ZnY6OfDQpl01Tuds6P3d0v5LIxSna9q7KuyzZ/T1Je71acvVbar6HtEfy96
TR/zwSrNwz/U7jTRdaKfU/7UQBdpzWdl+/8tGscapXup3X6q53HRsXTvCep8
XuVXaW88rf8TtJdn1Kkfyn9Z8zRX764Vnal3x2Q5/xjRc7q6HvjJaxrr5FD/
5nTT9K1RazVddLbquFXn/s/6zdD/zzWG0p7mCU/ovD8Fv9C7iZ7On6L8v4in
PKf5ubhN61IunqL2+g2MoibVOVNl8lRn30LLAuZipMp8pzIHqMyG3p4T+swZ
YA7Xqj+z1f4s/W7Q/w2SLyvV7nqlvSVve+m3gjEo7abfI6LvKjbP5Kwdpb3/
NWumvg3Qswr9ponurzarAr0zzfnwxiWSj7U9vRevjntM66qjKFdzGGX6vL5c
aP7ImK+Nu44NKvN2N+9F9uET2rcnit6q/p/b0/k/qtyzmp9ztb/f0LhvzPXZ
4FzQV3j9EpVZpTKjVWajytykfi5X/i72Rp7pfir7RdxreKnWekfcz8fVeC7q
w/peqD6vE32s5vND+JnoMr37QH+3y/5eKr4xVvTPoq/P9djX7WGelRS9YHfP
aTL0AX77abZ57jadkW3i/ZvEEz7j/Cr/U6V3aP5vLHIdZyd9XkYrnaJ0sn6R
zk6Jzs7rKt9f6UzN67U9LEeQl5RBB9iR7jKcuUuUtyLb53+ixnWT6EtV/PcG
55+pM/ir+lGkuv+tc326/n+ssr/o+cYGlx+a8LnifFHHlRrLRNX7ncodoz21
TvRi5X8lfWC9yhSpb3My3W/6/KXq30fpP1X/JtV5M/xNaYb6N0tl7tSzMr2z
WfmJlPWPCT2sk32T7nzKMnfbRT+p/MeTbveSNs/BhDAP5yVd5/lK24e6fPeY
37kn6C15Ou8Pal3fqVCfqqQvaa+8KD5wup4vVPln1P6xGvMmpdvVzx/026G6
31U9v4l+RGV+VfqvDNPM1xfwPdHH6b2PMrymvD9O+/HPopd3MY9bGc7+XPHw
Ocp/XvW+pXdvEX2Y3r013+XJJ70lvPvvBvdtuMqM6uG2TulsfnKf6Lfh+b2t
pyFHSK/P9j6bqTqniF4p+pjenn/2wMuqc6ro1oSfQy9VPS81+N0m5d+odyeH
d98f4j6/qeeb9ZuNXEu4Pmjm6J0hLv93Pb94T9dLnQ9ofr/XWi6QXLh/H59t
zvW9yv+P8uc1Wi9An/hW5Uc3aS/o/Xk6yysHR9Gp+4tvDrbeRD5rfVSe8z8R
b7xrgNMnVWa2fpXKv1npyUnrXicovX6AZdyP4v3Xqf7eOrcTlV6n/CeV/227
bQ5sjxPVRnvSc92idJjKnKEyQyU/j9E+L1f/u9SZH8AX0C2zkl7vt8otp9Fn
0FW+Vh1F6s9len/UAKfXDLa+hd6F/nPtYJeZoDRKeu7eLLc+zNnmXMNHGdf0
7uanyOpuyv9Z/a1Q/jTlz1f9nyl9RvWs1u8M5a9SenSeaZ4dk2U9rq/e3aTx
X6R52Ki0cz/xV83vZ2r76RzbEudpnudlmK/uqy68rbGck2levDjDqYYffZtv
u4N3luu3IpT/WvrPy3rnUY1pVY51qUtV531NLtdTZ/AtPT8j0238pbvzefe7
fOtXvPNijvWbRXr32FbLoK6a/6jVbXVS+qPmY5jO9Tbx2wdVz6rQtwl7WZ4h
y/bQGDdojO/qWWe9s1ppl1aXXR3KP9Tk/wXq2wU51iF599NG67foudsbnY+O
ifwc38e8fuJe7sOs3S0/aRdZNjbH75LPuWafcMaHa73OVF8P1L66XutUojW6
brDXmnVGZ/5jXpgT9A30G3SPuNZ0bG//v7fR5fcVPyxts/4zuc7rw1wwLnT2
p0R/lO7xkX+/6Du0x1Jp/2/Tkr5X6nWg3fnpPqO8i56/pbvPC3SizfrSlDrr
ZuhP6CGbNR+L0TP0/wg9L880z0WeI+85+yvVqaf125Zumwi643xrXJf2dl3/
GeR6ntEajUY+a8+9pfcfVblnVH4v9bUw0zz8iDTLcXQbZPnbfYwt5Ha3LLy+
m+3MS5t8Np/Q+Tpe9Y9R/l+01g+oH9d09/6ZtY/zkeNjm3xOHy533Vf0cf3T
taZXdrftMEflL+9mPWSa8sd3t801Wut7hehJg93nij0tE28a7DN7o9Ifenjd
KbdAY4+Lvkr0+U0uv1DtLkJP39/9m9/os16ouV+Q5vfoQ99+3ksdehF7r7vb
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
W80M+lWZnr2n/D0H2N9IGeypf+Z6/xFzSN57IX9ypuuinknNtjVT4FrNtr2u
UP/vz/Q+wdd4VpPxAPD7oeXGEf4mflU31PFqz5U4VhQfJL42/JDQGV2N0RDb
RFzTw33t40e+/CnHMQHEA7A/YwfYz1PVZD/zh+rDYTnOw+8DVv9ajnVg9mfp
AX5/YJN9v9tV/l2t0Q0q812Z7WxwEfb0FuXPUP6PZR4PPtSeXZ3OCDSxPMhr
sPrDm4yL4JeoH+r+v6gx7lA9t6nM50p/0/zcnmPMi7HeEMa7s9H5XzQ6rpY2
8JP+lOl3wUPBoZg3YvzOCXEP+LvHBp8EYyT24KUc27/za2zTz9P63lVjXftO
0QObrRO9of4uUf0FeZ77edrfXURPEn9bWmGbHp8zuhj54PGn1TjGpzJh3AF9
BDnL/BCfSp+nZXoPsX9OqXFMTTwR/Mz7eK2Pa3a7I5Q+WmE75gy1lZ7neEps
wEf6Og4DnfOxvh4b2NwTfT1ecC7m4JkwD8ReUJ44gYtCHAbzQN7qkI9cQA+E
tzOmtDCuRUPc9pS4ZWB66AO6R16W5fiyGtOllbZvsZvoz/Q+jm+Gl49LWXcB
I0fGkgcPH9keZKfSU1LGlE5V+mau9wTn/byUMbfzlX5QY/3vnkbHOeLDj0IM
Pn4A9C7sHuwf5g4fH3EPnE0wErAS1g9sC4xruNJ3a6x33tHo2LcOn3ua4+LR
xfG9v5TneLw/bBFSbJBpoX58iNia8DLsTfyy+CiQfXU6S+M1lnqlj5X5rN6v
th4s85lcKHpDrvf020GeI9fBZJC9yGbkLzwHfsRY0JHxKaIno8+i14L5IteO
K3as6aYa+1zwveyvts9U/QcondVi2xMbFJlD+TlK30jYTlueMt4FxoUue7Dq
H11snW5+nukOH5n6XQ3fbjTvHRHajamNc9VWvNp89fCAe7Rk2sZgXzUmjPe+
PcQ2E/YOc33DQPFfGQjTlV6hX6HoK5WuTxgLXpayDEV+MrY3s72X2FNT1Y8y
8IFG61noW+hgG7ND3IjKHJQw/rxliGU68hxf0UKN69xi23PxRmMLpUpLGo1L
xBodvwHWj/67K2Aj6W3aF3HH2a+WfvVFypgn8dTgxeDGg5UeWuT30JmJD8H3
w3xuijsuf22rY3mI9eE8btF5uJB7BO2ef8qiS38e/Dhd1O4J7faBntxubAEM
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
WUcsGvir1ut34uxrHZeMbvd4peNnnwoxtLxPPRc0+94O/rg38dtW+i7zmmb7
DvAbgOkVVPoO+Kpm4yLo7ujtD5X5DvY4vVua77PN2NCXGBN+ru/LfC99smRi
acKxSg+JRz3VYN1iZYPlMzYfsX9VCcctPa38q5K+c3d10roGWCV4NLonuBb4
FjgKviT8S783Ov7q0VrbJS8FTIY5ZW6vU/rXButYDyr9psx34yeqb/PKfB/y
XI3l/IRx21VVjtMfHvCQ8pRt/grwpDLfUbygyfH+RwecpDHlPtN37pETP4Ge
MDZhfP/5KtvW7C3i4OkrfV5ea9wPuw0bhnsC3Be4tsn3IcGG+qVsH2InViv/
naRjbrjruavKdscXNcZ7mRv+f5B0PAr3GveMO4Zka4vtQtaYs1Bd73hC4gon
JP2NhmuVNtY71pGYxw15jpuh3OdV7uOOGp8n5Bn1vJnnuzS885cG67F8i+LL
PMtW8OMOu6yrzyZ6MjoysSuzg58NHrIjzzIdfeytEuNN7wU9jTz4MGcVnJk5
5C47tiR3AcBCyMc/8nGecQHaIC8e8vG9szfQN/Aj4U/Ch3RNmfEE7nZjq4E1
4tNcGvcdpPw6nxV82PiT0FWxLcAuvm00f4BPYLOCM+HL5tsWYHlZKeue2AHs
czAFsIVBTY7HY28Th/d4rWmweeQZcu01lR0nGXaZ5MElQy1PkCvIsrFDbftd
PNR+nkTA0rGlsMP4TsLrJcab/qE5fLLB+jzfFcC/ip8V/ysyD9n3d7X1aolx
rs0qP6XMc8X3PODZ8G7kEbwcno5+z9wy76zF9lLPz8gq6x30ER8BNuiAYIc+
X22eOr7SOsn5+dZLmE9sPOYUmQCvgc9g02Lb4rNBj8JeQpfCr4B/4XutzyiN
5zjlT5MMubLFdd4SM98gnzn9e7X52QS1e6nKnKX8G2NeF+w01ob75OzHiXH7
08EiwSGLwx2Tfi3Www/Lty6OrwI9/QfuglfbJ7mw0vrLx2HvfV1tP/Yi5Ufl
5hPcR8Gm2BFiWU9ocZ0TY46H/TLExGI3UQ67A/uUZ2Aa6C+lIXade/Lom9fE
rbczLnT3QTW2i7GP0ZWx+bH3D6sxnnG7+jOwxhgCWAK2OzSyj29X8C7zDyZM
rB6+OPQ4eAF84MFm38WIKm3DEW9EzAcyFdkK7sf4OYPgcvhfOTffNFpOg4+A
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
96ao703l/x/UshW6
             "]], 
            PolygonBox[CompressedData["
1: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
             "]]}]}, {
          EdgeForm[], 
          LABColor[
          0.9074281653765687, 0.024769087801977962`, 0.47294899486685366`], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxNnHl81NX1/gdkESSBhDUsISzZJ5CEEJIJZDKZCSqoVWpbFVFrW/Vbta3W
rdq6VLF114qKKwVX0Iq7CLiBKNYN3HEHFKgK7oj773nnOb78/TGve+d+7va5
y7nnPOe5n1GH/nHGH7omEokPeyYSOyn8RWMisbFHIvHbZCKx5y6JxBNjEonH
eiUS3/RPJFYrPio/kfikKJF4WvFvlbaS5/otUCUj+/k/8YWlLntLV5d7MuI/
7+v/xB9VmD82kdijWyJx0VDHfzM4kTipIpE4Ub+N5YlEk/5fo3CSwmnq0xaV
v7U+kTihyO12qI8fFrl++niE8nyhPHemEoke3V1Hqeo/VPVdpfjSvETibLVT
NyCR2Etll+U5/ffKc0l1IrGfyo6pd9qVkX6Q3r9sdCLRogG6UP3MU/mDBvv5
1ZFnkd73v+rDIr3XU2M8PsR/tovT16qOA9S3bar/9pTbeSryMI7Ex2psr1ee
Go3jg8rzwBi3tZvqv16/x9XWAoWVyrNW5S9XP/+h+BDlX6f4Fco/V7/v1VZV
b/VP8fOU/zKFl+u3XekXJj1P65X/jJHO80WXRGL6SJefuZPTror0/6h8neL3
a23MKUwk6hW/Q2lXqZ5y1bNM/fxXofPc1s3t0N4NKruiJJF4t9zzMHWk0/dX
/UmN3VylVw92f2l3sfJ3DFQZxbMKV+r5Y/rdp/RatfWq3ve6es83a+xXer/7
RzrPvG4OV0X+/nkuT/yRMV5nrDHm6pqYrymqc73qvFF13lLqdlm3jPET+j3c
xfVSz3XdnLY60peN9H/mZPlIp5N2ZzePz0MaqyvK/Y6/Udqy2kRiuPp02RSP
x3v0QfWsLHGccfpcfRmhstM0R6PrlE/5K9oSicFKG6TfaaqzeIzznJ1wyP/p
yp/V+I9U/E2Nzcla53/Rb5Pq/duQRKJI6e16fn2e81CWsCTipw1xPcQpu1nl
jlPfnlCftij+uMLRxYnEW1r/eX1UTn3boLpK25x3S+Tvp/CyUYnEOV29ruZp
TJ/Tu7+V0zrW/z+NSySWjHScebmrQ++uOqd2+P14z6l6l4+HO/1YlX1ebe+j
9X+RZNN7qvsXit8l2fSa0vdVfI7S3x7tvr2oOp9VnhlKX6g8X6ueTUo/XvXc
3eH4rh1+H/rdU2tya1+33dHLYzU4xvlOyYHj9KxVa+PtVq29YYlEqt1jxbgx
3pfqvV5U3o+z6ofiryv+leI3qOxRKtussv9UuoY08Y72yHuKD9Oana1x2KQ6
16vOVtW5UemFSj9V6fdrnQzU2M7ROnlD/X1dvyf1XiOKHe+t8V+t+FnITM31
M8WWZcixYwZaHh2r/LNVp4YisU7tVqpc+WjLsEPUmcuV5161sUC/IfG+hEUR
Z63w/6VdPEaso3L2terknLhVddyX53pY242qe5J+Vcq/YYRkpOLjFG8vd7vz
u/o5+Sh/dE/HKzRH16hOdSuxuMKygD1zgN7jsnLHqZ+z4N3YL7O1dq5W335Q
/HjJ/OWKt6mtDzTuAzQ296Yth/5Ranl1s8reot9larhIDd00ynM2V2nzIz2t
Pryv9KzCzyXbz1bZzxTeUuLy5Lk65/e6VuEMze8Uze9+Wkub1W6B2r1D7W7M
en9UaA6vqHDZWo3fVQoX6HeF6vlTntv9o8IT85x+gsLZpW63TX3cS+viUsX3
VLh0mPcRcvgAxS9TfH+Fz07QmijQGZP2/zlKT2k8L9E4/avcdV6W87hfofCg
Cj87Ps95qee5Xt5Ts6Pdk/Jc9k+SzyP6eKwe7W55dm6pZVqhnl+r9Av1Lg+W
uC7qQU7+rtSy/Vcan1aNz/7sOeXdrN8r6v9hel5a4XysnctiftsUjlE/r1Gd
paMdP7CX09P6jWatqFylfvsl/Iy01E4/rZUjVP/Z1dYtSrTvGpS2Te1O1Xtc
pfW2lX70cBrxS9XWUaWu88jo19joW3vO5bKax6c0zkUa51Vp56Mfhw5KJCao
/v9FnQ2FfjfGoF7pdfFscs7v3q56puQ8xm/XaE2Ue1wYE8ZhQoX3I2VZhycm
nGd8uecHPaShwnpLKt9xdBb6TLv7KP+kfNfDviTt8EhnbqkDmfms9J05quuZ
AV5b/9Kzmh7eC+wR1uw9JU5fob7ernKLR1muMTa0R53s60y59SHGi2czBlk/
43xFDv0hz/Wd2816EnrMrMFu5+Zoa0S0Qf2kz429xt4gTh0lfZznse6W2SfH
uXY376Tfzcr/Tdb5ajTOtyptkX43Kf1+tblkjHWnloH+P0Vj/vAY6wToA9+W
+j9x5MgyxWf0tj5F/NquDpdHHL2E/O1d/D7UT93orOgYhyqs6W0ZdQE6hp4t
jTykXROy66tS94e+UccDEb+51Plpi7oeCV0IvQ1dh/3FHr5S43C+8t/U0+PA
+OykNVaqcXhca7Wr4vcpvQvyVb+liu+cs17AGHJe/y7P/4mjP5N/TB+PL+m/
zbPcPSn0cOTBzSE/aX+hfnXdLfOuUfpKraV1WZ9R5bVeR5fGWkJuFJQ736IK
y0Tk4adZy5rqWuv7tIWcR36Rh3fl/Zhv5nhRtEv7zDPzTfnbIs6839DTz5Bd
90RZ1gk2C+NQ2cfvQ3uzVH9vjUu10p5JW384U32ejB4y1HF0iU8UP6v0p7Sz
Ig/nBHuM/XVQnuuk/5eWe68hS5eOtN7DHK4O3RJd8VHtwcOZo66W8f8OfQkd
jvRmlV0j2XKx8g/v4rQjIv/vI05exnuO4kt6WAfrW+7/yPJLog/Lhrn+pXGm
zNLzL1Vnmd79BcWrFB7Ifi33vqPcxVH2fIUX6HfUTl6brFHWPvoyejPr9EPJ
yYzk5FaFK1T/glK/H+f1fMXXdnO4IOIfKV9W+T+e4Hw8Y1+8rf+1Sm9O+3yn
LfbCUwPcj9WFtvtoF119rGR+nmT+0mb3/bxyy49j8hynz+eUuyzxpwf4Xajv
PbXVqLbSaes6jMkk5TlE4UGjnMaawa7DRkPnfL3EOhxtnRN10ifig7v4Ofk4
HzttwVKvN3RV0lf1sE2MbcxeG6X+91L/b1P/D62SrYjs07nZTWnPKH+T+vBC
ifVg9Gp0YeJLVc9vlH9vZIHyD8k6/2CFq3rZnhircR6q+ndSXS9JZ3++l3Xf
sm7W7VeXeO9XZt3fN+ssB+gbtjnjd26846wYE9YM+v4TURbb5d2wXwaonqcU
9lfYta/jjer/qhLbOfSL/MR/tH0eizh1bg5b48kS109/kQGLKn6SN4tCbvRR
G7NUbmeF0xq0/zSP0xUmspY3zdKluyq+p/J8Lx17U5nO2BL/v13hf0pcD+Hi
Esvsbsq/TPHZ4zW+JY4DjDxQ4v9/iPy3RdktqvOhEveD+Oayn3QiQvSx7lnr
wmeNt753e5S9LfpAu8hQ/nNe/LnKa/cDycM7lXaXfocr/4RJ1tfrFd5BX3pa
f8ZWGJBne2qq9J4LNASvaIy+bnfZM8e7fd6hWfm/abee/vfxls+c9+gAO7I+
679VuKPdY/K38W7njugD5YjTLuP5XpnLk3Zn5PlLT7fFWG1XPbcqforqWVji
OJgEevXCiBPyn3N/nN5juOLtin+U9VnzmcJhShuh3+29rU+TH0zjpHan9x9v
vXpR1EMdw6IewqER31Pr4x6tk70anDYs6txH/x9Q+owG2+88A99YFP2kznLG
mTFUvHfWOu+uWmOD2HP6ZZT+danPdc7xd7LWk99VeKDqfUT1z2rwmU+e0jyX
GxJlf6VnDyrPfg1+Tl1lynOw/q9Q+iEKj9P7DlT+/PHu96Do54vDHaeel7O2
wV9T+E3UQ3/6l7jsrSpXFH2mjpFZy5V12vsjJCu6a9++XOf1uDD22jC96xuS
4yu6O3xTv32RgS1au7KHL1R4R5POXekpdzdZp/oO3VL9L1A9faPd/Ig3qc41
w/2fOHjaN/9fPwtjnOk76e/luVy/yP9jXWBN9IU+7aP0a9X2v9SHfys8U32q
Vt/+oXC2xu4LjeH6nOvuH/1BB35c9vN07Z2bFN5SbHwvm3H8s6Tn5+Zij+1+
jdrD/bXXVf+vmmx7HKBwstJ/B36n+NMTJZMU/4Xk+RTN1/5q5zGtk9VK76r0
DqVvUD8eVJ9PUPpxTdaXT1TY3O5xfUjpZ6rPn6nPb+asbzKmSY1De7vfdZDk
xK6KH8R6rzLe8nf97tjJcoRz917F29p0Rsgm35K1jkE+bEn2zxmRPys9/qyR
1j04hynLWXxW1En6qsDi0EHBu+g/ONiJVbYbt9Vat1ke6eCP6DhgiQ9FGdJy
6s/P1Z8Ps7YhjlH6jcVu8+zoM5hBe9gX38daQj8fqfIblGdVd4cbR3p8ef5t
5CGNZ4wLePL3kX6DxrOfzunX085P+mb1+zPZY7NU7ytaJzcqT4HyvJd23+gD
2AV9zET8n9FPdJjcaP8nvl31HKx61rX4fW6KtXRzxFk/2ITYhugryyU791DZ
63o43DPij2QcP7vG6WCyp3Q1PkocjPQAnQGXSX/5ssN4KrgqWOtrGdvQv6x3
H+j39G62obGlecaY8i48x4bm2fxi29xtYWvPVP2Xq/4dHX72B9WzazeH6ahn
15Fu92TFT1O7W3Tu9JA+9XbauNuyDr8vdjK2NPl30+/CHsaTC2P/Doj9yH5/
KW3sb6nKnqo6N6rO7qrzgTKXpyz1NUSdW1Pqi3TPya1ajxnXf6rG7Q2lX6z0
Ss3FRsUvV7y6xTr4qljD4ADUAxZA2pLAJI/Sen5ZtvRCycA5ZcbXwNYOUP3v
62zbJ+35vDHmdIHCG4qNRbyd8RqZCQ6vtCuLrU+C1yFnKD+32M/Yg1tjfMAQ
nix2PvKwRsACwAHaMq7/o6RxnqcUn9nF/SK+VfkvKXNZ8EDwg/rAH47Qu7yk
d7mlzjr/FdGf1/oaWwB/oP/MMXL1OoX/LrbdMSXj+Adq95CM2/k59lGx2+Y/
5RbEu6PDXxdlWSOsFZ5fH3monzZro13wj9rANxozHqv/qa15xa4H+YNtVRfj
gOy/PuopVf5eWp9jFY6jPtUxRethVoVxLmxGbCBsIc621zuMGx831bpz30h/
pcNY8bFKfyxtfXxl2rYTecCc0e+2hF63olL7U/1K13svLivzftxV43uUxnm3
Ou9Z9jbPX1NdK9SXdWnnJZ09/lTaNsF/Fd4puX+j5P89Cq/T71LF5ys8V2fK
HTovzlM4ERtFMvNyMI5yvzPvm6+1/eAg7SWF45WnVXnmYEu3Of4Fa1m/JerD
zupbRdb2SZXCZJvr3K7no1T+v6qnVOHiod6/YObsYeLF0gteVb4HVU8f7IhR
7gd9YF1fXOYzdJHK7qU6FyosztpuKVHYoTJHanym1vkZexxsP5W0zbpSZ2K1
2l6rPoxXeKzqK1a96Z213tps60xW3h1txiB/ofE/p9mY02blf0Hpq5GjSZcD
K6de8HLi4Oc9tV5OLbZ/cIbK7FDZXyq8NWkd91x8hRnjOn/RPCcyxoqOU/zq
ZmN+HyrPxkK/L3ttW5sx5n3Vn+fbbNvtrvp2ytpe6JG1joyujN2B/bEpdGZk
HOMwrNprC9thcg8/o8x4xXdNGlNZo/a/areO/a3CAo3jKs3FO9jIyjsGWaSx
ek59eFD500mn4bOhPL4R4vhH/if7bp8Rtn/v0Fz8bITnvDjjMRqRsVxfUuYz
hRD5i+ytTFlfuLLKOgbzNSdhXeKZQbY9Dkp53Bi/TcyPfsciT1Ieqz4az3Ep
n/PXVvks2BR5sPWx+WcFXrgkMMO54QvAP3BkynPEXJWkjIv8XHWmU27rZL37
Pop/qfgZSetMzDVltg9y+nFqa2iezw58qR+kjCv30jmyKWWMs0erfYhXDrbv
r6LF5xHn0vQaj/eeOifXJI0v36Fyu9d4zU5T+rqkcailKdsU26Nd9P4tgzxG
P0t5Peer//enjCG+iJ8zyhZrXVW1+GzljMUPzLiAp96dcrhWeW9RX6+T/H1X
uuKlZT63OLO2F/o/cc4K4pwdnBWcGZ26b9J7hz3Eur4k1jbjgx8UXW6b1llv
rZOtaesdxMF139X/x5Vvo8KVeZZxyDfOatYM64izgv7QPjrFLiOMW36cdvwj
hQ/neZ2xxp5Sf67Qu7c1Wi5O0zseofffWuT5l5hLPBdjfmCjcSDwoEMDf30k
MFh4BPxnTJ+OOv+TsnztUNqvVc9uSe9Z9u75Kfukb1daS9IyB9lzecr8g/uT
9hsTx3dMHKx7UqxPyuLL+LTIaUM4u1Oe61zKZxRy+2WFZSnvlyqF++r9fyc5
cHqV8SEwUrCY06rMT9hZa2mA0gaWe++2po0JTUk7b2Hk30ty7ZphlnXYnYWB
tcLjuFnpL3exvoXdNbWb026J9Pu0fhYqfm+rfVn9OTv72J82SPH+CjNqbx+V
bVP4V/WtRn3rrr5drTlYStsKy5V+gvpyYLN9mxv0y3FeK/04hbsrfbvaOElz
sabDdsCQcrdTVWVd8lzl+aXqu2mY5VV1lfXfa5rtg12nX0tX7+MZw72nsmnH
29OWAfQTeQJPhP5vVT3rW132HYVb9TtAfbhFfb5ac7xR/biGMzNlWfSR4k+2
Gsf8b6vt65f0m6ZxeyXi6NUDJbuv0Dgs0btcVeP1fU2L5SNycuqEn+xzyiLv
kHvTlD5YZecq/wMqe1va8uTVDuO06GrgbA+1ev7g46C7kY7eiK25mPFV/OZW
z/tNrbZN7x3m993S6vHfzPtyFqsPlbVeE6wb/Ob4nK8d5rWO/JiHftnFedcO
t86/qNXpC1ud97rIc3er5+guhY+1ut+rFL7Qw/nIs2usN3S26TEO6MwPRL7m
Rj9fG2uS9bgw1iQYK2uU/bl3yvLzK81LU9qY4iSFv9U7vBNrjHkeHHN9XJnP
RcaUc4//rKU/T7Wsmx7nI3l4PkrzMGOE/d59dbY+Knn0sur/QPtt3xH2lw2Q
/D1eeXeRjD2mzDoKsv7wMq8f1vSOamNsNc1OwxfOf/zGxPFzEx5W5nhRb/eN
fpJGXdQzWu39YoQ5Bq/o/W4eYewF2XJCseXLqqT101s0NvckjbvNSVlO/rnY
snJ10vN8q9Jnqk9VGsPnp3jMFo2wHb2b0kcofY3Sj5lq/aFV5eqb7LM6WGVT
TfZBHZWyfsW7o1cVaEyOVdhNYzJhojlAP5NMmDjRPKF9FH8taR/VNNVxUZvX
6GbF+/X2ODKG6PvYD+j8wwssD+FMza3xeTO3xb4L1hhYxNuV3h/t9bZJsEXq
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
             "]], 
            PolygonBox[CompressedData["
1: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
iwGvqrZtl035BPj/HfN9aA==
             "]]}]}, {
          EdgeForm[], 
          LABColor[
          0.9461478287534755, 0.007774267347102636, 0.26942696492565377`], 
          GraphicsGroupBox[{
            PolygonBox[CompressedData["
1:eJxNm3l41tWVx39J3rCFsKlVaASzEhLIQkKELO9L3vcXRdpRsa3iggVqR+gy
dhtptQhWqct0nrYzz9hitdrp46htZYsE69ZaUVqFtk6LUAtYVChVXBEUbXW+
H74nj/NHnnt+973ruWf5nnNvKhdfds6/FCdJsjCTJCUqM4UkeWJUklQ2JMnZ
FUlylv4W6ofukUnywJgkuVLt+kQ/LPpq0VPLkuTEsUlSUJs79D2H9hpngcb4
Y2WSZGlb63HmlybJKH2vV/uZanu+6i7Q33L1vWVoknxM9OPq+3GVn9DfMtXf
H+1o89Fcklwo+iMq71T7es2dVf3tQ91mm/qelnPfPpVnVHg9C0o8/5mxl3ea
kmT1CPXrTpJrRU8QXduRJCuak6ROYz6p+oH2JDlX6x3fmCQ7uj3HQGeSPKT2
H1P7l9uS5MFaz0G7R1U/X/Wvqf72niR5Tu1fatE6M573Uq3tLfH2HvHkiMq5
Fe7L2jKtSfLTcu1Lc/5IfZ9X31fU922N+X2N+UPN/3S3ebRBa9iYMa/gzxWq
a9aa54h+5JQk+YX+WvU9SeO1is+XqP6irNY3XLxT2a7fJqr+46ov7zY9R/NU
qv2popeo/u28zlv0baqvKTc9U/XVortEd4je1m3+rxTPSgpewyrRExrND/hX
0egzP1G/nzZbPBD9VJf2n/c4P2jyPj4ee/mI/lo0zlyVX1GbC9RmhMZ8Rjw5
X32zGuMx0X3DdF7i2Zsaa4LadGqctjLTZ6vvEu3z99rvpSq/qnEuVP1ojfOz
ER7zaQn82hGu3yl6s8ZMNWa1xlwn+qOih4keor+fac9nai9lktt1at8m3m9Q
m39Sm5GtXu+Hx3rNO1R/ntbZo3Ve3Wz+wKdN7eYD/KjV3yWie9XmOcnoP7T3
vSqbpS/vib4WZTw5Sd4XfbnmGlZn+izNN0X9ivTbMtX/vcJ9aVNd43r60va9
qIcH7eisZKRTa/uJymFpknxT6/kQMisZa9FfnfZ2jupu1N887WOpdH+T5HSv
xvlLhWVnusb5gvpfrzYnqe8W9XtRf9Xa4xXa67sVXhPzvq3yqP6+InpPzvTu
nPm9boR5Xq8x3oo2B/Rbidb/15zr3o76aVrrTq1jqsrKGv+2Qn0fH+v63Ejz
7d2Y9/3hpptFDxHfDqPz4tuRCtNfZky1fzPGgWfFwc9vaV+f0N4/r72frnF/
ozmuUf23Vf951X9J9a9PTZKfiwdbpIOvBf2cePCy6AHRm1X/gxlan9Zx8wzb
tgvDdh2MNnvV/sca87Mae4fGvE/t/qD2m1Te2GHbcoPK5ZLpsaIrRP9Ocv5p
8ev5aRq/w3bmZpWTG12flyw1NFq/0DN0DPpvav/fmusSzbVdc63X3KWS59Wa
q0N0h/a5sN02Gp4uV7sBrfPrWucJvbJVor8oepzo76rdF7WPyzXOTMnSXaov
0rnUa95/1lx9mveKKu15QpIM52zLTZdorctVf6HoMtW3a942zbdA420QPUzt
BrSe/+yzrdk3RbKm+qlqM19tJqocQK+1tnfKPc4wjVmp+k2qn5/xGZbEOZ5Y
L9nWX73ajmu2vC2TDbhV7efp7P9LbW4X/THR3xfdM9y+aoHWdt1E6cZE68la
9b9Hf2epzfV1rt+i+gmlrt8uNe1V30Xqu1h11b3uh5716/fjVb9e5Yvi4UbV
d+n3D5d6P+yF8a6NufZVmB6vMQ+ofb/q2ntDlkdZnn8sed+m7636u6HZdvxu
2Z9zy70f7P/MKu+RvWLv0LfLtfcZql+n/jerflKpeQffuqvMB/pnc/b3OZXz
yj1GL2Pm7KtmqfyRxtiCj66wfswZaR25MdYzuuCzmhR7vL7Zdrlc9dcFfVer
/RN+Ctt5RHM1aQ2HVb5eYf1szPj8wSH4t0Oj7Z/2DUmS38qe/kH1p0sOlzTY
XmG3Ptdg/UWP39Gef602E1VXNdLtwQvYOeovC/lGzjeJ392S4w2qf3KKZXOd
6Ac115heyz96MC7oNaJ3odM6r3E6r+NiHPSGtTfF+ldMdBv05Eda81OqP1Xr
eUPt7lddr/qVaL7Dkudy+alXVL9J9dlen3lLnPvb5f7Gth8tdz11WzXm/4o+
TWMWaZw30C+Ns3Ki52Ze7OPv1eYm0bd1m+5o8LmxntVDfVaMc4foil73Q7+/
WedxHtf38ILPa5jKdsnMXZKD7420b8affkn8XtZkvZySt5+8u9y+cnzggePU
91MNxmuTdUaLRXeLrhH9DY35+0nW2buyxi53q1yl+u2qb9b3UY3bKHm5RnNO
bfG639SY92ldA/qbVuZzpQ1yC8b8SblxZp/6PqtxUpX1qXHpZJXLGmzTsG3I
FjIG/tk+xGsAO6G72CXwzwTZlfH1Xk+ReDZD5TnYH/iKvRM9ttnY4l8113/0
GTPt0fncm/X4G1WOiTb5XttibPLFWes97cFX+FR86+G8/Td2conG/7rqa1T/
Vt7+mL6LMrahtPlM1jxAh+HDyMA9X8z7zDg7bBCYCbw0SjxsLRhbgjG7eqx7
2GDOc9hIy2FPj/0FfgOcuFs87y6z3cR/4DumFlzfqPIBzfOi9ORvFbaPp4et
2DLE8QOxw9oe4ytw1poeY2CwcHeP9RBfsVNj3aSxdhTso3IxV1fqcfJqU6Xf
tmveSpVfbrC/xm+vKfe5L9A+yoIPOfG8XPQ9or+cN27FhmI/Lyo1zkNu5+q3
fep7hsoN5aYvGWGsDGYeU7CNIC4iJloUsQ3ylpY4LiImqkrdpqvFMoqs8tv7
edPv5Y3TWX9nmXmMLYJPudnGimBGMCXY8sOiz5isMeuMY5fWmyZuena0McPP
h3gPlE8U+feeaAOuYt33qX5onfEl2BLcCA12ZMxe/XXp+5fCXY/or19zPVHs
753qu0q/ra21DbxUY94r+gv6fWOtaXwZ62OMe1X+KsZhDPDq0JiX+aCxb2C8
0jpjNjBiVvSAys9oLfl6f8/V3nN1/h0fim/Gd2Kz4TN7w+5j50tT4z6wIJiP
sYfE+PtHO+7bPMRnRrld+yrW75k674WYAL6BlQf7gxuJjfFNIzX+dXVeA9hg
Ron5A6/+/VTHccRzu9V3dI39BuMxLmfB+hfXuO8LfaZfEa77jfo/JHpbkfc2
psY4Abz5p6Hmyf4K14Md+js9JnHMpk7HR8RJRXWOZZaq/bc6TRPfzK5zG+Ll
5zXvIo1zsMP+inXiAx5W+Ysa48tCr+ddpH3PFr1T9MIGnyfnCtakLX0G1w69
XvT0En9DzwjMiS3ZWmv+rNIaHqt1vHwV62mxz3lZ6+nQXE+LvlhzfetUtyG2
BkezBuTqbO1lx1DzfH+Lefmq+p5V577M29PrNp/UOAO1PjPawVtoZPWP+LfR
1kHOn/gOGXhC7Z+stZ+Ylbef6sxbxotDTt6vNa/hM/mGB2qdA4Hf1IO/ifXJ
F8yJPMRDtc4JsJ6NoS+sZSBo8hXkTWi7utRjnhvlg0HfWupxiC2vnuxxiOu7
M/ZheyU/B0fbl/Hdk7c/zea9L84A/t/U6f0S1yZ13g9x9Olq94Laz1GZ198e
0YW8f09iX/fU+pu9c55bg1fENCV1Xg/2DFuNTWMe+Ev8A/9KgqYsjvbET4zP
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
gO//WvB74gMF37uQn+J/Ef4P+nZgjw==
             "]], 
            PolygonBox[CompressedData["
1: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
x769rdXzqfdTDlYu/v8bDPw/V8nu1A==
             "]]}]}}, {{}, 
         TagBox[
          TooltipBox[{
            Directive[
             GrayLevel[0], 
             Opacity[0.5], 
             CapForm["Butt"]], 
            LineBox[CompressedData["
1:eJwNzzlOglEUhuH3B400oFgrhs4YIjiGIWBwWAC0OCRW2ugetNAYWge0oyIh
Gl2DU6GtbsAWK21EUd/iyZeTe8895yY3d6s7AVBRexxOluFUx2roTHtp+F6E
H31p37prJiag3/N0BnJFyJjVWd/S4wI8KOx5n+JlGNJlCobNK7Oeh2v7IlPw
6ltN+17MAeuLOThXYRI+C5A3Y0tw6OyoeWC2vLfl/SP7ts0357/PmyvQMUed
k9CYRpR1VuAuId26253u9TQDz7qxv+HM9RJs6GMa1sxV1TTon2PKuQvuEKhn
/adfhaz/AUBmOlk=
             "]], 
            LineBox[CompressedData["
1:eJwNzj0vg1EYxvG/KNo+j1SCpMamiIiU1svQUmkRjCzMFu/1JRhIZ4tiMJkk
HcpnoGpsP4AYdbL7D79cOTnnPtedOrjYrfQAO3qZgto63OtOj3rQ5Sz0rUG/
enXlOWKmpiH0PjsHhRXImfsLsKfWKnwq7n2gkRIMqzEDo+areZuHunNhFjr+
9eRc2ww8vy36RtsZGFyGLXPIzhu7E+a1+ey7M99XnTs3f+zvLsH3Bvya4/ZM
aFJp5e2KuktM7+72oaZa8/CluvMNO0+KcKq/HBybRzrUWBmS2nSXuDsEGlBM
UYX6B0C6NKY=
             "]], 
            LineBox[CompressedData["
1:eJwN0LtOAkEYQOFjq2JJb5AGiQgaE4hyXbay8gkMD6ARraUjAUoanwNrbYRK
GxtaobNYBEGl9RRfTnZm95/J7jauL642gHPFU1CtQk0V1RXo+QDytqCPInwG
MLFTRTnonUBXHT357uzIdYUlZyhQrgZZjU9hUID3NDza4RkksrD27PYxvBy6
plgGbj1vx97ZTdu02/bGbtlSBb6cU7RzW7aXzhk5d+bz0EZ26ryHOjTc2/OM
pFp+/+pd7u2bDd379X5p3/2xa/1p3+elXWmuby3U9x/8AxZoPR0=
             "]], 
            LineBox[CompressedData["
1:eJwNz7lOQkEYQOHjE7i1NBYGYxDcYmEEwiaLVLyB2kslWGrnA9ggPAc+ABpo
oCKxt1ATC6/YsIh6ipMvNzPzz9y1s2rlYgEoW2gT8mko2LGVrGiPUYhrwl4T
8JGFN323YBdaB9C0e+u4N9iDTysn4cRKlsx43p6PoH0Iwwg86FMc1ndg7N23
+9Ddhp6txKDufat6pYta02W91CVNp2DknJR+a0ZPndNz7pffXQ30xXmNHJy7
FvaODbvxfN+3XOtA8679+r6oe+eK//inW37P9MfGNrWJ3bn+D+gPPZ0=
             "]], 
            LineBox[CompressedData["
1:eJwlkjksw2EYh38NE4MKiyPU0UMPZ9XR1s3AZjJgwOzcCIuFRELEJnGEuAZn
gthMBoOJUpQgcY+OsHgaw5On3///fb/3/d5/09q6GjsNkubBUyk9OyU3fsKF
OJQlTdZKh7nSdLb0WSUN5EgfuB+/8LzXLo27pT78ynrOL40VSRaHVFkhmXE5
roCnaukRNsulLajnXANE5knrnIvAVdTbyJfWyqRVWIGHGukehughjfPpkAIm
SIULzgXwOZxBMPwMrPTjI88PpWBgnxcvkL9M7hIke6RBcm8LpBsooa9iKIJ4
MuIggTvs0mciPiWjETeRY+K3mXtZwArD7Lmmzz3qTnGffRxi3U2+lZn1YBtu
xx0wQcYOM44h54x6ATiHRXIucRAuwMj7bfbWwSnrA5xED35qBqgTQw0jXPHu
GkLQTEYLuMMzYE8BjmXPEfUysJd1OjZDJgRd0hvf/B2imEs0GNh7bKN33tvA
AnbIAh/nndgFDvCz9vAfmPVJX9xtBn/jUWY6Anfk/9L3PT7x8p3DM+MOP8y/
1f7///sDl0Ryzg==
             "]], 
            LineBox[CompressedData["
1:eJwl0j1szHEcx/EPwsSgJAxISCR313qmHe6p17tjYrCIqWL2sLVLbToKjZi5
wWCSqDKcyWphMUikvT6ceh49Dl4Xwzvv+93/+/T7/v/7L18/f21Dkg6qjeTz
SFLmT1zhtWJyt528PJrcP5z8nEhuHEl+8Ax/9f9UKZk7mUzzN+dONbk1lhSH
k/Z4UuAmt/ClqQcW6skznJV3DluOJY/lbeamfgvHPa8xnqLfMgtmzTAsfwQF
lFDEe3k9XsYSVrEyiDHPuHoN1LBRXJ0fqT+v7hMcHE1uqts/oQfq5qqhit1q
7MIed3huzr38Vo0LfFGdA34X3KuIEmbF9MzZ1fee+7zgZecp9Yt2Ns0lvsJX
MadG1463q7OkXw/LeKjOGq9iBUOez4s9g0XnLu8zQ03Pd/oM6bEDfc8+YB2T
alzCqBmqYk7xTjGv9KvwhHOZa6hi8ZD3551/x1Z72YZNYl8X7NDzBupoDnIH
lt/m02gNcB7zDXQqyS93e8C/+Y6d3sa6+n/N/ZHflOUNduYOf+x/svT/+/sH
xiB2rg==
             "]]}, "0.8`"], Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             GrayLevel[0], 
             Opacity[0.5], 
             CapForm["Butt"]], 
            LineBox[CompressedData["
1:eJwVjzsvg2EYhi+J+gm0iUETkpYizhQV0UorkVCDUyXiBzB1025fB2XsD2Bl
EotEV8FSo1NNJof/0Mtw5fryvs9zv/cXPTjKH7YBG/I3AOEZ+Nad+kdH9PoC
7CzCnhRkV9qnICTH/fA0BiWdd67Ds885aEphEHpGoWLO9TgMj8CqdMXddads
TmwW4vKRdE+acmHOubz73W3Gi36TVwnScBODxjw8S9Z+K5KTPjtEze3V9Um4
k8YQ1Ozya4e0Mxl5mIBiCk7/e9jvTG9P+4+yKYGzW/re/GX7ZmTN/kueV+1w
lYATfakr3gXy6Ltf3u+bd+u7LTptOzw=
             "]], 
            LineBox[CompressedData["
1:eJwNzskuQ2EAhuHXRrkHiYiE6hQ1tagpMa2rulFJ1Z5NkdjUskti2LDjCpTY
cQFIWjfQVusWxLTwLp58J+f85/u/vsJueqcDyOovDMOT8G3GzB8zbq7NQX4B
tlXQlgIJ6FIpBK+jcGRmPNftu0YK6spHoX8ETuypjNkdh7R6hqDTf0r2hKYh
rNYUfKitG3uu9e5zrx11s6mGyovwEITaDLxpw32bymnQDUF7B8ynCXhUNQYX
bvl1Q8Yz63oZh8NZOHVHwH1n5n4SDlTUsWf3zGf7V927oqz7l31/7ob7iP+Y
d2bFrltF7f3y+9U8XKq25N369J5/zVtBCg==
             "]], 
            LineBox[CompressedData["
1:eJwVkM0uQ1EURlfnnoGIUZWEXqpB23vbxpBERIxIDBojpDWq+pkZeQCMOtNH
8NPEA2Cqt3gAEpWUGFsdrKy9c+63zz53dHtvdTcBbMjDJIyk4TAF/QDqeti+
MwG38xDrO32px2bgQn94/mndWYBf8y/6RzfN9/VpGSpTcKRP5FjCcVg3143g
VWJ5lzd59qxdgPMlSJr7Knmn/b08epbxrie9PAcrEszCojtFfj+UhJz1mrN7
IXxL3r7ungUdOiOSknV50EtxkJUDs3j/pvWWpLOwY37ffxBY3/iW2Llnzur5
tuY0NPzuyv464555aOmqmZo0zBXNhe4XyV8O/gHuuEPy
             "]], 
            LineBox[CompressedData["
1:eJwVkDsvg2EYhi+L0X+wSBSJotW0cfzE0Eq1pSKxmSROC4OJD3N/xFd7B8Y6
JH4ARpWgVkmTShy6uTpcuZ8n73M/h7d/c7+01wOsy/0I5FJwMgS1JByrWfPG
MNTT8KJeq1V1YAIitTUGn8aNDPzqf1Z/1GgcvtXzBdgahVA9k1MJYrCh720O
3uVVPqQpT77dzUBlEWL6WgHcmN/Kg28pZz2qhUkoSiIBeXeat75vEJaNy/b+
m4WOFMxD9yx2a+wRSNl4TUqyKitypLfX+dvGO5L27l39h/5BxrjuLU37VuzV
9rYo7j3WXZhf+ldf03ClHnQ9Eupb0pd1v5x0puAfONtGEw==
             "]], 
            LineBox[CompressedData["
1:eJwl0rtvz3EUxvGH0M01sYilC70QtKhf71qaEAwGoRGifwBhYmCgSGunHWgr
KuLSsBG3uFQTLZZSBmWiCHGJGCR4ieGd53M75zznfL/Fbbs37ZqU5CoGliXl
S5MdaC5NplUmTbSqPlmJierkA96jqDGZim1VybU1yZzypNN6SI4py8W0JHdL
kl8oEvtWTLezd7SjkBxHJ8rKkoI6BxYlN1clB+ktOndhcrQmOYbDOIJ2VFck
t3nqWZn04hTOqd1HT+OOuBPelNLtvJTRIXUa6FN+6+kePvZijO+H7iav0Lfz
S9bFcn2kW+zrnDegEcP2l3kfoQO0lXbyvZVeUa+e7wt1yZ8lSYU5VKJJ/d+L
kzPNzmkP7UMv3uihSdxrOmg+DzDO3yv0r04OyfPdHD7L+4V+w1e0qNltZqU8
lGE+SrAAY2bdIucofan2C3SZWZccP/XaytOnBjkxy/vZmI6ZmIGN/7453UD3
+4b78MhMO3gaprXmcIPPfjXq9L1e/pP+lQnz2mxfcH/d/aB9rf0TcTX0udrn
5R20vueuQO/TavrYmxE882YUF3lbx+danufxXllrnhjX9w99l3vb7r7NrHdi
Qs0CP2fL//+/fwGDI4QJ
             "]], 
            LineBox[CompressedData["
1:eJwl0rtvzmEYxvHLIQ6LSWITpRK0pa1TtdWW6oESSUVCMBDKxMB/UDWoQ2xS
rdFStEUkDDRiQCStIqFYEIc4J5RF+Ijhm+/vOd7Xc79vwa4DrfvHJRlA35Kk
uCxpQ/P8ZNripImrapJqfKpMvuAzptQlk7FjeXKtIZlRlHT6vu+OSUuTisbk
9rzkN6Y6+8GZLnMf+cyKpAfdKFqQ1KnTUZLcXJUc4UEuKE6OVyUncBTH0Ina
8uSWTJcqksvo/2e1r/AAbjl31p5S3ilLGT9SZz0/lLeFD8pxCM/kfmht+rKk
3Px134XuGi9jm/FW89uwHUPG/eaHeYD38Sm59/JV9Wrl7l2piXq3Qh8qUa/+
hFLn6pOJfIH7cBFvvaHBuTd8T3/u4pV8L3FuTdJu/099+Obe7zyGH1inZo+e
LZRhEYpQgmKM6nWTOx/zC7Wfo1vPutzxy1u3yfSlNvmKQvvnogBzMBubZJnF
rXzYb9iOt3p6UqZ3vEUfBuXsVWOdd290/2nv/aNvu403W79hfcR4rfGIc808
qnave+/4HrLWyMPcxA/sGcZTe57gvGwb5GyReabs9dXJarz27jHvLra3w/oe
vd6N92rWyDNQ9P//+xeH6oVh
             "]]}, "0.6`"], Annotation[#, 0.6, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             GrayLevel[0], 
             Opacity[0.5], 
             CapForm["Butt"]], 
            LineBox[CompressedData["
1:eJwN0DkvxFEUhvFnEi2VLYTEvsVOjNj3hIhESKzByFS2QiFILJVOiYLKLmh0
xPIJrF8A0WjpUHiKX96593/POXduSmimezoAzOosGxIqIVFxSlaSFnMhVALj
is+Hvgbo128N/OjLulONBGFUwwppuwXGzKZWWLXHjutmz3cWea4CIushSnOl
MOX+tG6q4MEZ1+a9+VYN75p0feHMDzNQAH/+xly0d0YtZCpdd81wq9dCyHLG
ch2s6MkZ597h2L0THehIhxq153oOpDRCjz0TnddrplmTqj3X0fbbNWPMfTNg
T7RgzbyuyuBSYe88Yb+OPM9Z225G+G5tvmOrYp3TXQ5dGvJtBhX2/F+x9/Tb
gP9hy2+f1q25t+zemPVL5qb7G/r2/JeC3vHZu7zoQU96VKPv+A87UlDh
             "]], 
            LineBox[CompressedData["
1:eJwNkMkug2EUhh9Bt6xNCRtaobTGmEXtdGGhIkFqYUjQ2qkYQlLDBbgAVhKt
krBV3AEuAXEBtqZn8eT9z/m+877ff+oXUpPrJcCa3DRBpBeiEpYu6ZTdECxH
YEWqWmBuBOblZwC+5cu5a9nugR3Zkj05izmrjo1DVo9z65j3422Q7IaKYaiU
TBRS9tPy0AcvZhTVZ/WtH94lbX1r5oda1mq236Xqtt5NgxCURnkag0f5DNs3
Y38IDuTVjIJvuLJXkEvJS06Sep4GoWEUEnrWmDethpwJSt66Vr+cWqdeqQE9
y+XEmWMpdsC9LPnmlH7xZrhwdkINuLeEe5ySanNmO2FGMu5mU5a9/9cOR54t
+g93no2bf6se2tvQJ6veWF/Ln/d/ZdV9/QOGmU4x
             "]], 
            LineBox[CompressedData["
1:eJwVkEkrBWAUhh9bKxmKhYVChsxjrmGDH2BhWkjq2twyJsp4bfgFih2Kwr0b
CoWiUGIvUpa6bCQLs+cunt7vO995z3fOyeobbBtIAIYktQCeG+FF5uphXsJy
WQwz6qxsVkPM95R4bjkkqxtlUFoE6TWQIZvGYr6FKqCjATqlXbqlS4KlcKye
yJFk6m9vgR89vzLhfVzO9F8VwmoAtq3/WAmL5h80w6Hsy4q15owvtcKy5xXP
u3r35MN7tnVzJUcuSqzvDOfqn/qVD0/mfatTzjUpgTqok7D/9Pj/rLEZmZZt
9zBmfsj8Ef0R78NqVB1Vd+yxV09EXbPnqLquXjvDay3cqG/qg/tLdEcL1lyU
miqolaR4P3lw6w5i6rs9vDjPqXXujd1Jmr6teC/SpKffXoPyaV//azZaiQ==

             "]], 
            LineBox[CompressedData["
1:eJwNkEsrBFAYhh+ZLJUdppQdxv0ahhVKsbGxcCulKQkRdjSDhV+AhVmJWcll
LguEkh3biZVcFjam2SkLnsXTe853vvc77zmV0wsj8wXArJTXwFk7nMup5Huh
zNphC5SqJ9ayDfZ1QFAS1nLNMOf5eA9MyJhMyaREGuFWvZMbqWiC0X7404Oe
Dffr8uA6G4Kjbriog89W2LH/qg+u5VLizopa3x2AA9dx12m9Gfl1X+PcWgnJ
kxkL9T+qAbXQnHn7AmrMN0RluAuGJOb5jPdvW9uSTUnWw6r9i9Vq2Hvcr6gZ
dU1NmjGiJ6UemzmtJtRn3xDohBe1SP3w/4q9c8+Z+9LdBmEpce5XFbz6D9/q
jxlyvufeOe/W3iSoL6UnLYN6ls26JL/m+gd5dVFC
             "]], 
            LineBox[CompressedData["
1:eJwl009Mz3Ecx/F3Rxw0LgiTHPRf/vVHIqpx0Mz8PfUrtkJy8OcgV/O3TqyD
Srb8CZc6YDRsYZVoZf5u+bNh8zu5OhiP3xyee30/7/fn/fezb2bD4W0taRHx
Bj/LI/oKI/ZsjLhJT9dE1KyN2LEsoq4qoh4JXOebXhzRsC5iLwpXRLSucb80
4gySqyLOVkT0Z0eMFEUM0CUbxBdELFKjgZaIKcZ5984hiz/B/rc64tfqiHR5
r7D14N76iLvIyIu4T+fTC+pcy1VDjoQa9bjNdgtV6pXK2ee7RS9j8r1Afk5E
x/KIAvqb/yXbazWDPhZzSq5n5ujge07T2EfoMMrk36L3WlSwV2JSzHkxbWjH
H3tZZi9FuK9Gv1r3aKYdLsYiLEEWMtT9KW8SJ/TYipN4IOYhDqnXjBUrIx6Z
c5Ct2dx3nA+m5vcObVhgHwvRLc/V/Igu2kPHK+1BT9WY4f3y1JxO8+kcub7K
ndR/kzka8Q5vUa7frWI++v6A9ymfXo+4v9P9/ebvcm6i3fRA6qxerZh6dxPo
ZG9kH9T3eIkd6e8cXvmu4x+y3ym5xpxfYggjGEbSm/Xq7zv9gW/Ybt50tpmY
EPeZ7Que4hOmMLrUO/LNtsNZ2OwNNmHUPBfFXUK7PifsbxIj7ifs4klZxGV1
OzFNXI6YbAyIy6UtdnacztX/PBwRm+Q7xnYUu/wru3HD2++k+1L/gzu9hf//
p3+VZpw3
             "]], 
            LineBox[CompressedData["
1:eJwl01tMyGEYx/GHW3OhLsxkzlRUipRD5TQ0rmzYmI2OKJEx3LkhV+Rww0jM
xoxyyFJXHS4cmshqyxw3h43aZHO4iM3HXHz3+7/P8z7H/97JRbvXVY2IiD4M
LY64nRFRvDziFj22MmJVXsSGORFFKyJKUIwGvlE5EaUFEWXInBtxeFHE2QUR
5zCUHXE8P6IlJeJ5ZkQrnbEsYmd6xDQ1KmiBmHzUuncC0/l3sIea3+ZHjJX3
LlsT2pdEtGHK7IgOOpXWqXNnVsQ9OcrV2I4WtvsoVC9Pzmbf1Xp5Jt9TzEmN
uJilXzrM38PWq2YC7RRTI9djc9TxddFE9m76BPnyl+q9DJvYt+CFmFNiTuMM
RtpTjr3kolWNZrVa6Ew7TMYMpCIFSeoOyDuII3o8ihq0iWnHXvWqkT0v4pE5
O9iqzX3TeQ894T/UYqJ9TEK9PNfSzEev0udLI1brqRAJ+spUcwzNouPkei/3
V/1XmqMCr/ASefrdKOat7zd4jX697nN/s/u7zH/JuZJeplX0inrrxZS6W4J6
9gr2B/oezI04qb9aDPgu5n9ovx/k+uz8Be/wCR8xYmHEdf399u/+YBhF5k1k
S0C/uJ9sv9CDH/iOp8n2zzfBDpOw1j9Ygy7znBd3AbX67LW/PnS7X2wXneo1
qNuI0eLSxaShSVwG3W1nh+h4/Sdhv9gBvoNsB7DNWylCozexlZb/ew/u3Mj4
/57+AgmGn4o=
             "]]}, "0.4`"], Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             GrayLevel[0], 
             Opacity[0.5], 
             CapForm["Butt"]], 
            LineBox[CompressedData["
1:eJwVkDksA2AYht+WAbG2tToSd1tXibutGthEmMQRVEjaSkgUNSIdNCHCgL3S
kZjN7taAQUSwIJGGxNA2HsOT9/u/+/sLx/x9PoOkNYhXSFl1UjZEbFKsRlrA
V9oiBVFjo2SAQac0ANfN0hLsVkl5vHfQXDSffGu1NIdtQ+fRs0opUE8fei5C
F/5Gq5TxSA70lJlfzDjhPWeX9sk5ABd5y9S70RAaZMZ7p/QJHzDjltKt0nS5
tEptCnujQTokP0F+FA12U9NGPjyXSTe10iu9w8TfUDOzTWBnR0uTVAA2epjb
pRz6vpDTQ00vRNnV55D8EIAh6pLkzGJP8mdFHVIxlICFe/u5yYSaYYL4nUsa
RzPUDFObRm+Zk4AYvR+ITxG/R72o5/+PufmbnS7ZL4leoT/oIzXn3HwBm/zF
FiSI/RKLo8fUxqk9QlPkPrHjKLaBu9fxj2Bv4IvAHu8V3kZiIXQbXxifF9tJ
rz+MMmTe
             "]], 
            LineBox[CompressedData["
1:eJwVkLtLgmEUh38Katc1uwzRlJdudr9nRs5lUHtEU2pB9xaLEgpEhFrTpYa2
gqD+gIbuk2IU1JBbai0VBNHT8PCc95z3vN85X81k0BcwSAqDxynNd0uxOumw
XdokLhiUtvABuQS5OPg5RzlbqAWIX8n99ktnxEny5/iZt4q7pBe855Z24X5Y
uoMMdwuoPVEz4UdswRv0TtAbbJSyHmkW5/Bpg5Sm5wFMDmm6RTLjGepv1P24
slWqgHHyVdg5IDnADgHqK8z4bZem6F0mXoJFOOLt0WZpBLIuqYg7Vr7japNs
nVIttDKflb5yyHMnwt45nKQnYyPuoxdWvdJxvZSifoKjvGEgv83OQd41Ei8M
sQM2wxf/5BNC7D1Gj5UeHy7DCd6PQxv3qpskd4e0zy5xuGCOEvYuhXyP9AHv
4KVvnZ4QzPEP0sxdSH+K/Y383yQO90qX7LyGr/AO/vmfFd9w9jLzNY5xjsAt
8R8ZlGHx
             "]], 
            LineBox[CompressedData["
1:eJwNkbkvw3EYhz8mdjpUDDpptY4q4ogrjhgQRE3VgZYwOBZEW0cicZZY0Dpa
HYrFZvEnaIkIiZXEMTUGizOe4cnTvu/3+77v9/2Z+se6R9MkBcFhl3IqpZRV
2i+TIhAFY4F0XyXdQaheeicfxrsQJ++plY7xB/F87i9hd4W0jAews04ylUhr
/J92APemYBLy6OlqljJs0gRnHoskQ430hLcapRF6nzdIw9jI3ZV8qZ34Dvk2
vIsDxP0wUyrNYjf9+sAFIfI3zBa2SLfkFph1Huagt1Cy0NMMF2bi9FkAW7VU
AN4WaQgG4Zu+++QOYA8icAhO5grjHjxOHR/4YbWYnTQxLz7BPnq3UuMTf0GS
eIp4Agc4n8t8R+wjBlFIZx+b1O2i7gbuxEF2tQ4PvOmMnZ1SL06tI2pYmTGG
7Zzr4r2d0AGL7HyHem94G7/iLL7RM87EL9iAk3zbK7iGv3J2zfvD9PDSI5vf
HvxL/AcSnLkED/F/7e9peg==
             "]], 
            LineBox[CompressedData["
1:eJwNkbkvw3EYhz+ISByxE6JCUlfrqLjpRYKExIAqcUwYHAuJq4dObbWJJgb3
OdRfQKITUwcWYbKzisSgwjM8efJ939/7vt/v+zPMLA4tpEkKgqUOWqTfKum2
UbqDBBTWSK+t0gscW6U/8if4CO7JL3VKDzijWrJTv0t+vVmKYS92d0ll9dIe
57UGaYu6TdgAIzMnuqU8alf55t0sFXRIHzjmkJaZfWNjBi6iNlgpDRLfJz+A
D7CPuBfWLZIfTzNvCibhkPwzdzupwOQC3HUb/OAySWZmmiBhJM6cAJjaiMNs
jzQPc5Bi7jm5CziDK7iEEe51iofxCn084IVwrRR3SiF8jT3M7qXHD07BE/FP
4o/Yx/fl3M/F7sZgFHLZRz99c+jbh7NxlF1FIJ/9vPGukibJAKUQp2eIeBiC
EIEdKKZunPe7wQVR/kFuu9TN27OxE2diO/5ifw6cxTlJXTq2cf5mF1acwkl6
/gObF2Es
             "]], 
            LineBox[CompressedData["
1:eJwl1Hloz3Ecx/G3QmxhjpDjD1e2sTnHNuYewxgzxz/kiHLMMYqI5Ci3OUvK
EfmH0P6xzfHHwlxJrRxhzkj+Qcktj+WP5+/1Od7359uv09xlhUvrRUSin3G9
ItoNjWiPDmjeP6IwNaIZTcJY91dHROTRa/RDSkRBv4iKwRGVKEdunQ0dQy+x
GU23jI644mwzvUxTMyJSUC8zYkmPiHnDImZjLq7nRsyhVUOs3T+zr2RTZV1B
9w2KOJAWcdN+P/0xMGKB88wBEfPpV/upPSMy7PujDwrtX2dFZPVRs/tZ7P7K
P5O+s3+LPLF+OfuJb+jO5zSfbc4fut9ON8md4K7GfjLfaeqcgql19aqziG43
t8y+EZ/tT7IpMbcTdKCzG9Y30UBv9VHaO+L8qIi99IDzg7igxl1mfsh6Nz08
UiwzPES/0CHOc3DR3WC6Vb4t2IxP7p+p74x36e1dSnIi1oq9gq6jUddbckS1
HKXDzRI5ehqOYUhSZ4I6E5HB5grbHdZV9JZc2eI3kacpmiHBWYE6zsp1Dq3T
I1bpO0v+nfyyaaWZXEYFOppprpx/6Cj6m9bI01reI/r7Lv4OcXdiF8rEvGU+
t1GNu7iDbG/xyBtM4VespyK6Ro8b9LiaPkGy76xEPd3oSppCn/Kr1mctbcWv
Ddrinv7Gu9/DLo/upfn0LbsH7N/TTuy6ohveiH9KHRvlK/VNv7a/qoYK9S7S
z2Ik8+lsFl1QrJelOGpWfc1shfVyLEO5nhfovQf/Wn5J/CaaTXNaQIvN6IXZ
vcJLTDfTXvLNoOvFTrfepqbGaikTpxHNUNM55y19Yy3QkO1jPc5jn8a2Vg1p
8hXobRLyMRET8JxdvrebgONquK+GY3Sy3j6Ks3DA//+JfyE+usQ=
             "]], 
            LineBox[CompressedData["
1:eJwl1Ftoz3EYx/GHEspGjFyZSYz9DTNDNtscixQbszmUZnO4YEI5JxdOkRXD
5oKS04VNhFJK2JBRttwNI4cLSiKH5YLXPxfv/+f3fZ7n+30O32//jMqakg3d
IqK7n7KxEemFEUORgbTciNLREf3pACzmb5sesYi20y+j7JkQcT8/4gHuYSHf
Q1pKW8WU0P2zI1rY9tFmmpgYkYUekyNqsiLWFEVUYTVaZkVU00fTIt7yv7Ju
EdPpu5nWTY04OSbinfUJ+ndSxDr2RXkRa+kf61UJdVgvwHystO6aElEwPuJ7
0i+uH3sl/Wr9BXOdlcLWB72Rbc91ew6zv+Y/Qg/JnaruDusye5epsxxL8UCd
FbTW3ApyIr5ZN4nZYm6NNJ/tie9W9NJbT9SNk2NmxHF6ir0e19V41MwbfNfS
+hkRP83wFP1Fi9mLcI2vkB6U7wD24wf/e/VdcS857mVLQcQuZ2+mu2l3vq7M
iOdyHCuWF3P0NA9zkabOPupMQZ6Yu2KP+m6hz+Sa7vw0eQZiEFLZFqqjUa4m
DM6O2KrvafLX2ldIm5N3mpwPhptptZzDzLKKZtAX8gxO3puzr9p703m3nHVJ
vQnv5TLNF9dp5uXiNuqhgp4ztz18HXp7iSzvapv8o+l2mqBv7Huqr7d0iH3p
GIo2/azibxBXSU/TKvpJXLv4z3SEuJHIxEfnf8Be+c7L+1j+O2qsUftGZIn/
zXdF/WfUn2suZ5Nzsb6tr0Ty/YorErdD38V0J91kHu/N5SM+YLl55cqzgu6x
d4LvQ/L3c/YN99+X5plJI/tA7yct+Y7EduinSny22E65s+Wr0MdSlKEcS/BG
XIl7KcVFNbSp4QIt18tX56zP+/8f8A9FrbYo
             "]]}, "0.2`"], Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             GrayLevel[0], 
             Opacity[0.5], 
             CapForm["Butt"]], 
            LineBox[CompressedData["
1:eJwV03loz3Ecx/H3RkzCSCbZhvzBzLYf5r5y/eWcm21qrvnHasuVq2wzd+EP
x3LkD5Gj5G9l+EeuRSERyT/mCiN28dgfz72+78/7/vw+G1hSVrAxKSL6+3N9
SETzhIhW/EbSRA7cHx7Riabg56iIjrQD0qZFdKFHZ0V0peVjIypwdmbEeZxD
ZVbE/ukRB7APh3AQr3Mj9tIaVKIaVdg0IuLfDH3lttFkmoT+7fH61aAS1ajC
2aHq0UM4gCM4jEzxA9HNbAPoHnVf5EXksl/SHGenxdXiBE7hJC6pVz054m1+
xBv0zo7onhNRZoY8vhp1FsofrM4iWoAicxZjBQqxEu/svUBMAeZj/ZiItViH
t3yPEhF1vu/gNu7hLnoOc5/u8BhK9d+AhL6bx0UsMd9SLMZyLEOD2T6jsx6f
6GWxCbv1Yo+gqc6SxCVjlL3yMVLMVvW2YQv62LEZDXZsok/M9lPuADUaaZoa
F+25mX+S3JSREb/Y6exMZOCauGK/3yqsRBEKsds7utL+JtS6Ssvsk+psm5xZ
ao03T092L7yy/xu8xj72DbPdRMpovwHqxKc7/8J/Rt432sP5D/odE839R3wT
ZjsvwAs5be1n/LfktNCFzttoK46r995cH7DHbOnjI7abbYG8KeIz2JnoyN8Z
nVAr55H7fIyHqMcTDHJPV93LLvkr5D/wVp6zm72HVrSgTUy4qy7u45/v92Yu
Zvdlr6LZzp6Ke4bZ+s/DOrXm0LlomBrxEVv8Th38X37RK5n+FVMiv586q2mO
Ormo4i/lG2eHLLMPw1AMRzbyvbdC+xRhh/vYia/eZ6O5cvnzkIMEStRe014f
38SU2y3LdwXN0yuBav026Fdv9zpzpPPfobdxDxnsu/SC/P9H+Mfb
             "]], 
            LineBox[CompressedData["
1:eJwV0DkvhFEUgOFXYmphqFCIRGwxCxNbLBGEVs0QjWCCodMSkWhsESTWjEpB
ryAS+/4TUKBGQudVPDnfufece+79CvpHu0bSgITmSmE7BHntsGPc0JZyzTeN
s1GIlUCyDbIrIKhEGIrdHza+29/jd1zdeqiGW93rTk8ReLNmwu9xddZDh4Jl
cG1+owtd6VKTtVDlvDHnZTkrU1XeI+jZlcZ9937K4cP9X2OODprhUNFGiChq
TaUxrPNWOFOG54Ttz/SckPHYe724lm7+anzWl3Xf+tSjb5vy7UWeNeSslHnA
mqUWWNa8FrWgpO9Jefc97arPN/Sq0Pn59g/YHzePx2CmBqY1aM+ates6dX3V
mLB+5X+tzv9u34nrR2qyt0EB/9kfvhFN9A==
             "]], 
            LineBox[CompressedData["
1:eJwV00dsz1EcAPAvtWcixFaNCG3t0daMPUu11AgJao9YJaRcCEEIjYNxcNH0
5GId7DgYJ2IeW6OqpVaC1ubzP3z67fu97/u+9319TSnYmLehXkR09eNVUsTf
sRGN+kU0Zv3EiLTUiL2DImYNiOgxKSJXzGH+hIgF5DOPuZSnRcyUk8MMlmdG
FLCMMnO3B0ac9/sFznGJi7RMjziaFVHMyqERq0i37+ZhEdnj1GI6OczktbO9
oaE9KsUSuWn9I1obp4tNffunj5Dbb3REf/rKKVRvK1to0yeijmo91op3ne2j
tclqfBLbqVGqz0LzWdY2Hhzxxbi9cUc6UCpvznh3QC6zyaNoRMRJvZxW65S4
Xj8tfdthzVi1MpynlXFrHuv/GU/ZbVzibKXUWvObG/I7+15h/rh1leIf36vF
KrKc+6X8CgZkqM1Da6qMv5q/bE2tmOn7d7GOYvXuONc9tqvVbLgzO1u2daPl
NzduQZhPoj4nrLniPq9ymetcI9k9nXUvu6zPt/6ut/LEuM57+MF3fsn5QxP3
8Vt84czzEndsPF/s6dtDeY+YZP+pLFFrsjiF6jH6odDf6R819vorfpGz0Pr2
6iwSe6nTm93mC8wN0UMnZ+9MR7rShYHeW55+ZlPkPnby3vusca5k893pRgqL
1V7KEj7I2aS3VL9vTkR7pbHHfsvsd1/vDZ2juflGYgPWuqN1rGINq/km97G+
zoz0Hv1dtumlXd+Iz+q0FR+oU6b+IHXKxbXqvLDuJWU8p5z6zlMtvqWKGt4l
9pNfKb7hVeL/hQqeqpthj0yGMizxtulmjxve7U2ucp1r3FJ/ujNkM40kbyqo
x+dR3opvJxlFE+N9+lmh3n6xiIMc4KeejojFTPTeDouHOMZ/RqzNVQ==
             "]], 
            LineBox[CompressedData["
1:eJwV0Dsvw1EYx/FvEbduWl2lcb9WW1ohMZQibMVAgqgy0P5Lwm6TuCQidotN
vA+DN6GLSJBYSEy+hk9+ObfnPOfEi9VCEAICNTZAUw46R6BLp3nY7IfnlDkK
3XOwZW7ocBaOVFFVgWoDsOKeVS2rnIV9HejFtdckRCYgqjbF1K7EIHyYnzof
hwttee/oJOzYT0lF7WlXoQTUq9U76swv966ZMcfrZo+9N7uvRYvTsKRt96Ss
l1ZSx0PWGYZ334j59t+b74pbI2qmrPFonrle9mw4Db+Oex33q09P3lWd8S9U
VqCK7qfg27fcWevHvPY9EecuPXNirYL9RB23a8z1rDJ6cFy0t5KuMnCjsP/W
4fyM6zXP5c1b5xfMeeXs+w+NdkJx
             "]], 
            LineBox[CompressedData["
1:eJwV1FlsVVUUANCtzKUIRoLls2Wo0D7oRFva0hpEHBBLCzIpsTTIYGxLhVYk
ihAjHwYSIvgDQoDHoy1DSdQEHCoiRoHECFEBRYFEBUmMVOIQEj5Y72N1v3Pv
Pvucfe69zW5sqW++JyIa0n/yIsZMjshl16SIJBvGRWypoExOdcQ7Ysr1beJW
llZGLCuPWMFs12eYu/TRiCzzcuQ/ZTwzXU/uHnbTZM7rUyPW8RrreYN7J1iz
IGK5+dnmryuK+Mb45rSIv+nlspyr9JkecUXsKYx4aGLEfcbjxIGunZT3JeOt
nyBfrbx0pPvhiMPcnx/xL9et9Y+YkpNv/jB1EmKGOoNpcn+Ce216OGbvH3GU
T/iYoc6sWj81rDRu5ffxEafsq8fvz/iU4yxQ+1kWck3OCr3l+v2imGmtITRb
b6L13tL7H8b93b8hXme2M5rDLOqpo0PuRn3trHI2zv8BvQxJODN1MsWN6vyo
foE6P4mVettnXoo9JNnLh+ocEg9zkCN0UyW/SzzAfjrTa7JJ3UJrFFFACcXc
lr/zEc+b7bzHDj7Q7+P28ASPkfK+7CXJxSkRFa5tYzK39FJCo3qlYi7llPGL
nqaINYzQb6VYwSXnXSvW8STPMIdr8heKzzFK/nxxHkV6WCS+a73nxbP2cY4O
a3bRyXZ77rL3A3RyiIOEc9wvdpAkxT56nElf8/rRhwH0Z4Yz+cJ6JznOCT7n
T2f+tXiKrzjDaZ6WP4vh9lYrnlH3kjULjX8WF7l2Xt4FvuMHvuc/9c55F9pK
I1bR7l3I8968aQ9L3PtWncXmj1WnUWygzXfSzsusZhW/6XuenPnMpSX9zdLM
r+71OutRzmo0OYxlDMW+hZtiL5uc9WZesO4k/z+a7K+Zl1hJCwP0MYhMawwU
/5fbII40Xiwm7D1D3uD0O6+vOpbJKVOvnFLW6LGfZ/yXHvuKt+wtS185aowU
S9ToFt92v9XczOKIO8aJ9HeW/rY5a61XPb+1tLOGV+jyTQ/y3e9WK0Pcqp8R
rm02Z61ac+3nQeMsqvRcQzXvG7fYWyu7PIckQ51btusz3b9hXq2Ycr1erGOa
fd8FRu3yfg==
             "]]}, "0"], Annotation[#, 0, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             GrayLevel[0], 
             Opacity[0.5], 
             CapForm["Butt"]], 
            LineBox[CompressedData["
1:eJwNkMkug2EYRp+KORZugBirpca2ZjVUi4W5LqCNISFhQVhYlaA7m7YkSEQl
YkhQNhWpNBZWWFi4B1YWQkLKWZyc/3u/93uHv9A3NzJrkBSA+3LJYJVSYL1a
OqqVJokZW6QprAbpr14a65Q88NwsPdilPeJ9HVAh7fL9ZZO+4alNeoTxSilK
/jb3J9Qepa4HCoh/1EgRl7RBfQtvAviQc5j+2eTfkmcnb5H39XgJ51qoQ78z
OAWTWcqnjxnP8DaP7wnmeqdG0Cm9YZtbOiZucLAHfJqkGHjJT9L3HnLo52JX
N3RBNzghTl5dnWSFBWaIMcM8rmKXA3q+0quMHhntUiZkQTr1+tklFaeBkftQ
l1SKw3ifdxbeX7RKl3AORdxd4xK8SU4xXmHuK2J+HMW/1PqBCP95kHmH2X8A
hiDBLoN4mf1WG6UXziFy/HwH8TS7+Jh7jbMX71Cjl3iC+XvwFucY//aOcxxu
IEnc0cQe+B/ncF2x
             "]], 
            LineBox[CompressedData["
1:eJwVkMkrxGEchz8zHGhuFIMcZB8ztiEzZrPMyK4cbEXSZCnLjYODJSlKouZC
k4gZy8VpLnORE7nxJ3BXQmbK8jg8Pe/3/b3f7VcwsdA/b5C0Cb5K6cslJcHD
+QN7cQLf2aQ4fsBvdXyDT7j3SAd+aala2m3jHfFOhRS1S701Uh/kk5MRkDJh
wCcNwoZFspA/wnkYhiBUJXW1Sunkx8lLI6+9mRh3YJNVOmuiNkSgsFzKoV8R
nqG2mXOwXnqhzj51nrGdmc65/4UfeC+TYjDO+2/634KJfi52c4MDGsEJcd5Z
ayUbzDFDjBlmcSm7hen5RK88ehiZPQVS/029bnYzYCPk8n2thTnxOj4kr5j8
qJu5IAJZfLvCZrzMm2y8ytyX3K3gC5ykVgKOGqjPvD3s3wndcMMuXXjRK006
pEfibd4EOW/hKXYZY+5p4lEcokaA+1Pm9+M94mv+7QnxMYThlfsSJ/+NXf4A
pJJcuA==
             "]], 
            LineBox[CompressedData["
1:eJwVkbsvw1EUx78W4g9AEYPB+1UtUvWoRh8kFqIhRqZ6VDwikSiDikoMGlSi
7cRorQSphIjZm4WEdLJJi0gMPoZPPr977j33nHN/xcOTfb4MSatgr5e6LdJi
lbTZJPmxi7UDemqkELENWIe1amnEKh0Tt7B/gg9aJGuj1Mh6itzxDskLY3Dp
lEbxrk0aNEkp1tecmWuQrvAAsVe+3yC/XTJA1Mj9DimCI8SjEKfHvUopxvc+
PuyUctmP4zzsIu6EBHsOHKbeNmxBDvvT9J6ukIbMzNkmBYj58Qo20ns2e+/U
CNulHehlJg/0g4k+C+izEGyceSmXbvhO4iS1vHVSCXVKoQwMxDz0kaDWKZhr
pSBzT1DjljwfTvMmn5CCJd7UTc0s3tKFM/EXdSzUPWK+ov934N4oxOCCO+95
nwe4gyd4BCd5zfyDGfJCzDSLA8wYJH8Zf8BCq3RGP/P4HPvxD3nPzPmLHeS5
oQu+Of8HOb5j/w==
             "]], 
            LineBox[CompressedData["
1:eJwVkc8rw3EYx99y9B8wRSg/tmFsNG22hnHR8vPgV/kD9rO07ULUFBeHySRt
hCtyMAebXLiiOFFSlvNWSvnxcnj1/j7P5/M87+f5fGvnAyP+Mklr4GmXRrul
lRbpwCYtoz7i4X9M0j65PdiFDaMUtEuX5F2c59CzHslplRzEC9SGXJIfgnDT
LwXQTK80Y5FKxC/ciXZKz+g0uXe+C2BwSlWQaaNvn5RG0+QzkGXGw2bm4PsI
zXq4y/k5akCHyA9CjjMvuo1fCragkvM4s3814dchLTmkBLlFdBW1MHsFZ0U8
Um5qYYqd5mAWbMxpYM5qcHHntVF65LuAfuAVapWM+JjADAZyk8yRx+sKrGZp
nb3DeDxRF0F/eJNf+IYEbxrB08RbhlEj+omPHd8a5jul9pp+t/Q6JjYPSCeo
l3tu3jzKvSQ7xNA36vPki+xWghj/Kkn/KLqJxtE7uIcHKO+S6thxB484Hj7m
rydugDF6T8A4XBD/AaBpZYc=
             "]], 
            LineBox[CompressedData["
1:eJwllElMU1EUhn9dgFNMdGNwBYkxQCkFCh1AVGSIujAKJioJLIwjAiYoATVx
gUkHV2qgSlsRUBR0AVisCFVBNOLAQsUJ2Dp0p5uKiRW/Fxcf33v33Hvuuee+
krL/eHn9IkkJ/DlVJDnMUjO244vZ0gWoy5LCpVI0Xeq3SkmZUpz3tdjJvGrm
VEF9rhQwSSnEfrEmGcdwT6F0oFi6a5EO4hD+uUEybZEs+Ax5zPg0zsQfyfWt
RHrM2iusHcMB7CJeRtyDS7Abl2IvziLXeZyNh6ihIU86CY1QSI23yWEuk/rw
MGcIc5YB6vtDLe3s54dy5rVy9grcho9mSDObpTmYhd1p0rMc6Q05YtT3Fv8l
Vxy2k68dDzHexngI+/BT5k/AMOwl703y7jPqwXfgFvRBL8TJUUuNdXAM8gqk
XPAS88BcqrSVPNugh7O+2ii9himIsvd36jtkkyKc6cQmzg+NECR2lrvx4wCM
Ej/MPYzgI7iTfYuNGHVNsU8QDzKeSP0m+p6AH7BnDf2opmdp9MpFP9zgAZ+R
k54XMaeW/cYdnJf3CL6Po05pD2sLqG2EWvPxNOs+QAXj7/GPfL4JWMfeVuI5
YIFdxh2wPpk8vTiV9wXuNMLzJOseYhtjvxmbhy7e1/P+nFg3zy/JMc+eneR+
xHgX7iaXn9qu43PMa4EXnGsSLjH3MrFrxFpxB/bhJNa6yOegZ1f5xpy4A1dx
D27WeKCf/ufRiwHDxIPEbXgJvU+EHfR5KV5Bj5bDMrATn6XuG6yxsnaG58/w
CSrJbaKn6TBOz2Pc/2L2WSBH2C7dg5XUt4p1q2GCOS3c3xPsZc0Y86e5v3fQ
xPfURG9HiTfjGvJ/4bfTwJlt7P2V553Gb5RehGAQ1mT8/5/wD3C5xik=
             "]], 
            LineBox[CompressedData["
1:eJwl1Fdsz1EUwPHT8GRUtAQvZohRFG2NVm0iVnkg2sQKEiStSIwXaQlPWqMl
KvaKrUWUhFYQq5XyYEfMGCEIXqQP+IiHb7+/e889d5x7/+00r2BafkJEJPoz
aUREi94REzmRy/pFlKLD0IiGvhEpAyNKhkVsxLkBEY1GRjTG+8yIj/iATHkL
5MxHQVrE0V4RP7MiquQfGhRxntO1C/tEdOMiHszP5WXzWu3W6RFrOEv7mXly
eLP2eN7C0/md8Xlcpt3Z+FKeqb2VZ/E2nsNXrL9avBBF6CGv1HnKsAlbsBmX
nCfD+dKRhoTUiK76d1p/F5Lk5ahLMk/l/JSINkMi2qEtZvaIuNM/4oG8htER
Dzmc/495J/SM2M1V+rfrP8/lfNv4W6hBrnlPmjePK/kMTqECp/HbHAVjI5Yi
HwPVOgPFYhvwsnvEZPNMwVFnr8+OuIf7+GztL/a3OEM91H+F+1uJVdgnVmif
e3gvasQXjYqo5sW837rj9B+wr/vWOcjn9Cfaf6r6NOcr1ixQj9ljInqqVfFw
7wQbUS73pjsYbcwy673wBq5rP+VrHGq3QO6Mf3uz1+n8WN5TzNX/hH8Y8xPd
rD1FfDImYLb498ERXcxTxX21W+q/47tOXi2P0tdUXxNUaPfWrhWr9F2vr8Ga
h8x9Vf9hrjDXKXur5PXGrUOdc9Vih7HHxU6KHeETfIw7yi0333A1O+P3MILP
8kL3UCynBBfUP0stLvJQ8UrxbG6m9k2Ro87NOVmNktASw8TferPH5QyR+8b3
a7xCnrn7qWkqatX8l/tvZJ0EsZve7w0k2V+yvFa4a8x691fHJXKuG//I/T3E
Ku+pUG1rxIt4iTk++e0sd+ZMa3/2nevOv/I3VKvJZbRP+f8/4y8gA8TJ
             "]]}, 
           RowBox[{"-", "0.2`"}]], Annotation[#, -0.2, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             GrayLevel[0], 
             Opacity[0.5], 
             CapForm["Butt"]], 
            LineBox[CompressedData["
1:eJwNkDkvhFEUhh8/QKPQj2rs+1jHMiMUOkuhNBJBgtgytkGj0Cr4AaLGL5CQ
EEsnQ2QGYUpDjEJCIjzFk/f73nPPe+65gdh031QeMCnZIBQUQ7QeItLfAH1y
UwLpGniQk3J4q4N3efX8aBjOmuG7EX6kyb42e8JybF+7ulAFG2qgA4okbm/O
2rremsxGYU4uK2FGXWmHBs+c+4/51+q8/pW61Q0DeiNmxrtgSRblwlqhWUv2
LstQLey3QLd365GNECTb4M/9stXmOj8UgcMKs1vhSI3ZMyx3nruVeusH+nnO
/LI/aG5KLy059/iQRBl8qmtqr3OSpXBqxqozEjKhNy6Lzh00c8zvbd/oxbxn
6fQeT75rRP21ntG7d+aOmq+3Z1bKPTLW0uqu/pP6KJu+wz9pRVcW
             "]], 
            LineBox[CompressedData["
1:eJwVkDkvhGEURg8NBQmJRC0U9p2xjW1Q0UgIEY0oTEMisZtJmKFQ8wdQ+QXo
FCIqsSSWmUospSURCRKO4uT5vnvf57n3ffPGpvonU4BpeS2EnCLoq4NeGQzA
gFwVw0M1PMpxmedq4U1ePB8OwmkTZDRCpgT1derpkCN9IXW2EmJqfjsUyILe
d3ur1lZkOQQRuaiAJTXaBo2eOfM/zfwrNWr9Ut3ocSdr42YudumVJTm3l/uf
pTciIzWw1wxD7jYs6/Vw12qecz+qIF1t6ISDcphvgUM1rGdCkp5LSMD+vvVU
Z37qrzD3xdqrfHuPL4mXwo+6po46574ETsyIOSMuc9ZmJeK7Dps54/eWb/Rk
3qN0ucez79qt/tp/tnZt1o7ebGvv9rK6/ZZt770rO7LpfRPunZQbuZNbCdn7
A4+xWcM=
             "]], 
            LineBox[CompressedData["
1:eJwNzzsvw1EYx/GvjbostBKXNK1GUJe434XE6jpgFiI0aattImEkLNQb8AoI
HcUibgum2mwMvAuN7/DJ8z/nPOc5v39kPbWcLAO2ddQON4NQ0KWudeheuh8y
yuqzB5qGoVlXHbDVZ6+1chKqFFCNqlXqgq9x+NaKs1a1pox3slrqhUXFByAf
h5x7gU7nua6wHs/CiYLTEFLOOSlnZq1J6+0MNJipUb/mCvnmj7XeWu6se2df
mP/DN4t6HIIHtZm31Tsvfj/rScVu89kftT84AfOu66wL1pA14Xsx77w7501z
7te6f2ru3RE4MN++0n6/er43BefOSrpOaVMJ7Sg+Chvmy4/ZozMV/N+S7/8p
bL4We2IKK6qI7jz7B1JsRWg=
             "]], 
            LineBox[CompressedData["
1:eJwN0Lsvw1EUwPEvJku1SOoV4pFIVQlKtR4hbCYVYsVmaJPSBjFg8ShGj9GM
XUwWrwGJhD+Alb+B7/DJ+d1zzz333F/zYjadKQGyKkZgZRRWFRyGSoU01QUB
Y4Ue+iHn/oG12V4oVZniMWhNQJuuOyBj7soYGrGPgqpWlf6s/RqCby3Yb1FL
WvPMuuZ6YFaxOJxHYcNcRSdcug4Y9ye9X+ExqFHBPgV75o154+04NPZBk367
od47f4wNxnJ73dn7wvk/vfNDDwNwr4jzxjzz7PeTHvXu2+etb7e+1venXdcY
Z4x1xpz3RT3zZp9XTZsPmz917uNB2Ha+LR35/eL+pv/uxF5F14fa0Z52NZGE
Zec7S/lunerG95aYQy3ON2TNsBJKKalb5/sHUqRGYQ==
             "]], 
            LineBox[CompressedData["
1:eJwl01tMz2Ecx/GvTc5qjCamZjZzVqIcQkXmkJtmM6uxdYGx6cIcOrh1YznU
KhozIhfUXKgQcqFmU2OYmFxSNl3oRm7Mq7l47/N7np7v5/t5vk//BaVlRcfH
RUQ/MnIikrMi6jdF3Ngc0b0kosH3S1qfEfFwVcS07IjpuLQ04ubqiLzMiJ3O
7MIOFGI39qVHdNBHaMc89XsLIn6rGUWJdTEeqG9cFnF6Y0T5Cr3WRJxz/v62
iBbcwwVeVfZrtkdU+67x3aK2FSPWs/gmYzaaZBx0j1t0iLbI3j12ln5fG/EN
VesjKnFSnzX6/7A3hEGUrIzY73y286nqD1jPpwdpGq2QMUtNJT0jcxUtp9fc
oXZdxHVaRy+b31Mev3iOYCIm4e/iiB5cMoNX9KsMb92nmk+tvRr0qEvxDnOR
pOaurM34JNcn+hldGMAX1HiLFnWtWMjnUF7EYSTJkIjx/N7p9Uyu5+jEC9wx
ry5aYK5XeDRbF8lTbKZHvPGM3IiZqHPfcvsV+OCuw3q8pz/pqJn8Qb31az2H
aapZJeSbGz3LO0+GfOSiz3v2IkGPjWP/R1vMCkN6dMowVZ5pmIQpmIxSngPu
kMmziWeZfrfpHjWFaLfe6r3b6DbaQVN4zkG7mjb0m/FHNMhcx++Yd+pQe5TO
MrcJG2TCLn1OmfkJPNH7MS46n+jMG3/rcIfl3uW8/ston71BPr10sfUiNJrT
VaTxTs/5/7v6BzyLnOM=
             "]], 
            LineBox[CompressedData["
1:eJwl01tMz2Ecx/GvOdxIh6HNIVSzOcw5xwql4kKiuGCuaoZNceWG2sK4cZjM
2XWhCzXFpNEFc1hyEbHKXLhDh+FGLng1F+99/s/ze76fz/f5Pvunlx8urRoT
ET3Iy4mYvSqicX3Eq/kRp1dEvKRp9h4uiUhcHZGEiwsiGpZH5Pu+LTeiBMXY
ge3YvTSijT7GI8xcFrGrMOK3mhFUWJejRX3Dwojj2RG1i2RmRZxxvqkgohn3
UMer2v6lIrl+X/G7SW0zfllP5zsTM9Cox+/ucJcO0Fa9dzn3gH5fGfEN59dG
nMNROdnyh+wNYgD7FkfscT7H+Qz1+63T6QGaSU/oMVfNSVqt51O0ht5xh/o1
cultes38OniMNbdxmMg7AX/nRbzANTN4Qz/rodt9LvC5ae8GXo9mq8nENDWt
em1Bv76G6DA68RM/cNlb3FfXgrl8DuVFVCJFD8kYz69bVq+++vARn0Z7Na9+
WmSut3g0WpfpZ6+ZHvTGkzdGTMFV9z1m/zh63HVYxns6REfM5A9uWHfKHKTp
ZjUhP2IOreFdoIdCbMJb79mFBBk5Muo2eFd8ldGuh2T9pGASkpCICp5f3CGL
Zz3PI/Ia6E41ZXhqvdV7P6HFtIPO4pmG52qeoc+Me3Fdz9f5VXmnNrWVNNXc
UtdFTEWJnFozr8EH2T2ocz7FmR7f2t1hi3e5In8zfWfvLJ9uWmCdjzL5pcjg
vTHn/3/qH0Txnlw=
             "]]}, 
           RowBox[{"-", "0.4`"}]], Annotation[#, -0.4, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             GrayLevel[0], 
             Opacity[0.5], 
             CapForm["Butt"]], 
            LineBox[CompressedData["
1:eJwNkD0vw1EchR/aStDGbmJTdKClorQ1ECQWLEQMDMTApAaSeotF+QLi7QNU
/3aLz6CMJbGZJCbx+gxPzs2995zfubd9aWN6vQ5YkMtuKA7CubqrXqjREWiW
51GoyX0OZtMwlYC2DBwOwYF8JOGzE5J5OPJ8dRhW5K0f5nqh2gVBChI9sC1b
cWjRU1BnsmZK2LwGiUiTOY2yaNadc9P6T12/mpHqg8yY6w6I6W/VW6/nzL2Q
Om73SZmQrJ2WnVOxb9V3BOqjuuPbAu/eSlkqciPzdo3q+RmAX/mSJ2f/qd/y
oK/mnWN1zS4ldd8512rM3Ct10x4FebH3nmdh90/cj6ghKfsn73b+B4uaQsQ=

             "]], 
            LineBox[CompressedData["
1:eJwNkD0vQ2EcR4/JS6W97AYmVSStqpRSBlaJpQ2iSccKPgATiTJJVEzGet0k
6F26+BBYS9I0sRs6OcPJufc+z+//ckfLBxv7PUBRHibhdB7udFXf69gKROV7
FVrynofCHKxPwdgCXOWgJn8z0J2A9LJZz3cXoSK/GdhJmU3Acxqmk3AsR3EI
zBzqwpL9pd96ERmQQetEpGStpn2z5i987lgjMwu5NWiPO5/5EbO9Zm781qc3
nX1btiTvTBX7NJz30z1C/aVP3K3h3VBe5E1epeSsgZkgC0MSlR97D+uYfJhr
e+dS7zlLTZ/b50mf6Ud96351iXt+7XvH+6H/4R9OVD4O
             "]], 
            LineBox[CompressedData["
1:eJwNkL0vA1AUR48/g4ivQVraoNRHRRGsPkrDJmlStGhXptLJqv4BCRHComIR
ZqsaWZW5pExNnOHk5OW+d+/vvs5UPpFrAlZlPQyhMaj3wlUUruVGyiEoxeBO
n+g/6/lB+NUbEYj47mICGv3QNgLtEhuCtz4ozsC7LuhDOZBSELp8d6z347An
51NwJqeznu3zNQ0v9v3Qn1KVVmcWeyBrxm3ZlIxsyX0Auu1Z1k/OfpTcuPns
UZ+DNTNVJuFVEt5flgVZkkVpMcu8btZJd16RnVHzmWlXX3pOmzPtjB/3Ttr/
aMAd/I9b/+Vh2DnWg/b4tt6hazqgn/2bf1A2QwA=
             "]], 
            LineBox[CompressedData["
1:eJwNkLsvA2AUR08Ff4bH4FEhHlWqDdrgH7CIGNAiEn0xSAxqk7TiMRIMJswW
UQODrYOkZl099tqkZzg5ufnu97v3+zqTuflsAFiQ1ACkR6C5H95DUBqGIylb
X0XhWV/rVr3reYvO2B/y3u0k/A9B1zh0S2wUPgfhbAZq+lifyolcBO3z3rku
TMG+3MfhTm5mYc+c3wRUzf3SP/ItHc487IPcBOQlLVnJyGMv9Jj5oF+d/SI7
Mdg0oz4Hi+5UnYYPWbd/Q5KyJilpd5dV3aZXwrAsxQgcuFNJv1lvu+eWM5p8
95L5Rf/m0v94si6PwZ/nCTMC1hGNjuuKf9MA9Yg/3Q==
             "]], 
            LineBox[CompressedData["
1:eJwl0slL1lEUxvEnDKpdBpKbFi3CNBPfnJs0sqCkElfRtJAyK6i/oNGGRStJ
aJmbFFo7BEH06qvLZhUSItvUH6ANrvpIiy/Pvfd3zrnPOfe3vfdGz/V1SV7g
RG1S1ZxUowYn7efbklN0gV7clfQ2JscKyXEsHUgmWpNx5+P0JSaxWJ1U7Em+
0OLB5IJa6/cmZehW6+n+ZK4u+ej8E1prkq6GpI1uFLMJG/BT/R+Y35k87kxW
nP3CMqp2J7/pZLt78dd6FX9Q2JfU4+EhtdTt4uMKvwWM8T/Bbwd/g2os87KC
LS1i1BniYVHOE1rubPPauTpXcQ39a4grmkerXl7TFvqGfuW1vEkOvss7557z
HRSV+hw2i620Sfwr8UP8LLhrh/0gP4/4+SCvW16PnPfWw+KeYda+Qx/3rAdw
Fw9wHwV+6nHHulKt23Rc/Bga1b1lv2qG7UeTm9Zl/B1RuxMz+qwzkxIdUeM5
3h3mqd7MxY/az/pW0vcMipjGFJrVrvWtz9tcxiWcltdPP+tlQG9ztOgt5ukU
feuuYXkNfG6zbqSj3qxER+g0/cbXGTOoMKuzdMm+xazm2v7/o/8AH1J8tw==

             "]], 
            LineBox[CompressedData["
1:eJwl0slvzlEUxvGnCxvbViQqtBuhinqraF9Dq4MFC2kiElNp0ohWWv4HiUTE
WC3/gGiDnQULQ0gHYghKa6Vio8qShRo+YvHNc+/9nXPuc879VXb2tfeWJBnG
vuqkeX3Sijbst/9anxyg3+iRlUnXumTH2mQnPm1OXm9MHjh/RSfwBh9XJAsL
yTQd2ZJ0qlXWkJTioFpXNiVvV4t1PoGGqqS9NinScjGLsQgz6n/G1PLkbEsy
5+wXfqJqVfKb3tma3EWKSQn+OKulBZxqSuaru4uPXn4LuM3/Q36b+etX4zsv
P7BgQ9KjziAP03IGaJmzUvSpcxwn0Itucc/No1UvT2kLfUY/8Fpexztm5R12
T0ejnlGpzxtmUUG3iR8Tf5mf9+6qtr/Kz2l+puTtlrdHzqT1LXE3MW7fqo/+
f3m4hEEMoJafAi5aL1XrAr0v/h7q1D1vP2eGjW3JOet5/G1Xuw1j+qwxk1E6
pMZ1vGxOltUkZ8QP24/7Nq7vJxjBGEZRVHuNb93epgdHsVfeMfpOLyf1Nkkf
eYsp+pi+cNc1eY18Vlg30WFvNkqH6Aid4avDDJaY1SH6xb5oVrP1///Rv+Xp
f7U=
             "]]}, 
           RowBox[{"-", "0.6`"}]], Annotation[#, -0.6, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             GrayLevel[0], 
             Opacity[0.5], 
             CapForm["Butt"]], 
            LineBox[CompressedData["
1:eJwV0D0vQ2EYh/Grm9ZoqIlIDF7SF1r1ck4pJVUJklrEaGIh8SWsJEYfoEMn
DJ2wEF+lkjpRxWFyGX75nyfPfe77Pmfs8LRxkgD21Z2AoUkYXYYR/axC/C8D
YRXKWtJlDgIzPQW761DPQ6UMW+ZxEY70u+L7irVjzbYia2oV+0zD/Qa8e9cw
7zQ8A5+ev/Stpj365od6SnufcN6VtbdZuFG4Bo9mYD6Yr854dodr5zyZHc/n
9sk5M6uMxu1zYI8zd4h9Ds22NYFZ8JuKqjlvU3X1C+6lF/u3SvDmf4nUnYWk
fSLnDJiDSunCf7Ngj0XNaV4l7bnLH6lTQpQ=
             "]], 
            LineBox[CompressedData["
1:eJwN0MsuQ1EYhuG3mEgcRgYkknYiDqEHYqZ77x4odWjLQGJmShi6BlNi6AJc
gIhU0hEJA1dSiSJxrPYdPPn2ylr5/rVXYv+4dhQDdtWahJEpSGQhrt8IftSe
hdU8rGlF50komePTUCtAOQXREqybhwtwoL4QetWjqmcqevNMyXU4A42i/QFs
m9caS0PHNe7HdGXHv+u2/jTqfr/zLjx7Nwd1hTl4MAPz3nxxxpN3uHTOo9l0
fWpPxr60UpqwZ8+OE+/w7Xdg3noma4b+U6QN521qS5/z8KVn+28W4d13+VAr
A4P2vDpnwBzWkM58m6Idy8qpoLx2vEsXAc0/bg==
             "]], 
            
            LineBox[{10626, 16915, 16916, 16914, 16918, 16917, 11836, 16912, 
             16913, 15969, 17625, 15970, 15971, 13044, 17732, 12553, 15793, 
             12554, 13396, 13395, 16329, 16328, 17414, 17415, 16438, 16437, 
             11009, 16439, 11010, 14216, 15774, 12517, 10859, 13451, 10858, 
             12516, 12146, 17137, 12147, 17138, 11852, 12467, 17806, 10640, 
             16673, 11484, 16672, 11485, 16674, 10840, 14072, 11011, 16440, 
             15290, 11719, 17913, 11718, 13165, 13166, 11995, 15513, 11994, 
             15514, 10784, 12322, 17348, 17350, 17349, 12321, 17346, 17347, 
             17343, 17345, 17344, 17553}], 
            
            LineBox[{10633, 16925, 16926, 16924, 16928, 16927, 11850, 16922, 
             16923, 15981, 17626, 15982, 15983, 13046, 17733, 12557, 15795, 
             12558, 13402, 13401, 16336, 16335, 17421, 17422, 16442, 16441, 
             11014, 16443, 11015, 14217, 15775, 12520, 10863, 13453, 10862, 
             12519, 12148, 17139, 12149, 17140, 11856, 12468, 17807, 10647, 
             16680, 11486, 16679, 11487, 16681, 10841, 14073, 11016, 16444, 
             15292, 11725, 17914, 11724, 13172, 13173, 11997, 15515, 11996, 
             15516, 10787, 12324, 17356, 17358, 17357, 12323, 17354, 17355, 
             17351, 17353, 17352, 17554}], 
            LineBox[CompressedData["
1:eJwl0slvzHEYx/GPP8HWbbro0ZiOdqYdNFQs1RYnx6oLzm1d9NKTq+ViuUiI
Wg5SXHBD4mI5SNBKULGlkkqs5eTiJQ7vvPPN73me7+f7zLTvH9szuiTJWZS2
JB9LSZE/8Br+Wk6GtybfeC9/4X38g0f4O9/uTG7hSHeyWEzaupL7m5Lzvckd
c87xzMZk6bZkGbo3Jz2oYbaavMCoOYs9yS/8xlQlOd2XnMJJzG1PXmNM3YwZ
s3iK53iGqnubuIBGtKAZk+pLcnbggjlTuIhp8y/zJRRqcsr/Ro453JDrOq7h
kxnzqHlPp31UUUEXfuqb75ebF/QfkuGEHYzzVTs4uta9eo9x+Z9lGbCH49yh
p4zl6l6qv6LvFa9wvumuaTt7bHcN7nnEdVyPQTsYwIJsn3FA30HscH+fvn4e
8v3Jar8D9zq3cjtWYYPzLpl3YxA7MYQ/9lHnez1WohENWKe+mVvQhPXOBa7I
+tBbDnvbA57gNjlaMeLbGTPfqn0n+11vec/3eLj4/3/2FzmzcBk=
             "]], 
            LineBox[CompressedData["
1:eJwl0r1vzWEYxvHLgL+gTTAdqqLhnNP2tEeP6lEvQb1bBdWBrZY2YWYltgom
BhKhFAODeJlI2q0JaWnjpUI7USaDjxi++ebJ777v53ru/AoDZ44MLklyDaXe
5OuGZCPPcZF/FpPj25JFPsE/+CT/5n7+xU/LyRNcqKhrSQqtyastyc1a8tyc
GzzZnTRsTxpRqyeb0Y237ck7DJmztDNZhuW43ZZc75ELVzG7I5nBsLoPZsxg
Cu8xjQ73NvFarME6NOO8+qKcJdw15x5GMWb+A76PJvc9k/+THB/xSK6HGMN3
M76h6j1V+6ihC5uwqG9upx3wgv5hGS7bwRDfsYOLJffqvcRlHvm3O3u4wnv0
9KFB3ZT6W/qmudH5sbtG7WzC7la5Z5xX8ErstYM+zMu2gFP6TmO3++v6dvE+
3yfXy8i9zlWuoQtbnQ/JfBj7cRAH8Mc+Sr6XUUQbWtGjvoM70Y66c4Ursr7x
lrPe9prP8Wo5Cjjm24iZs2o/y/7CW77wSz7a8v8/+wslJXFS
             "]]}, 
           RowBox[{"-", "0.8`"}]], 
          Annotation[#, -0.8, "Tooltip"]& ], {}, {}}}], {}}, {
     DisplayFunction -> Identity, DisplayFunction -> Identity, 
      Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, AxesLabel -> {
        FormBox[
         TagBox["x", HoldForm], TraditionalForm], 
        FormBox[
         TagBox["y", HoldForm], TraditionalForm]}, FrameLabel -> {{
         FormBox[
          TagBox[
           TagBox["y", HoldForm], HoldForm], TraditionalForm], None}, {
         FormBox[
          TagBox[
           TagBox["x", HoldForm], HoldForm], TraditionalForm], None}}, 
      DisplayFunction -> Identity, AspectRatio -> 1, AxesLabel -> {
        FormBox["x", TraditionalForm], 
        FormBox["y", TraditionalForm]}, DisplayFunction :> Identity, Frame -> 
      True, FrameLabel -> {{
         FormBox[
          TagBox["y", HoldForm], TraditionalForm], None}, {
         FormBox[
          TagBox["x", HoldForm], TraditionalForm], None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], 
      Method -> {
       "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "GridLinesInFront" -> True}, PlotRange -> 
      NCache[{{0, 4 Pi}, {0, 2 Pi}}, {{0, 12.566370614359172`}, {
         0, 6.283185307179586}}], PlotRangeClipping -> True, 
      PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
    FormBox[
     FormBox[
      TemplateBox[{
        FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            GraphicsBox[{
              
              RasterBox[{{{0.1666657472237983, 0.16666649737240605`, 
               0.4999991997396524}}, {{0.3171873000699738, 
               0.31603681696299807`, 0.6496893058169614}}, {{
               0.5379037568333842, 0.36737229458984033`, 
               0.5548900164432168}}, {{0.722523019234533, 
               0.41322379584945557`, 0.4116304105601144}}, {{
               0.9105146539369272, 0.47049277129874373`, 
               0.21229090891907265`}}, {{1., 0.5602467831651701, 
               0.1234442721984838}}, {{1., 0.6748351954809532, 
               0.2688258547237557}}, {{1., 0.7849858941048495, 
               0.3960872333795988}}, {{1., 0.8831912520058811, 
               0.5342719764072857}}, {{1., 0.9330010906713122, 
               0.7344393004636443}}}, {{
                 Rational[-15, 2], 
                 Rational[-225, 2]}, {
                 Rational[15, 2], 
                 Rational[225, 2]}}], {Antialiasing -> False, 
               AbsoluteThickness[0.1], 
               Directive[
                Opacity[0.3], 
                GrayLevel[0]], 
               LineBox[
                NCache[{{
                   Rational[15, 2], 
                   Rational[-225, 2]}, {
                   Rational[-15, 2], 
                   Rational[-225, 2]}, {
                   Rational[-15, 2], 
                   Rational[225, 2]}, {
                   Rational[15, 2], 
                   Rational[225, 2]}, {
                   Rational[15, 2], 
                   Rational[-225, 2]}}, {{7.5, -112.5}, {-7.5, -112.5}, {-7.5,
                  112.5}, {7.5, 112.5}, {7.5, -112.5}}]]}, {
               CapForm[None], {{
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], -90.}, {
                    Rational[15, 2], -90.}}, {{-7.5, -90.}, {7.5, -90.}}]]}, {
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], -67.50000000000001}, {
                    Rational[
                    15, 2], -67.50000000000001}}, {{-7.5, \
-67.50000000000001}, {7.5, -67.50000000000001}}]]}, {
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], -45.}, {
                    Rational[15, 2], -45.}}, {{-7.5, -45.}, {7.5, -45.}}]]}, {
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], -22.499999999999996`}, {
                    Rational[
                    15, 2], -22.499999999999996`}}, {{-7.5, \
-22.499999999999996`}, {7.5, -22.499999999999996`}}]]}, {
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], 0.}, {
                    Rational[15, 2], 0.}}, {{-7.5, 0.}, {7.5, 0.}}]]}, {
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], 22.499999999999996`}, {
                    Rational[15, 2], 22.499999999999996`}}, {{-7.5, 
                   22.499999999999996`}, {7.5, 22.499999999999996`}}]]}, {
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], 45.000000000000014`}, {
                    Rational[15, 2], 45.000000000000014`}}, {{-7.5, 
                   45.000000000000014`}, {7.5, 45.000000000000014`}}]]}, {
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], 67.50000000000001}, {
                    Rational[15, 2], 67.50000000000001}}, {{-7.5, 
                   67.50000000000001}, {7.5, 67.50000000000001}}]]}, {
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], 90.}, {
                    Rational[15, 2], 90.}}, {{-7.5, 90.}, {7.5, 90.}}]]}, {
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5], 
                  CapForm["Butt"]], 
                 CapForm["Butt"], 
                 LineBox[
                  NCache[{{
                    Rational[-15, 2], 112.5}, {
                    Rational[15, 2], 112.5}}, {{-7.5, 112.5}, {7.5, 
                   112.5}}]]}}}, 
              StyleBox[{Antialiasing -> False, 
                StyleBox[
                 LineBox[{{7.5, -112.5}, {7.5, 112.5}}], {
                  Directive[
                   AbsoluteThickness[0.2], 
                   Opacity[0.3], 
                   GrayLevel[0]]}, StripOnInput -> False], 
                StyleBox[
                 StyleBox[{{
                    StyleBox[
                    LineBox[{{{7.5, -90.}, 
                    Offset[{4., 0}, {7.5, -90.}]}, {{7.5, -67.50000000000001}, 
                    Offset[{4., 0}, {7.5, -67.50000000000001}]}, {{7.5, -45.}, 
                    Offset[{4., 0}, {7.5, -45.}]}, {{
                    7.5, -22.499999999999996`}, 
                    Offset[{4., 0}, {7.5, -22.499999999999996`}]}, {{7.5, 0.}, 
                    Offset[{4., 0}, {7.5, 0.}]}, {{7.5, 22.499999999999996`}, 
                    Offset[{4., 0}, {7.5, 22.499999999999996`}]}, {{7.5, 
                    45.000000000000014`}, 
                    Offset[{4., 0}, {7.5, 45.000000000000014`}]}, {{7.5, 
                    67.50000000000001}, 
                    Offset[{4., 0}, {7.5, 67.50000000000001}]}, {{7.5, 90.}, 
                    Offset[{4., 0}, {7.5, 90.}]}}], {
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]]}, StripOnInput -> False]}, 
                   StyleBox[
                    StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"-0.8\"", ShowStringCharacters -> False], -0.8,
                     AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -90.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"-0.6\"", ShowStringCharacters -> False], -0.6,
                     AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -67.50000000000001}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"-0.4\"", ShowStringCharacters -> False], -0.4,
                     AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -45.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"-0.2\"", ShowStringCharacters -> False], -0.2,
                     AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -22.499999999999996`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 0.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.2\"", ShowStringCharacters -> False], 0.2, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 22.499999999999996`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.4\"", ShowStringCharacters -> False], 0.4, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 45.000000000000014`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.6\"", ShowStringCharacters -> False], 0.6, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 67.50000000000001}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.8\"", ShowStringCharacters -> False], 0.8, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 90.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}]}, {
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False]}, {}}, {{
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False], {"GraphicsLabel"}, 
                    StripOnInput -> False]}, {"GraphicsTicks"}, StripOnInput -> 
                  False], {{
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]]}}, StripOnInput -> False]}, {
               "GraphicsAxes"}, StripOnInput -> False]}, PlotRangePadding -> 
             Scaled[0.02], PlotRange -> All, Frame -> True, 
             FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
             Opacity[0], FrameTicksStyle -> Opacity[0], 
             ImageSize -> {Automatic, 225}, BaseStyle -> {}], Alignment -> 
            Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]}, "BarLegend", DisplayFunction -> (#& ), 
       InterpretationFunction :> (RowBox[{"BarLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{
                  RowBox[{"Blend", "[", 
                    RowBox[{"\"WANEGradient\"", ",", "#1"}], "]"}], "&"}], 
                ",", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"-", "1.`"}], ",", "1.`"}], "}"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"-", "0.8`"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"-", "0.6`"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"-", "0.4`"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"-", "0.2`"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"0.`", ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"0.2`", ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"0.4`", ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"0.6`", ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"0.8`", ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"1.`", ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                  "}"}]}], "}"}], ",", 
            RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "}"}]}], ",", 
            RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
            RowBox[{"LegendMarkerSize", "\[Rule]", "225"}], ",", 
            RowBox[{"Charting`AxisLabel", "\[Rule]", "None"}], ",", 
            RowBox[{"ScalingFunctions", "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"Identity", ",", "Identity"}], "}"}]}], ",", 
            RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
            RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}]}], "]"}]& )], 
      TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(FormBox[
     GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}], TraditionalForm]& ),
   Editable->True,
   InterpretationFunction->(FormBox[
     RowBox[{"Legended", "(", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], ")"}], TraditionalForm]& )], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.842697570811819*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"93ef9267-0580-45f6-95e9-f41d66a36bc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{
        RowBox[{"table", " ", "of", " ", 
          RowBox[{"x", "^", "2"}]}], ",", " ", 
        RowBox[{"x", " ", "from", " ", "0", " ", "to", " ", "100"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"table of x^2, x from 0 to 100\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     Table[$CellContext`x^2, {$CellContext`x, 0, 100}]], 
   "inputpredictions" -> {}, "otherpredictions" -> {"FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[2]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{551., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[40]:=",ExpressionUUID->"f284987a-fa3b-41a8-870f-869997eaea36"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"x", "^", "2"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "0", ",", " ", "100"}], "}"}]}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Table", 4}}}},
 CellChangeTimes->{3.8427033604062004`*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"30a13a1b-5e91-44eb-8da4-cccb70b5d231"],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
   "0", ",", "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", 
    "49", ",", "64", ",", "81", ",", "100", ",", "121", ",", "144", ",", 
    "169", ",", "196", ",", "225", ",", "256", ",", "289", ",", "324", ",", 
    "361", ",", "400", ",", "441", ",", "484", ",", "529", ",", "576", ",", 
    "625", ",", "676", ",", "729", ",", "784", ",", "841", ",", "900", ",", 
    "961", ",", "1024", ",", "1089", ",", "1156", ",", "1225", ",", "1296", 
    ",", "1369", ",", "1444", ",", "1521", ",", "1600", ",", "1681", ",", 
    "1764", ",", "1849", ",", "1936", ",", "2025", ",", "2116", ",", "2209", 
    ",", "2304", ",", "2401", ",", "2500", ",", "2601", ",", "2704", ",", 
    "2809", ",", "2916", ",", "3025", ",", "3136", ",", "3249", ",", "3364", 
    ",", "3481", ",", "3600", ",", "3721", ",", "3844", ",", "3969", ",", 
    "4096", ",", "4225", ",", "4356", ",", "4489", ",", "4624", ",", "4761", 
    ",", "4900", ",", "5041", ",", "5184", ",", "5329", ",", "5476", ",", 
    "5625", ",", "5776", ",", "5929", ",", "6084", ",", "6241", ",", "6400", 
    ",", "6561", ",", "6724", ",", "6889", ",", "7056", ",", "7225", ",", 
    "7396", ",", "7569", ",", "7744", ",", "7921", ",", "8100", ",", "8281", 
    ",", "8464", ",", "8649", ",", "8836", ",", "9025", ",", "9216", ",", 
    "9409", ",", "9604", ",", "9801", ",", "10000"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.842703360706133*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"11d21030-7bf1-4a46-a875-4d36c023d415"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"x", "^", "2"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", "0", ",", " ", "100"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8427033525005264`*^9, 
  3.8427033525114384`*^9}},ExpressionUUID->"85325939-d730-4d8e-b86b-\
e250c9c948c2"],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
   "0", ",", "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", 
    "49", ",", "64", ",", "81", ",", "100", ",", "121", ",", "144", ",", 
    "169", ",", "196", ",", "225", ",", "256", ",", "289", ",", "324", ",", 
    "361", ",", "400", ",", "441", ",", "484", ",", "529", ",", "576", ",", 
    "625", ",", "676", ",", "729", ",", "784", ",", "841", ",", "900", ",", 
    "961", ",", "1024", ",", "1089", ",", "1156", ",", "1225", ",", "1296", 
    ",", "1369", ",", "1444", ",", "1521", ",", "1600", ",", "1681", ",", 
    "1764", ",", "1849", ",", "1936", ",", "2025", ",", "2116", ",", "2209", 
    ",", "2304", ",", "2401", ",", "2500", ",", "2601", ",", "2704", ",", 
    "2809", ",", "2916", ",", "3025", ",", "3136", ",", "3249", ",", "3364", 
    ",", "3481", ",", "3600", ",", "3721", ",", "3844", ",", "3969", ",", 
    "4096", ",", "4225", ",", "4356", ",", "4489", ",", "4624", ",", "4761", 
    ",", "4900", ",", "5041", ",", "5184", ",", "5329", ",", "5476", ",", 
    "5625", ",", "5776", ",", "5929", ",", "6084", ",", "6241", ",", "6400", 
    ",", "6561", ",", "6724", ",", "6889", ",", "7056", ",", "7225", ",", 
    "7396", ",", "7569", ",", "7744", ",", "7921", ",", "8100", ",", "8281", 
    ",", "8464", ",", "8649", ",", "8836", ",", "9025", ",", "9216", ",", 
    "9409", ",", "9604", ",", "9801", ",", "10000"}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.8426975909472494`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"3afb35b2-ad67-4451-b27a-65f655bca2ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query[
    "boxes" -> RowBox[{"graph", " ", "%"}], "json" -> 
     "[{\"t\":0,\"v\":\"graph %\"}]"], "assumptions" -> {}, "parse" -> Defer[
     ListPlot[
      Out[-1]]], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[4]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1231., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[41]:=",ExpressionUUID->"03f8ec14-ee26-4e0e-b614-c87e2053ca13"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", "%", "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"ListPlot", 0}, {"Out", 3}}}},
 CellChangeTimes->{3.8427033678088284`*^9},
 CellLabel->"In[41]:=",ExpressionUUID->"2723cfbd-0629-42fb-a707-89d5bafb5385"],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, 
    {LABColor[0.676094128119322, 0.4485405917061707, 0.7359231649869302], 
     PointSize[0.009166666666666668], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJxdlM1LFGEAh1/Ewx6X6NDBwxSLZEiUZWWlvm1bbWVfm5VdIhcXPAiKRCCB
vCrGFBFjX2KFqW1W9mnfWeq4evDa/7AXb9XNm+Xv2cO6sDw888xvZ1h2Z2O6
PZUpMcZk/r3/U6/f9ab4ZYuPR/DoGm6C6+E2uAHWwDIYh57okms+5zSMibYR
L4cX4Wb6JXwLTMNK0cvgW7lea/F9em34dtgBq8RoJ76D613Bd4rBVbwadsFd
9Gv4bvbd+B7Rd3jhe+qFe+l9+D7utx/fLy5ex2tF5+N1YvImXs/+Fm7FyG12
uAngAbF0gI5H79DjYuwuHbf36AfFlvt0PHhAT4gLg3TcDMFDYuIhHQ8e0Q+L
+cd03A7Tj4jZJ3TcH6Hzu4uP0gu/wzF4VMzhDvef0o+JqSwd957Rj4t/cYcv
jtMbxLHndNy9oJ8Q0y85jicn6CfFqld03HtNPyWue0PHI2/p/M9K3om28L97
z/l4Dx7ipZOcd0a8gVs8+oE9PoSHeOwj+5Q4iVvcfmKP/8JDvOUz+7PiMm7x
4At7vOIre3wBNzxXmr+xLzxnvrPHR/EQT0xx3jlxCbd48IM9XvOTPZ7HzXlx
YJo9bmfY43/wEM/Osr+wSlcZspMbH3f0PB7S43Psm9RHcNvE8Rx7+mU8pOdw
nsMuNs+e57I/b1cA5ETGgg==
      "]]}, {{}, {}}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0., 0.},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}},
   PlotRange->{{0., 101.}, {0., 10000.}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8427033683125715`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"4c1366c9-d91f-413e-bf1a-96a28b9fb8a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{"piechart", " ", "of", " ", 
        RowBox[{"(", 
          RowBox[{"2", ",", "3", ",", "6", ",", "10", ",", "10", ",", "10"}], 
          ")"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"piechart of (2,3,6,10,10,10)\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     PieChart[{2, 3, 6, 10, 10, 10}]], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1231., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[42]:=",ExpressionUUID->"4c6afc19-d1ca-46f0-aa6f-ef8033f328cc"],

Cell[BoxData[
 RowBox[{"PieChart", "[", 
  RowBox[{"{", 
   RowBox[{
   "2", ",", " ", "3", ",", " ", "6", ",", " ", "10", ",", " ", "10", ",", 
    " ", "10"}], "}"}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"PieChart", 0}}}},
 CellChangeTimes->{3.842703407297887*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"fe0765dc-2dcc-4376-a191-1babfd9b8e02"],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, 
    DynamicModuleBox[{DynamicChart`click$55097$55151 = False, 
     DynamicChart`click$55105$55151 = False, DynamicChart`click$55109$55151 = 
     False, DynamicChart`click$55113$55151 = False, 
     DynamicChart`click$55117$55151 = False, DynamicChart`click$55121$55151 = 
     False}, {
      {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[0.5]}], {{{}, {
          {RGBColor[
           0.9948820007579617, 0.6019211576226018, 0.22183262585200214`], 
           EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
           TagBox[GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {2.8350958093371306`, 
                    3.141592653589793}]},
                   
                   ImageSizeCache->{{31.585786437626894`, 
                    181.41421356237308`}, {-48.76714155586638, \
-1.5857864376269006`}}],
                  "DelayedMouseEffectStyle"],
                 StatusArea[#, 2]& ,
                 TagBoxNote->"2"],
                StyleBox["2", {}, StripOnInput -> False]],
               Annotation[#, 
                Style[2, {}], "Tooltip"]& ],
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55097$55151, 
                  FEPrivate`Not[DynamicChart`click$55097$55151]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], Dynamic[
             FEPrivate`If[
              DynamicChart`click$55097$55151, {{{1., 0.}, {0., 
                1.}}, {-0.19765608475606972`, 0.030529856843774905`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$55097$55151}]],
            "DelayedClickEffect"]}, 
          {RGBColor[
           0.6160419146360153, 0.6000934239952198, 0.9957517025631449], 
           EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
           TagBox[GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {2.3753505429581363`, 
                    2.8350958093371306`}]},
                   
                   ImageSizeCache->{{38.43651680555212, 
                    181.4142135623731}, {-106.34879117883264`, \
-1.5857864376268935`}}],
                  "DelayedMouseEffectStyle"],
                 StatusArea[#, 3]& ,
                 TagBoxNote->"3"],
                StyleBox["3", {}, StripOnInput -> False]],
               Annotation[#, 
                Style[3, {}], "Tooltip"]& ],
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55105$55151, 
                  FEPrivate`Not[DynamicChart`click$55105$55151]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], Dynamic[
             FEPrivate`If[
              DynamicChart`click$55105$55151, {{{1., 0.}, {0., 
                1.}}, {-0.17191392139744024`, 0.10220373588942207`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$55105$55151}]],
            "DelayedClickEffect"]}, 
          {RGBColor[0.7116601265506459, 0.836925003686163, 0.2], EdgeForm[{
           GrayLevel[0], Opacity[0.5]}], 
           TagBox[GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.455860010200148, 
                    2.3753505429581363`}]},
                   
                   ImageSizeCache->{{72.66911217831121, 
                    198.27267709593798`}, {-151.4142135623731, \
-1.5857864376268935`}}],
                  "DelayedMouseEffectStyle"],
                 StatusArea[#, 6]& ,
                 TagBoxNote->"6"],
                StyleBox["6", {}, StripOnInput -> False]],
               Annotation[#, 
                Style[6, {}], "Tooltip"]& ],
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55109$55151, 
                  FEPrivate`Not[DynamicChart`click$55109$55151]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], Dynamic[
             FEPrivate`If[
              DynamicChart`click$55109$55151, {{{1., 0.}, {0., 
                1.}}, {-0.06760337568170052, 0.18822800959591235`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$55109$55151}]],
            "DelayedClickEffect"]}, 
          {RGBColor[
           0.9200007501325951, 0.4476781071134906, 0.3440000892006805], 
           EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
           TagBox[GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-0.07662421106316586, 
                    1.455860010200148}]},
                   ImageSizeCache->{{178.5857864376269, 
                    328.4142135623731}, {-150.44432075704535`, 
                    9.66695372933799}}],
                  "DelayedMouseEffectStyle"],
                 StatusArea[#, 10]& ,
                 TagBoxNote->"10"],
                StyleBox["10", {}, StripOnInput -> False]],
               Annotation[#, 
                Style[10, {}], "Tooltip"]& ],
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55113$55151, 
                  FEPrivate`Not[DynamicChart`click$55113$55151]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], Dynamic[
             FEPrivate`If[
              DynamicChart`click$55113$55151, {{{1., 0.}, {0., 1.}}, {
                0.15429783596438862`, 0.12724848846531195`}}, {{1, 0}, {0, 
               1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$55113$55151}]],
            "DelayedClickEffect"]}, 
          {RGBColor[
           0.4592676233335527, 0.7167773967476684, 0.9768299317437494], 
           EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
           TagBox[GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-1.6091084323264795`, -0.07662421106316586}]},
                   
                   ImageSizeCache->{{172.9552845851917, 
                    327.982886336383}, {-4.414213562373078, 
                    145.4142135623731}}],
                  "DelayedMouseEffectStyle"],
                 StatusArea[#, 10]& ,
                 TagBoxNote->"10"],
                StyleBox["10", {}, StripOnInput -> False]],
               Annotation[#, 
                Style[10, {}], "Tooltip"]& ],
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55117$55151, 
                  FEPrivate`Not[DynamicChart`click$55117$55151]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], Dynamic[
             FEPrivate`If[
              DynamicChart`click$55117$55151, {{{1., 0.}, {0., 1.}}, {
                0.13306514003311307`, -0.14931064432239255`}}, {{1, 0}, {0, 
               1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$55117$55151}]],
            "DelayedClickEffect"]}, 
          {RGBColor[1., 0.7999991369651509, 0.20000186790796587`], EdgeForm[{
           GrayLevel[0], Opacity[0.5]}], 
           TagBox[GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -1.6091084323264795`}]},
                   
                   ImageSizeCache->{{31.585786437626894`, 
                    181.41421356237308`}, {-4.414213562373078, 
                    145.30634217684218`}}],
                  "DelayedMouseEffectStyle"],
                 StatusArea[#, 10]& ,
                 TagBoxNote->"10"],
                StyleBox["10", {}, StripOnInput -> False]],
               Annotation[#, 
                Style[10, {}], "Tooltip"]& ],
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55121$55151, 
                  FEPrivate`Not[DynamicChart`click$55121$55151]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], Dynamic[
             FEPrivate`If[
              DynamicChart`click$55121$55151, {{{1., 0.}, {0., 
                1.}}, {-0.1441043187201574, -0.13868650015844836`}}, {{1, 
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$55121$55151}]],
            "DelayedClickEffect"]}}}, {}}, {}}, {{{
         TagBox[GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[{{}, {}},
               StatusArea[#, 2]& ,
               TagBoxNote->"2"],
              StyleBox["2", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[2, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55097$55151, 
                FEPrivate`Not[DynamicChart`click$55097$55151]], 
              PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
              True}]], Dynamic[
           FEPrivate`If[
            DynamicChart`click$55097$55151, {{{1., 0.}, {0., 
              1.}}, {-0.19765608475606972`, 0.030529856843774905`}}, {{1, 
             0}, {0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$55097$55151}]],
          "DelayedClickEffect"], 
         TagBox[GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[{{}, {}},
               StatusArea[#, 3]& ,
               TagBoxNote->"3"],
              StyleBox["3", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[3, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55105$55151, 
                FEPrivate`Not[DynamicChart`click$55105$55151]], 
              PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
              True}]], Dynamic[
           FEPrivate`If[
            DynamicChart`click$55105$55151, {{{1., 0.}, {0., 
              1.}}, {-0.17191392139744024`, 0.10220373588942207`}}, {{1, 0}, {
             0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$55105$55151}]],
          "DelayedClickEffect"], 
         TagBox[GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[{{}, {}},
               StatusArea[#, 6]& ,
               TagBoxNote->"6"],
              StyleBox["6", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[6, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55109$55151, 
                FEPrivate`Not[DynamicChart`click$55109$55151]], 
              PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
              True}]], Dynamic[
           FEPrivate`If[
            DynamicChart`click$55109$55151, {{{1., 0.}, {0., 
              1.}}, {-0.06760337568170052, 0.18822800959591235`}}, {{1, 0}, {
             0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$55109$55151}]],
          "DelayedClickEffect"], 
         TagBox[GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[{{}, {}},
               StatusArea[#, 10]& ,
               TagBoxNote->"10"],
              StyleBox["10", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[10, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55113$55151, 
                FEPrivate`Not[DynamicChart`click$55113$55151]], 
              PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
              True}]], Dynamic[
           FEPrivate`If[
            DynamicChart`click$55113$55151, {{{1., 0.}, {0., 1.}}, {
              0.15429783596438862`, 0.12724848846531195`}}, {{1, 0}, {0, 
             1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$55113$55151}]],
          "DelayedClickEffect"], 
         TagBox[GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[{{}, {}},
               StatusArea[#, 10]& ,
               TagBoxNote->"10"],
              StyleBox["10", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[10, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55117$55151, 
                FEPrivate`Not[DynamicChart`click$55117$55151]], 
              PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
              True}]], Dynamic[
           FEPrivate`If[
            DynamicChart`click$55117$55151, {{{1., 0.}, {0., 1.}}, {
              0.13306514003311307`, -0.14931064432239255`}}, {{1, 0}, {0, 
             1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$55117$55151}]],
          "DelayedClickEffect"], 
         TagBox[GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[{{}, {}},
               StatusArea[#, 10]& ,
               TagBoxNote->"10"],
              StyleBox["10", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[10, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$55121$55151, 
                FEPrivate`Not[DynamicChart`click$55121$55151]], 
              PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
              True}]], Dynamic[
           FEPrivate`If[
            DynamicChart`click$55121$55151, {{{1., 0.}, {0., 
              1.}}, {-0.1441043187201574, -0.13868650015844836`}}, {{1, 0}, {
             0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$55121$55151}]],
          "DelayedClickEffect"]}, {}}, {}}, {}, {}},
     DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
   ContentSelectable->False,
   DisplayFunction->Identity,
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   PlotRange->{{-1., 1.}, {-1., 1.}},
   PlotRangePadding->Scaled[0.09166666666666669]], TraditionalForm]], "Output",
 CellChangeTimes->{3.8427034076611004`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"79f76317-7972-48d0-87eb-012a9f45dc7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{"histogram", " ", "of", " ", 
        RowBox[{"(", 
          RowBox[{"2", ",", "3", ",", "6", ",", "10", ",", "10", ",", "10"}], 
          ")"}]}], "json" -> 
     "[{\"t\":0,\"v\":\"histogram of (2,3,6,10,10,10)\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     Histogram[{2, 3, 6, 10, 10, 10}]], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1231., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[43]:=",ExpressionUUID->"957b7f59-b351-4dba-8acc-cff292de7f4b"],

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"{", 
   RowBox[{
   "2", ",", " ", "3", ",", " ", "6", ",", " ", "10", ",", " ", "10", ",", 
    " ", "10"}], "}"}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Histogram", 1}}}},
 CellChangeTimes->{3.8427034502166524`*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"6ddb9887-0246-4201-b5e1-3e94892591c2"],

Cell[BoxData[
 FormBox[
  GraphicsBox[{
    {RGBColor[0.9961615005684713, 0.7014408682169514, 0.41637446938900163`], 
     EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], {}, 
     {RGBColor[0.9961615005684713, 0.7014408682169514, 0.41637446938900163`], 
      EdgeForm[{Opacity[0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0., 0}, {5., 2.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{23.312049639711766`, 
            133.1795436349079}, {-38.70806787738984, 92.75303744488319}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 2]& ,
         TagBoxNote->"2"],
        StyleBox["2", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[2, {}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{5., 0}, {10., 1.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{132.6795436349079, 242.54703763010406`}, {
            26.772484783746677`, 92.75303744488319}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1]& ,
         TagBoxNote->"1"],
        StyleBox["1", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1, {}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{10., 0}, {15., 3.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{242.04703763010406`, 
            351.9145316253002}, {-104.18862053852634`, 92.75303744488319}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 3]& ,
         TagBoxNote->"3"],
        StyleBox["3", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[3, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{-0.3, 0},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   PlotRange->{{0., 15.}, {All, All}},
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8427034505705547`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"0848c41a-926d-4c35-a21a-fc7d7bac7a5b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Special Characters", "Section", "NLI",
 CellChangeTimes->{{3.8427034637158213`*^9, 
  3.8427034675670905`*^9}},ExpressionUUID->"5dee938b-9655-4da2-82d9-\
ee358ecc49f4"],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{"\[Integral]", 
        RowBox[{"cos", 
          RowBox[{"(", 
            RowBox[{"2", "x"}], ")"}]}]}], "json" -> 
     "[{\"t\":0,\"v\":\"\[AHat]\.88\[LeftGuillemet]cos(2x)\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     Integrate[
      Cos[2 Global`x], Global`x]], 
   "inputpredictions" -> {{
     "InputMathOperation$PlotFunctionWithIntegralIndefinite", 
      Predictions`Prediction[
      0.99, "plotting", "plot function and integral", HoldComplete[
        Plot[{
          Cos[2 Global`x], Rational[1, 2] Sin[2 Global`x]}, {
         Global`x, -12.5663706143591729538`2.6989700043360187, 
          12.5663706143591729538`2.6989700043360187}, 
         PlotLegends -> {"f", "\[Integral]f"}]]& ], Predictions`InInput}, {
     "InputMathOperation$PeriodIntegrals", 
      Predictions`Prediction[
      0.98, "integration", 
       "", {{"definite integral over a half-period", HoldComplete[
          Integrate[
           Cos[2 Global`x], {Global`x, 0, Rational[1, 2] Pi}]]& }, {
        "definite integral over one period starting at 0", HoldComplete[
          Integrate[
           Cos[2 Global`x], {Global`x, 0, Pi}]]& }, {
        "definite integral over one period centered at 0", HoldComplete[
          Integrate[
           Cos[2 Global`x], {
           Global`x, -(Rational[1, 2] Pi), Rational[1, 2] Pi}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.97, "integration", 
       "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[
           Cos[2 Global`x], {Global`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[
           Cos[2 Global`x], {Global`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.96, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        D[
         Cos[2 Global`x], Global`x]]& ], Predictions`InInput}, {
     "InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.95, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[
         Cos[2 Global`x]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.94, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[
           Cos[2 Global`x], {Global`x}]]& }, {"function range", HoldComplete[
          FunctionRange[
           Cos[2 Global`x], {Global`x}, {Global`y}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$RMSIntegral", 
      Predictions`Prediction[
      0.5, "integration", "definite integral mean square", HoldComplete[
        Integrate[Pi^(-1) Cos[2 Global`x]^2, {Global`x, 0, Pi}]]& ], 
      Predictions`InInput}, {"InputMathOperation$TrigAlgebra", 
      Predictions`Prediction[
      0.5, "trigonometry", "", {{"expand trig functions", HoldComplete[
          Integrate[
           TrigExpand[
            Cos[2 Global`x]], Global`x]]& }, {
        "factor trig functions", HoldComplete[
          Integrate[
           TrigFactor[
            Cos[2 Global`x]], Global`x]]& }, {
        "reduce trig products and powers", HoldComplete[
          Integrate[
           TrigReduce[
            Cos[2 Global`x]], Global`x]]& }, {
        "convert trig functions to exponentials", HoldComplete[
          Integrate[
           TrigToExp[
            Cos[2 Global`x]], Global`x]]& }}], Predictions`InInput}, {
     "InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
           Cos[2 Global`x], Global`x]]& }, {"even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
           Cos[2 Global`x], Global`x]]& }, {"odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
           Cos[2 Global`x], Global`x]]& }}], Predictions`InInput}, {
     "InputMathOperation$FunctionPeriod", 
      Predictions`Prediction[
      0.5, "properties", "function period", HoldComplete[
        FunctionPeriod[
         Cos[2 Global`x], Global`x]]& ], Predictions`InInput}, {
     "InputMathOperation$InflectionPoints", 
      Predictions`Prediction[
      0.5, "analysis", "inflection points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["InflectionPoints"][
          Cos[2 Global`x], 
          Hold[Global`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[Global`y == Cos[2 Global`x], Global`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$Rotate90", 
      Predictions`Prediction[
      0.5, "trigonometry", "make trig function arguments imaginary", 
       HoldComplete[
        Integrate[
         Cos[2 (Complex[0, 1] Global`x)], Global`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotFunction", 
      Predictions`Prediction[0.5, "plotting", "plot function", HoldComplete[
        Plot[
         Cos[2 Global`x], {
         Global`x, -12.5663706143591729538`2.6989700043360187, 
          12.5663706143591729538`2.6989700043360187}]]& ], 
      Predictions`InInput}, {"InputMathOperation$PeriodPlots", 
      Predictions`Prediction[
      0.5, "plotting", "", {{"plot one function period", HoldComplete[
          Plot[
           Cos[2 Global`x], {Global`x, 0, Pi}]]& }, {
        "plot two function periods", HoldComplete[
          Plot[
           Cos[2 Global`x], {Global`x, 0, 2 Pi}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.5, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[Cos[2 Global`x] == 0, {
           Hold[Global`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$ComplementTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their cofunctions", 
       HoldComplete[
        Integrate[
         Sin[2 Global`x], Global`x]]& ], Predictions`InInput}, {
     "InputMathOperation$InverseTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their inverses", 
       HoldComplete[
        Integrate[
         ArcCos[2 Global`x], Global`x]]& ], Predictions`InInput}, {
     "InputMathOperation$ReciprocalTrigFunctions", 
      Predictions`Prediction[
      0.5, "trigonometry", "replace trig functions by their reciprocals", 
       HoldComplete[
        Integrate[
         Sec[2 Global`x], Global`x]]& ], Predictions`InInput}, {
     "InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][
          Cos[2 Global`x], 
          Hold[Global`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 Global`x], Global`x -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[Rational[1, 2] Pi], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 Global`x], Global`x -> Rational[1, 2] Pi]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[Pi], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 Global`x], Global`x -> Pi]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 Global`x], Global`x -> DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
           Cos[2 Global`x], Global`x -> DirectedInfinity[1]]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[
         Cos[2 Global`x], {Global`x, 0, 5}]]& ], Predictions`InInput}}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[Automatic], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]], Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[2]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1231., {52., 30.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[45]:=",ExpressionUUID->"cf50521e-3e9c-42c3-adea-6183ca6d6efe"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Cos", "[", 
    RowBox[{"2", "*", "x"}], "]"}], ",", " ", "x"}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"Integrate", 3}, {"Cos", 1}}}},
 CellChangeTimes->{3.842703554778612*^9},
 CellLabel->"In[45]:=",ExpressionUUID->"cb08f0f7-81a2-4aa6-a4ce-0b3340553686"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"sin", "(", 
     RowBox[{"2", " ", "x"}], ")"}]}], "+", 
   TemplateBox[{"1"},
    "CTraditional"]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.842703555065749*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"6c77c7f5-e286-4656-be00-7ddfb7fd8d9a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query[
    "boxes" -> RowBox[{"\[Pi]", " ", "to", " ", "100", " ", "digits"}], 
     "json" -> 
     "[{\"t\":0,\"v\":\"\[CapitalIDoubleDot]\.80 to 100 digits\"}]"], 
   "assumptions" -> {}, "parse" -> Defer[
     N[Pi, 100]], "inputpredictions" -> {}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1231., {42., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[46]:=",ExpressionUUID->"9415b871-eef2-48f2-9113-a843a9715287"],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Pi", ",", " ", "100"}], "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"N", 2}}}},
 CellChangeTimes->{3.84270356906454*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"2ac095a6-a8b4-4302-b080-d22eab539439"],

Cell[BoxData[
 FormBox["3.\
141592653589793238462643383279502884197169399375105820974944592307816406286208\
9986280348253421170679821480865191976`100.", TraditionalForm]], "Output",
 CellChangeTimes->{3.842703569085872*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"7ddbdd6e-8911-4baa-bf5a-bc9c3fc21a30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = Association[
  "query" -> Typeset`Query["boxes" -> RowBox[{"limit", " ", "of", " ", 
        RowBox[{"1", "/", "\[Beta]"}], "  ", "as", " ", "\[Beta]", " ", 
        "approaches", " ", "\[Infinity]"}], "json" -> 
     "[{\"t\":0,\"v\":\"limit of 1\\/\[CapitalIHat]\.b2  as \
\[CapitalIHat]\.b2 approaches \[AHat]\.88\.9e\"}]"], "assumptions" -> {}, 
   "parse" -> Defer[
     Limit[1/$CellContext`\[Beta], $CellContext`\[Beta] -> Infinity]], 
   "inputpredictions" -> {{"InputMathOperation$SeriesAtLimit", 
      Predictions`Prediction[0.99, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm[$CellContext`\[Beta]], LineBreakWithin -> False], 
          ImageSize -> {150}, BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[
            DirectedInfinity[1]], LineBreakWithin -> False], 
          ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
        Series[
        1/$CellContext`\[Beta], {$CellContext`\[Beta], Infinity, 3}]]& ], 
      Predictions`InInput}, {"InputMathOperation$Limits", 
      Predictions`Prediction[0.98, "limits", "", {{
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["\[Beta]"], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline]}], HoldComplete[
          Limit[1/$CellContext`\[Beta], $CellContext`\[Beta] -> 0]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["\[Beta]"], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          1/$CellContext`\[Beta], $CellContext`\[Beta] -> 
           DirectedInfinity[-1]]]& }, {
         Row[{"limit at ", 
           Pane[
            Style[
             HoldForm["\[Beta]"], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          Limit[
          1/$CellContext`\[Beta], $CellContext`\[Beta] -> 
           DirectedInfinity[1]]]& }}], Predictions`InInput}, {
     "InputMathOperation$ChangeDirection", 
      Predictions`Prediction[
      0.97, "limits", "", {{"limit from above", HoldComplete[
          Limit[
          1/$CellContext`\[Beta], $CellContext`\[Beta] -> Infinity, Direction -> 
           "FromAbove"]]& }, {"limit from below", HoldComplete[
          Limit[
          1/$CellContext`\[Beta], $CellContext`\[Beta] -> Infinity, Direction -> 
           "FromBelow"]]& }}], Predictions`InInput}, {
     "InputMathOperation$AlternativeLimits", 
      Predictions`Prediction[0.96, "limits", "", {{"min limit", HoldComplete[
          MinLimit[
          1/$CellContext`\[Beta], $CellContext`\[Beta] -> Infinity]]& }, {
        "max limit", HoldComplete[
          MaxLimit[
          1/$CellContext`\[Beta], $CellContext`\[Beta] -> Infinity]]& }}], 
      Predictions`InInput}, {"InputMathOperation$AnalogousDiscreteLimit", 
      Predictions`Prediction[0.95, "limits", "", {{
         Row[{"discrete limit at ", 
           Pane[
            Style[
             HoldForm["\[Infinity]"], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          DiscreteLimit[
          1/$CellContext`\[Beta], $CellContext`\[Beta] -> 
           DirectedInfinity[1]]]& }, {
         Row[{"discrete limit at ", 
           Pane[
            Style[
             HoldForm["-\[Infinity]"], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
          DiscreteLimit[
          1/$CellContext`\[Beta], $CellContext`\[Beta] -> 
           DirectedInfinity[-1]]]& }}], Predictions`InInput}, {
     "InputMathOperation$Asymptotes", 
      Predictions`Prediction[
      0.5, "analysis", "asymptotes", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Asymptotes"][1/$CellContext`\[Beta], 
          Hold[$CellContext`\[Beta]], $CellContext`y]]]& ], 
      Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "structural operations", "extract function", Apply[HoldComplete, 
        Hold[1/$CellContext`\[Beta]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function domain", HoldComplete[
          FunctionDomain[
          1/$CellContext`\[Beta], {$CellContext`\[Beta]}]]& }, {
        "function range", HoldComplete[
          FunctionRange[
          1/$CellContext`\[Beta], {$CellContext`\[Beta]}, {$CellContext`x}]]& \
}}], Predictions`InInput}, {"InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "properties", "", {{"function parity", HoldComplete[
          ResourceFunction["FunctionParity"][
          1/$CellContext`\[Beta], $CellContext`\[Beta]]]& }, {
        "even function?", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
          1/$CellContext`\[Beta], $CellContext`\[Beta]]]& }, {
        "odd function?", HoldComplete[
          ResourceFunction["OddFunctionQ"][
          1/$CellContext`\[Beta], $CellContext`\[Beta]]]& }}], 
      Predictions`InInput}, {"InputMathOperation$InflectionPoints", 
      Predictions`Prediction[
      0.5, "analysis", "inflection points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["InflectionPoints"][1/$CellContext`\[Beta], 
          Hold[$CellContext`\[Beta]]]]]& ], Predictions`InInput}, {
     "InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "integration", "", {{"integral from 0 to \[Infinity]", HoldComplete[
          Integrate[1/$CellContext`\[Beta], {$CellContext`\[Beta], 0, 
            DirectedInfinity[1]}]]& }, {
        "integral from -\[Infinity] to 0", HoldComplete[
          Integrate[1/$CellContext`\[Beta], {$CellContext`\[Beta], 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$InvertFunction", 
      Predictions`Prediction[0.5, "solving", "invert function", HoldComplete[
        Reduce[$CellContext`x == 
         1/$CellContext`\[Beta], $CellContext`\[Beta]]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotFunction", 
      Predictions`Prediction[0.5, "plotting", "plot function", HoldComplete[
        Plot[$CellContext`\[Beta]^(-1), {$CellContext`\[Beta], -8.`3., 
          8.`3.}]]& ], Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.5, "analysis", "real zeros", Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[1/$CellContext`\[Beta] == 0, {
           Hold[$CellContext`\[Beta]]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "analysis", "stationary points", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][1/$CellContext`\[Beta], 
          Hold[$CellContext`\[Beta]]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative wrt ", 
         Pane[
          Style[
           HoldForm["\[Beta]"], LineBreakWithin -> False], ImageSize -> {150},
           BaselinePosition -> Baseline]}], HoldComplete[
        D[1/$CellContext`\[Beta], $CellContext`\[Beta]]]& ], 
      Predictions`InInput}, {"InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "integration", 
       Row[{"indefinite integral wrt ", 
         Pane[
          Style[
           HoldForm["\[Beta]"], LineBreakWithin -> False], ImageSize -> {150},
           BaselinePosition -> Baseline]}], HoldComplete[
        Integrate[1/$CellContext`\[Beta], $CellContext`\[Beta]]]& ], 
      Predictions`InInput}, {"InputMathOperation$DerivativeAtLimitPoint", 
      Predictions`Prediction[0.5, "derivatives", 
       Row[{"derivative at ", 
         Pane[
          Style[
           HoldForm[$CellContext`\[Beta]], LineBreakWithin -> False], 
          ImageSize -> {150}, BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[
            DirectedInfinity[1]], LineBreakWithin -> False], 
          ImageSize -> {150}, BaselinePosition -> Baseline]}], HoldComplete[
        ReplaceAll[
         D[
         1/$CellContext`\[Beta], $CellContext`\[Beta]], $CellContext`\[Beta] -> 
         Infinity]]& ], Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "series", 
       Row[{"series expansion at ", 
         Pane[
          Style[
           HoldForm["\[Beta]"], LineBreakWithin -> False], ImageSize -> {150},
           BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline]}], HoldComplete[
        Series[1/$CellContext`\[Beta], {$CellContext`\[Beta], 0, 5}]]& ], 
      Predictions`InInput}}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, "allassumptions" -> {
     XMLElement["assumptions", {"count" -> "1"}, {
       XMLElement[
       "assumption", {
        "type" -> "LimitHead", "word" -> " limit ", "template" -> 
         "Assuming limit refers to a continuous limit${separator}Use the \
${desc} instead", "count" -> "2", "pulldown" -> "false", "default" -> 
         "\"LimitHead\" -> {\"Continuous\"}"}, {
         XMLElement[
         "value", {
          "name" -> "Continuous", "desc" -> "continuous", "input" -> 
           "\"LimitHead\" -> {\"Continuous\"}"}, {}], 
         XMLElement[
         "value", {
          "name" -> "Discrete", "desc" -> "discrete", "input" -> 
           "\"LimitHead\" -> {\"Discrete\"}"}, {}]}]}]}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[Automatic], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[True]], 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[1]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    2, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1231., {80., 21.}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"->Association[
  "HideDetails" -> FrontEnd`SuppressEvaluationHash[False]]},
 CellLabel->"In[47]:=",ExpressionUUID->"8a238a2e-0172-487e-a33c-8067b3067a5c"],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"1", "/", "\[Beta]"}], ",", " ", 
   RowBox[{"\[Beta]", " ", "->", " ", "Infinity"}]}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{
 "CellSettings"->{"UsageTags" -> {{"Limit", 1}, {"Infinity", 1}}}},
 CellChangeTimes->{3.842703626318836*^9},
 CellLabel->"In[47]:=",ExpressionUUID->"feaa56fb-eb47-45af-857a-37ebcee235bd"],

Cell[BoxData[
 FormBox["0", TraditionalForm]], "Output",
 CellChangeTimes->{3.8427036263409405`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"fc425fe0-1337-490c-b450-ec73ff6a4666"]
}, Open  ]],

Cell[TextData[{
 "Question #1: Solve fo x: ",
 Cell[BoxData[
  FormBox[
   UnderscriptBox["4", "x"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "0ed8340d-ceb7-4d0e-a9a9-5c5f3c0f250d"],
 "+1 =3"
}], "Text", "NLI",
 CellChangeTimes->{{3.842703681824278*^9, 
  3.8427037523986864`*^9}},ExpressionUUID->"2ff819cb-f7f8-4243-a68a-\
e11375830c43"]
}, Open  ]],

Cell["Slideshows", "Section", "NLI",
 CellChangeTimes->{{3.8427037788107457`*^9, 
  3.842703781374995*^9}},ExpressionUUID->"f5e84ed7-7c93-4cde-afb7-\
8599518d7ace"]
}, Open  ]]
},
WindowSize->{1360, 685},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
TaggingRules->{
 "ShowSpecialCharactersDockedCell" -> False, "TryRealOnly" -> False, 
  "SpecialCharactersTab" -> "Special Characters"},
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"WolframAlphaNotebook.nb",
ExpressionUUID->"55481c6d-5e23-4913-8772-35468752b40b"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 165, 3, 98, "Title",ExpressionUUID->"7dd2333f-d3cd-49f1-b9b9-80ab84bbb1a3"],
Cell[CellGroupData[{
Cell[773, 29, 206, 6, 120, "Section",ExpressionUUID->"34aa87d5-4596-4f55-a967-a6b913b753de"],
Cell[982, 37, 177, 3, 38, "Text",ExpressionUUID->"e851b375-35ed-43d0-b9bd-9efbe045cd43"],
Cell[CellGroupData[{
Cell[1184, 44, 167, 3, 34, "Subsection",ExpressionUUID->"38142254-97f9-4cfe-a32a-a72c89340e47"],
Cell[CellGroupData[{
Cell[1376, 51, 983, 19, 80, "DeployedNLInput",ExpressionUUID->"743f9f52-a09c-4708-83e3-76264149d19c"],
Cell[2362, 72, 183, 3, 31, "DeployedWLInput",ExpressionUUID->"38c6f73a-1b1d-43ad-8163-2ed6fd940e72"],
Cell[2548, 77, 199, 4, 50, "Output",ExpressionUUID->"fb5d4bf2-ac79-45c3-ad1e-6785908442fb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2784, 86, 1039, 19, 80, "DeployedNLInput",ExpressionUUID->"9faa5c69-6e28-4606-bd45-ddf7508ef4d0"],
Cell[3826, 107, 306, 6, 31, "DeployedWLInput",ExpressionUUID->"dd4af654-4d1b-4674-961d-1d2522662d05"],
Cell[4135, 115, 199, 3, 33, "Output",ExpressionUUID->"a132bbdf-7268-4372-90f9-5f0685b9d4e0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4371, 123, 975, 19, 80, "DeployedNLInput",ExpressionUUID->"17adbdd5-400d-4190-8472-6865612dc465"],
Cell[5349, 144, 181, 3, 31, "DeployedWLInput",ExpressionUUID->"a9db4aaa-2438-4b69-b1f1-225c288180f4"],
Cell[5533, 149, 178, 3, 33, "Output",ExpressionUUID->"81000b03-4575-44c3-b6af-a5c0fcfa9f9f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5748, 157, 1012, 19, 80, "DeployedNLInput",ExpressionUUID->"9076aaac-72bb-4355-a31b-2b3fbe189a74"],
Cell[6763, 178, 285, 5, 31, "DeployedWLInput",ExpressionUUID->"925d80b2-22b7-4111-bb08-e8dfbc372002"],
Cell[7051, 185, 303, 5, 33, "Output",ExpressionUUID->"679b6eb4-ca43-450d-90d8-7e759f716fd3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7403, 196, 187, 3, 34, "Subsection",ExpressionUUID->"965a75ba-6532-48bc-b77d-c5fc14c294f5"],
Cell[CellGroupData[{
Cell[7615, 203, 1002, 18, 80, "DeployedNLInput",ExpressionUUID->"48434f76-6168-421e-a142-1d9b2f3b06eb"],
Cell[8620, 223, 261, 4, 31, "DeployedWLInput",ExpressionUUID->"93226e40-a263-4aae-b86b-8ac8a186881d"],
Cell[8884, 229, 178, 3, 33, "Output",ExpressionUUID->"17a47caf-cd31-4090-81a9-00ff6140044a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9099, 237, 1743, 34, 118, "DeployedNLInput",ExpressionUUID->"761d87e2-6e61-4a58-b272-7f77bac0c2f9"],
Cell[10845, 273, 236, 5, 31, "DeployedWLInput",ExpressionUUID->"bf1dedbf-1926-4999-aa16-4b165a1058bf"],
Cell[11084, 280, 178, 3, 33, "Output",ExpressionUUID->"d564548c-4b66-4628-aac3-5bd58393632a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11299, 288, 985, 18, 80, "DeployedNLInput",ExpressionUUID->"485b3b17-a7f5-4d80-8786-6d267f4e3e43"],
Cell[12287, 308, 272, 5, 31, "DeployedWLInput",ExpressionUUID->"c15078a8-2e3b-45c8-92fa-ec4116fe75d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12596, 318, 1239, 25, 80, "DeployedNLInput",ExpressionUUID->"7da64eee-d3f3-478d-8081-b47e118f6ddb"],
Cell[13838, 345, 433, 10, 32, "DeployedWLInput",ExpressionUUID->"76838a16-460d-484f-9674-207c24023c38"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14308, 360, 980, 18, 80, "DeployedNLInput",ExpressionUUID->"01dc7cf6-746f-4927-8762-a346365fe287"],
Cell[15291, 380, 185, 3, 31, "DeployedWLInput",ExpressionUUID->"3470ef6c-de25-4bd7-9f8f-492045d84ce9"],
Cell[15479, 385, 180, 3, 33, "Output",ExpressionUUID->"be86c8c0-030a-4292-91ea-67e9b6b88346"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15696, 393, 7476, 159, 82, "DeployedNLInput",ExpressionUUID->"092dcbb3-1986-4f34-9f80-1c3ac56654a2"],
Cell[23175, 554, 323, 6, 31, "DeployedWLInput",ExpressionUUID->"702e3c27-8810-4870-9a74-fd44972488e0"],
Cell[23501, 562, 224, 5, 33, "Output",ExpressionUUID->"1c474227-e1ec-459a-9171-abbf1f2c32bd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23762, 572, 1185, 24, 80, "DeployedNLInput",ExpressionUUID->"27855772-ad05-4776-be20-4c65ee56df8f"],
Cell[24950, 598, 437, 10, 31, "DeployedWLInput",ExpressionUUID->"56bcfa97-fdd9-4795-b69e-1c4c3b6b11c0"],
Cell[25390, 610, 180, 3, 33, "Output",ExpressionUUID->"d9414f25-9887-4d5f-a9e5-7ffdf5c044a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25607, 618, 1238, 25, 80, "DeployedNLInput",ExpressionUUID->"fb74639c-de40-4ddd-bf9d-8ab3e2a29c1d"],
Cell[26848, 645, 387, 9, 32, "DeployedWLInput",ExpressionUUID->"9a28d622-9289-4acf-89df-be0783e124ec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27272, 659, 1704, 33, 118, "DeployedNLInput",ExpressionUUID->"a18367f3-7e99-4ba4-ab6e-41f301646e75"],
Cell[28979, 694, 215, 4, 32, "DeployedWLInput",ExpressionUUID->"d821031a-f8b1-4328-b045-ad9dd55bef68"],
Cell[29197, 700, 187, 3, 33, "Output",ExpressionUUID->"694400d8-8d87-4fc0-9d41-a0c1110e364b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[29433, 709, 164, 3, 34, "Subsection",ExpressionUUID->"c17fa149-f911-4576-9b48-aaae72c8c9d4"],
Cell[CellGroupData[{
Cell[29622, 716, 7644, 155, 82, "DeployedNLInput",ExpressionUUID->"2b63d455-fe47-433b-88c3-94ae4677f3d4"],
Cell[37269, 873, 443, 11, 31, "DeployedWLInput",ExpressionUUID->"51f3d2f9-611c-4993-a9c9-126e317ea661"],
Cell[37715, 886, 3569, 76, 239, "Output",ExpressionUUID->"ecc1392c-6210-41fc-b3d0-886b73e79c30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41321, 967, 5162, 109, 82, "DeployedNLInput",ExpressionUUID->"fb94a166-7111-4ec5-b5f8-996ea38b0928"],
Cell[46486, 1078, 592, 16, 31, "DeployedWLInput",ExpressionUUID->"cb78a527-fb3a-460e-ba86-14ab91cae1f7"],
Cell[47081, 1096, 21225, 426, 242, "Output",ExpressionUUID->"dcc7020a-0e4d-4be8-93f6-bfddd50065c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68343, 1527, 1119, 22, 80, "DeployedNLInput",ExpressionUUID->"b1f19414-ec85-46b6-b44f-d338774dd9a2"],
Cell[69465, 1551, 429, 11, 31, "DeployedWLInput",ExpressionUUID->"a838cb67-716d-4aee-9070-84acc2885201"],
Cell[69897, 1564, 211, 4, 33, "Output",ExpressionUUID->"89f2e0ad-2141-4c79-882f-5c677f5f2de0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[70169, 1575, 165, 3, 82, "Section",ExpressionUUID->"f9a9dd42-f6c9-4193-9a1a-0253e0707f2f"],
Cell[70337, 1580, 396, 13, 38, "Text",ExpressionUUID->"141b5d82-8770-4879-a766-7c8cf66ade43"],
Cell[CellGroupData[{
Cell[70758, 1597, 11463, 256, 271, "DeployedNLInput",ExpressionUUID->"568f0d63-aac1-4f24-920b-9c1b889bc659"],
Cell[82224, 1855, 367, 8, 32, "DeployedWLInput",ExpressionUUID->"6ecf54e4-1dc4-4a7e-8c9b-d7ca8556c5f1"],
Cell[82594, 1865, 346, 10, 50, "Output",ExpressionUUID->"d63729ff-eb30-42bb-857a-d9c735568a8f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82977, 1880, 13769, 313, 82, "DeployedNLInput",ExpressionUUID->"72610bb3-f12d-4f0a-a091-f760d168df0a"],
Cell[96749, 2195, 536, 13, 31, "DeployedWLInput",ExpressionUUID->"cdce49d7-09af-4381-9601-5aa86f2cc5f1"],
Cell[97288, 2210, 38155, 683, 238, "Output",ExpressionUUID->"d7133f22-f150-468b-b902-0ca191c9425e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135480, 2898, 7379, 151, 82, "DeployedNLInput",ExpressionUUID->"1ba6ce53-4bd4-459b-b8f0-397d3af62a1a"],
Cell[142862, 3051, 369, 9, 31, "DeployedWLInput",ExpressionUUID->"fcb39b88-dde2-473b-812d-331f459a5e76"],
Cell[143234, 3062, 249, 6, 33, "Output",ExpressionUUID->"db6cded5-52fd-4c0c-8f38-cca4c2f50842"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143520, 3073, 30907, 605, 80, "DeployedNLInput",ExpressionUUID->"db9154bf-3b35-438f-a248-c6a710ae36d6"],
Cell[174430, 3680, 30006, 602, 1020, "Output",ExpressionUUID->"8f3b8810-5957-4df5-8906-3a034ec3cee4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[204473, 4287, 31436, 618, 80, "DeployedNLInput",ExpressionUUID->"fb1af447-3700-445d-a5ba-0a836585de49"],
Cell[235912, 4907, 30467, 611, 244, "Output",ExpressionUUID->"1c45c3c0-701d-4d41-a05b-601c603ac6ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266416, 5523, 4746, 90, 82, "DeployedNLInput",ExpressionUUID->"944cbbdc-563f-41ed-b0a6-77d9744fdd62"],
Cell[271165, 5615, 423, 10, 31, "DeployedWLInput",ExpressionUUID->"a5b11d2f-85c5-406a-9566-03c0f57a8a34"],
Cell[271591, 5627, 197, 4, 33, "Output",ExpressionUUID->"18c934ae-9293-4cd3-aaab-6c96faccb2b3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[271825, 5636, 2781, 59, 82, "DeployedNLInput",ExpressionUUID->"b2bd8d5c-0d24-4c19-aaec-2c9ee46727c5"],
Cell[274609, 5697, 624, 17, 32, "DeployedWLInput",ExpressionUUID->"5ba39731-2c04-4603-8d02-1f39e2c4c413"],
Cell[275236, 5716, 317, 9, 34, "Output",ExpressionUUID->"3807ef09-fd31-402f-8b9a-8988d1ad61ba"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[275602, 5731, 162, 3, 82, "Section",ExpressionUUID->"5c7257da-08a7-4e4e-80e6-06d22b5e59b8"],
Cell[CellGroupData[{
Cell[275789, 5738, 7682, 157, 82, "DeployedNLInput",ExpressionUUID->"4ba28244-a806-4df1-bdc2-e4f4a4c09694"],
Cell[283474, 5897, 445, 11, 31, "DeployedWLInput",ExpressionUUID->"be5f0c7d-ce3f-4892-97af-8245856cd43f"],
Cell[283922, 5910, 3571, 76, 239, "Output",ExpressionUUID->"df2e8c29-5dff-42db-bdf2-b26b5291f466"]
}, Open  ]],
Cell[CellGroupData[{
Cell[287530, 5991, 8720, 181, 193, "DeployedNLInput",ExpressionUUID->"baf9cb94-d43f-40bd-b1a1-bab7526d4074"],
Cell[296253, 6174, 648, 16, 32, "DeployedWLInput",ExpressionUUID->"238126f6-c011-4b33-80d0-ecf88ab8262c"],
Cell[296904, 6192, 3515, 76, 239, "Output",ExpressionUUID->"f57c6e8d-baa0-4e56-bbd0-f1c2ed8f4307"]
}, Open  ]],
Cell[CellGroupData[{
Cell[300456, 6273, 7679, 157, 193, "DeployedNLInput",ExpressionUUID->"fe9dd997-2a60-407b-bba1-e2240f5690cb"],
Cell[308138, 6432, 445, 11, 31, "DeployedWLInput",ExpressionUUID->"97826d2f-e798-4e49-905f-a85d3ce5fcda"],
Cell[308586, 6445, 3568, 76, 239, "Output",ExpressionUUID->"e6ffcd67-f4e9-45ba-adfe-8b119c416636"]
}, Open  ]],
Cell[CellGroupData[{
Cell[312191, 6526, 9070, 189, 82, "DeployedNLInput",ExpressionUUID->"b6d1abea-9d43-4d27-9a67-6c2824d191b4"],
Cell[321264, 6717, 385, 8, 31, "DeployedWLInput",ExpressionUUID->"c5332394-66a2-4c37-b808-38507839c02d"],
Cell[321652, 6727, 195, 4, 33, "Output",ExpressionUUID->"f711acea-5686-4e77-ac80-9b1c8d883017"]
}, Open  ]],
Cell[CellGroupData[{
Cell[321884, 6736, 1509, 32, 80, "DeployedNLInput",ExpressionUUID->"ef8b0c0f-3670-45e3-b85e-31402b6a343d"],
Cell[323396, 6770, 2271, 61, 37, "DeployedWLInput",ExpressionUUID->"dad6f486-2bfa-45ab-b21d-0944c3ddb9a5"],
Cell[325670, 6833, 8773, 169, 625, "Output",ExpressionUUID->"48268031-879b-4f4f-89a4-f357cefe9d33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[334480, 7007, 8043, 173, 82, "DeployedNLInput",ExpressionUUID->"c93cfe6e-1d36-40fd-91a5-6f67b8e14551"],
Cell[342526, 7182, 614, 15, 32, "DeployedWLInput",ExpressionUUID->"1e458642-8f86-473e-83c5-eba56043436c"],
Cell[343143, 7199, 228770, 3781, 312, 138173, 2295, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"f7338cde-4ebd-40fc-a7d5-bd8ec12d25e8"]
}, Open  ]],
Cell[571928, 10983, 543, 15, 41, "WolframAlphaLong",ExpressionUUID->"34abc2c2-efd9-424c-98bc-acbda5afb907"],
Cell[CellGroupData[{
Cell[572496, 11002, 7726, 164, 82, "DeployedNLInput",ExpressionUUID->"8a22a34b-6240-4e0f-b4bb-4976605854c7"],
Cell[580225, 11168, 627, 16, 32, "DeployedWLInput",ExpressionUUID->"511fbf8c-2a48-41d9-950c-0888408690a6"],
Cell[580855, 11186, 465890, 7954, 386, "Output",ExpressionUUID->"93ef9267-0580-45f6-95e9-f41d66a36bc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1046782, 19145, 1217, 24, 80, "DeployedNLInput",ExpressionUUID->"f284987a-fa3b-41a8-870f-869997eaea36"],
Cell[1048002, 19171, 389, 9, 31, "DeployedWLInput",ExpressionUUID->"30a13a1b-5e91-44eb-8da4-cccb70b5d231"],
Cell[1048394, 19182, 1564, 24, 129, "Output",ExpressionUUID->"11d21030-7bf1-4a46-a875-4d36c023d415"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1049995, 19211, 354, 10, 50, InheritFromParent,ExpressionUUID->"85325939-d730-4d8e-b86b-e250c9c948c2"],
Cell[1050352, 19223, 1566, 24, 72, "Output",ExpressionUUID->"3afb35b2-ad67-4451-b27a-65f655bca2ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1051955, 19252, 1027, 21, 80, "DeployedNLInput",ExpressionUUID->"03f8ec14-ee26-4e0e-b614-c87e2053ca13"],
Cell[1052985, 19275, 283, 5, 31, "DeployedWLInput",ExpressionUUID->"2723cfbd-0629-42fb-a707-89d5bafb5385"],
Cell[1053271, 19282, 2054, 50, 236, "Output",ExpressionUUID->"4c1366c9-d91f-413e-bf1a-96a28b9fb8a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1055362, 19337, 1182, 23, 80, "DeployedNLInput",ExpressionUUID->"4c6afc19-d1ca-46f0-aa6f-ef8033f328cc"],
Cell[1056547, 19362, 391, 8, 31, "DeployedWLInput",ExpressionUUID->"fe0765dc-2dcc-4376-a191-1babfd9b8e02"],
Cell[1056941, 19372, 17061, 392, 377, "Output",ExpressionUUID->"79f76317-7972-48d0-87eb-012a9f45dc7f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1074039, 19769, 1185, 23, 80, "DeployedNLInput",ExpressionUUID->"957b7f59-b351-4dba-8acc-cff292de7f4b"],
Cell[1075227, 19794, 395, 8, 32, "DeployedWLInput",ExpressionUUID->"6ddb9887-0246-4201-b5e1-3e94892591c2"],
Cell[1075625, 19804, 3150, 87, 242, "Output",ExpressionUUID->"0848c41a-926d-4c35-a21a-fc7d7bac7a5b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1078824, 19897, 174, 3, 82, "Section",ExpressionUUID->"5dee938b-9655-4da2-82d9-ee358ecc49f4"],
Cell[CellGroupData[{
Cell[1079023, 19904, 10976, 248, 99, "DeployedNLInput",ExpressionUUID->"cf50521e-3e9c-42c3-adea-6183ca6d6efe"],
Cell[1090002, 20154, 367, 8, 32, "DeployedWLInput",ExpressionUUID->"cb08f0f7-81a2-4aa6-a4ce-0b3340553686"],
Cell[1090372, 20164, 344, 10, 50, "Output",ExpressionUUID->"6c77c7f5-e286-4656-be00-7ddfb7fd8d9a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1090753, 20179, 1082, 22, 80, "DeployedNLInput",ExpressionUUID->"9415b871-eef2-48f2-9113-a843a9715287"],
Cell[1091838, 20203, 283, 5, 31, "DeployedWLInput",ExpressionUUID->"2ac095a6-a8b4-4302-b080-d22eab539439"],
Cell[1092124, 20210, 302, 5, 33, "Output",ExpressionUUID->"7ddbdd6e-8911-4baa-bf5a-bc9c3fc21a30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1092463, 20220, 11093, 230, 118, "DeployedNLInput",ExpressionUUID->"8a238a2e-0172-487e-a33c-8067b3067a5c"],
Cell[1103559, 20452, 389, 9, 32, "DeployedWLInput",ExpressionUUID->"feaa56fb-eb47-45af-857a-37ebcee235bd"],
Cell[1103951, 20463, 179, 3, 33, "Output",ExpressionUUID->"fc425fe0-1337-490c-b450-ec73ff6a4666"]
}, Open  ]],
Cell[1104145, 20469, 365, 11, 47, "Text",ExpressionUUID->"2ff819cb-f7f8-4243-a68a-e11375830c43"]
}, Open  ]],
Cell[1104525, 20483, 164, 3, 82, "Section",ExpressionUUID->"f5e84ed7-7c93-4cde-afb7-8599518d7ace"]
}, Open  ]]
}
]
*)

